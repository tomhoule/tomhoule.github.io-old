var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"inputs":[{"name":"r"}],"output":{"generics":["u32"],"name":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"inputs":[],"output":{"name":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"inputs":[{"name":"u32"}],"output":{"name":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",0,null],[12,"background","","The style's background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",1,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",null,null],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prefix","","The prefix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this style and another.",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"prefix","","The prefix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this colour and another.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Creates a new Style with no differences.",0,{"inputs":[],"output":{"name":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"bold","","Returns a `Style` with the bold property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a `Style` with the italic property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a `Style` with the underline property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a `Style` with the blink property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a `Style` with the reverse property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a `Style` with the hidden property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a `Style` with the background colour property set.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"from","","",6,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",null,null],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["anymap"] = {"doc":"This crate provides the `AnyMap` type, a safe and convenient store for one value of each type.","items":[[3,"Map","anymap","A collection containing zero or one values for any given type and allowing convenient, type-safe access to those values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in an `Map`.",null,null],[3,"VacantEntry","","A view into a single empty location in an `Map`.",null,null],[4,"Entry","","A view into a single location in an `Map`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry",0,null],[13,"Vacant","","A vacant Entry",0,null],[0,"any","","The different types of `Any` for use in a map.",null,null],[8,"UncheckedAnyExt","anymap::any","",null,null],[10,"downcast_ref_unchecked","","",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"downcast_mut_unchecked","","",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"downcast_unchecked","","",1,{"i":[{"n":"box"}],"o":{"n":"box"}}],[8,"Any","","See also `CloneAny` for a cloneable version of this trait.",null,null],[8,"CloneAny","","See also `Any` for a version without the `Clone` requirement.",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",2,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",2,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",2,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",2,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",2,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",3,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",3,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",3,{"i":[{"n":"box"}],"o":{"n":"box"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast_ref_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_mut_unchecked","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"downcast_unchecked","","",3,{"i":[{"n":"box"}],"o":{"n":"box"}}],[0,"raw","anymap","The raw form of a `Map`, allowing untyped access.",null,null],[3,"RawMap","anymap::raw","The raw, underlying form of a `Map`.",null,null],[3,"Iter","","`RawMap` iterator.",null,null],[3,"IterMut","","`RawMap` mutable iterator.",null,null],[3,"IntoIter","","`RawMap` move iterator.",null,null],[3,"Drain","","`RawMap` drain iterator.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `RawMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `RawMap`.",null,null],[4,"Entry","","A view into a single location in a `RawMap`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry",4,null],[13,"Vacant","","A vacant Entry",4,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"rawmap"}}],[11,"default","","",5,{"o":{"n":"rawmap"}}],[11,"new","","Create an empty collection.",5,{"o":{"n":"rawmap"}}],[11,"with_capacity","","Creates an empty collection with the given initial capacity.",5,{"i":[{"n":"usize"}],"o":{"n":"rawmap"}}],[11,"capacity","","Returns the number of elements the collection can hold without reallocating.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the collection. The collection may reserve more space to avoid frequent reallocations.",5,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",5,{"i":[{"n":"self"}]}],[11,"len","","Returns the number of items in the collection.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if there are no items in the collection.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Removes all items from the collection. Keeps the allocated memory for reuse.",5,{"i":[{"n":"self"}]}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",6,null],[11,"len","","",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",7,null],[11,"len","","",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",8,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",8,null],[11,"len","","",8,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",9,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"size_hint","","",9,null],[11,"len","","",9,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"iter","","An iterator visiting all entries in arbitrary order.",5,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","An iterator visiting all entries in arbitrary order.",5,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"drain","","Clears the map, returning all items as an iterator.",5,{"i":[{"n":"self"}],"o":{"n":"drain"}}],[11,"entry","","Gets the entry for the given type in the collection for in-place manipulation.",5,{"i":[{"n":"self"},{"n":"typeid"}],"o":{"n":"entry"}}],[11,"get","","Returns a reference to the value corresponding to the key.",5,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",5,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",5,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"option"}}],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value present in the map, that value is returned. Otherwise, None is returned.",5,{"i":[{"n":"self"},{"n":"typeid"},{"n":"box"}],"o":{"g":["box"],"n":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",5,{"i":[{"n":"self"},{"n":"q"}],"o":{"g":["box"],"n":"option"}}],[11,"index","","",5,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"a"}}],[11,"index_mut","","",5,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"a"}}],[11,"into_iter","","",5,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",4,{"i":[{"n":"self"},{"n":"box"}],"o":{"n":"a"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"a"}}],[11,"get","","Gets a reference to the value in the entry.",10,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",10,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the collection itself.",10,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",10,{"i":[{"n":"self"},{"n":"box"}],"o":{"n":"box"}}],[11,"remove","","Takes the value out of the entry, and returns it.",10,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",11,{"i":[{"n":"self"},{"n":"box"}],"o":{"n":"a"}}],[6,"AnyMap","anymap","The most common type of `Map`: just using `Any`.",null,null],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"map"}}],[11,"new","","Create an empty collection.",12,{"o":{"n":"map"}}],[11,"with_capacity","","Creates an empty collection with the given initial capacity.",12,{"i":[{"n":"usize"}],"o":{"n":"map"}}],[11,"capacity","","Returns the number of elements the collection can hold without reallocating.",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the collection. The collection may reserve more space to avoid frequent reallocations.",12,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"shrink_to_fit","","Shrinks the capacity of the collection as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",12,{"i":[{"n":"self"}]}],[11,"len","","Returns the number of items in the collection.",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if there are no items in the collection.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Removes all items from the collection. Keeps the allocated memory for reuse.",12,{"i":[{"n":"self"}]}],[11,"get","","Returns a reference to the value stored in the collection for the type `T`, if it exists.",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the value stored in the collection for the type `T`, if it exists.",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"insert","","Sets the value stored in the collection for the type `T`. If the collection already had a value of type `T`, that value is returned. Otherwise, `None` is returned.",12,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"remove","","Removes the `T` value from the collection, returning it if there was one or `None` if there was not.",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"contains","","Returns true if the collection contains a value of type `T`.",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"entry","","Gets the entry for the given type in the collection for in-place manipulation",12,{"i":[{"n":"self"}],"o":{"n":"entry"}}],[11,"as_ref","","",12,{"i":[{"n":"self"}],"o":{"n":"rawmap"}}],[11,"as_mut","","",12,{"i":[{"n":"self"}],"o":{"n":"rawmap"}}],[11,"into","","",12,{"i":[{"n":"self"}],"o":{"n":"rawmap"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"v"}}],[11,"get","","Gets a reference to the value in the entry",13,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry",13,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the collection itself",13,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",13,{"i":[{"n":"self"}],"o":{"n":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"v"}}]],"paths":[[4,"Entry"],[8,"UncheckedAnyExt"],[8,"Any"],[8,"CloneAny"],[4,"Entry"],[3,"RawMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Map"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"generics":["utf8error"],"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["ascii"] = {"doc":"A library that provides ASCII-only string and character types, equivalent to the `char`, `str` and `String` types in the standard library.","items":[[3,"ToAsciiCharError","ascii","Error returned by `ToAsciiChar`.",null,null],[3,"AsciiStr","","AsciiStr represents a byte or string slice that only contains ASCII characters.",null,null],[3,"AsAsciiStrError","","Error that is returned when a sequence of `u8` are not all ASCII.",null,null],[3,"AsciiString","","A growable string stored as an ASCII encoded buffer.",null,null],[4,"AsciiChar","","An ASCII character. It wraps a `u8`, with the highest bit always zero.",null,null],[13,"Null","","`'\\0'`",0,null],[13,"SOH","","Start Of Heading",0,null],[13,"SOX","","Start Of teXt",0,null],[13,"ETX","","End of TeXt",0,null],[13,"EOT","","End Of Transmission",0,null],[13,"ENQ","","Enquiry",0,null],[13,"ACK","","Acknowledgement",0,null],[13,"Bell","","bell / alarm / audible",0,null],[13,"BackSpace","","Backspace",0,null],[13,"Tab","","`'\\t'`",0,null],[13,"LineFeed","","`'\\n'`",0,null],[13,"VT","","Vertical tab",0,null],[13,"FF","","Form Feed",0,null],[13,"CarriageReturn","","`'\\r'`",0,null],[13,"SI","","Shift In",0,null],[13,"SO","","Shift Out",0,null],[13,"DLE","","Data Link Escape",0,null],[13,"DC1","","Device control 1, often XON",0,null],[13,"DC2","","Device control 2",0,null],[13,"DC3","","Device control 3, Often XOFF",0,null],[13,"DC4","","Device control 4",0,null],[13,"NAK","","Negative AcKnowledgement",0,null],[13,"SYN","","Synchronous idle",0,null],[13,"ETB","","End of Transmission Block",0,null],[13,"CAN","","Cancel",0,null],[13,"EM","","End of Medium",0,null],[13,"SUB","","Substitute",0,null],[13,"ESC","","Escape",0,null],[13,"FS","","File Separator",0,null],[13,"GS","","Group Separator",0,null],[13,"RS","","Record Separator",0,null],[13,"US","","Unit Separator",0,null],[13,"Space","","`' '`",0,null],[13,"Exclamation","","`'!'`",0,null],[13,"Quotation","","`'\"'`",0,null],[13,"Hash","","`'#'`",0,null],[13,"Dollar","","`'$'`",0,null],[13,"Percent","","`'%'`",0,null],[13,"Ampersand","","`'&'`",0,null],[13,"Apostrophe","","`'\\''`",0,null],[13,"ParenOpen","","`'('`",0,null],[13,"ParenClose","","`')'`",0,null],[13,"Asterisk","","`'*'`",0,null],[13,"Plus","","`'+'`",0,null],[13,"Comma","","`','`",0,null],[13,"Minus","","`'-'`",0,null],[13,"Dot","","`'.'`",0,null],[13,"Slash","","`'/'`",0,null],[13,"_0","","`'0'`",0,null],[13,"_1","","`'1'`",0,null],[13,"_2","","`'2'`",0,null],[13,"_3","","`'3'`",0,null],[13,"_4","","`'4'`",0,null],[13,"_5","","`'5'`",0,null],[13,"_6","","`'6'`",0,null],[13,"_7","","`'7'`",0,null],[13,"_8","","`'8'`",0,null],[13,"_9","","`'9'`",0,null],[13,"Colon","","`':'`",0,null],[13,"Semicolon","","`';'`",0,null],[13,"LessThan","","`'<'`",0,null],[13,"Equal","","`'='`",0,null],[13,"GreaterThan","","`'>'`",0,null],[13,"Question","","`'?'`",0,null],[13,"At","","`'@'`",0,null],[13,"A","","`'A'`",0,null],[13,"B","","`'B'`",0,null],[13,"C","","`'C'`",0,null],[13,"D","","`'D'`",0,null],[13,"E","","`'E'`",0,null],[13,"F","","`'F'`",0,null],[13,"G","","`'G'`",0,null],[13,"H","","`'H'`",0,null],[13,"I","","`'I'`",0,null],[13,"J","","`'J'`",0,null],[13,"K","","`'K'`",0,null],[13,"L","","`'L'`",0,null],[13,"M","","`'M'`",0,null],[13,"N","","`'N'`",0,null],[13,"O","","`'O'`",0,null],[13,"P","","`'P'`",0,null],[13,"Q","","`'Q'`",0,null],[13,"R","","`'R'`",0,null],[13,"S","","`'S'`",0,null],[13,"T","","`'T'`",0,null],[13,"U","","`'U'`",0,null],[13,"V","","`'V'`",0,null],[13,"W","","`'W'`",0,null],[13,"X","","`'X'`",0,null],[13,"Y","","`'Y'`",0,null],[13,"Z","","`'Z'`",0,null],[13,"BracketOpen","","`'['`",0,null],[13,"BackSlash","","`'\\'`",0,null],[13,"BracketClose","","`']'`",0,null],[13,"Caret","","`'_'`",0,null],[13,"UnderScore","","`'_'`",0,null],[13,"Grave","","`'`'`",0,null],[13,"a","","`'a'`",0,null],[13,"b","","`'b'`",0,null],[13,"c","","`'c'`",0,null],[13,"d","","`'d'`",0,null],[13,"e","","`'e'`",0,null],[13,"f","","`'f'`",0,null],[13,"g","","`'g'`",0,null],[13,"h","","`'h'`",0,null],[13,"i","","`'i'`",0,null],[13,"j","","`'j'`",0,null],[13,"k","","`'k'`",0,null],[13,"l","","`'l'`",0,null],[13,"m","","`'m'`",0,null],[13,"n","","`'n'`",0,null],[13,"o","","`'o'`",0,null],[13,"p","","`'p'`",0,null],[13,"q","","`'q'`",0,null],[13,"r","","`'r'`",0,null],[13,"s","","`'s'`",0,null],[13,"t","","`'t'`",0,null],[13,"u","","`'u'`",0,null],[13,"v","","`'v'`",0,null],[13,"w","","`'w'`",0,null],[13,"x","","`'x'`",0,null],[13,"y","","`'y'`",0,null],[13,"z","","`'z'`",0,null],[13,"CurlyBraceOpen","","`'{'`",0,null],[13,"VerticalBar","","`'|'`",0,null],[13,"CurlyBraceClose","","`'}'`",0,null],[13,"Tilde","","`'~'`",0,null],[13,"DEL","","Delete",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","Constructs an ASCII character from a `u8`, `char` or other character type.",0,{"inputs":[{"name":"c"}],"output":{"generics":["toasciicharerror"],"name":"result"}}],[11,"from_unchecked","","Constructs an ASCII character from a `char` or `u8` without any checks.",0,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"as_byte","","Converts an ASCII character into a `u8`.",0,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"as_char","","Converts an ASCII character into a `char`.",0,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_digit","","Check if the character is a number (0-9)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Check if the character is a letter or number",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_blank","","Check if the character is a space or horizontal tab",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_whitespace","","Check if the character is a ' ', '\\t', '\\n' or '\\r'",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_control","","Check if the character is a control character",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_graph","","Checks if the character is printable (except space)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_print","","Checks if the character is printable (including space)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lowercase","","Checks if the character is alphabetic and lowercase",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uppercase","","Checks if the character is alphabetic and uppercase",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_punctuation","","Checks if the character is punctuation",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hex","","Checks if the character is a valid hex digit",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_ascii","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"to_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq_ignore_ascii_case","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"toasciicharerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"toasciicharerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_ascii_char","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["asciichar","toasciicharerror"],"name":"result"}}],[11,"to_ascii_char_unchecked","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"new","","Coerces into an `AsciiStr` slice.",2,{"inputs":[{"name":"s"}],"output":{"name":"asciistr"}}],[11,"as_str","","Converts `&self` to a `&str` slice.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_bytes","","Converts `&self` into a byte slice.",2,null],[11,"as_slice","","Returns the entire string as slice of `AsciiChar`s.",2,null],[11,"as_mut_slice","","Returns the entire string as mutable slice of `AsciiChar`s.",2,null],[11,"as_ptr","","Returns a raw pointer to the `AsciiStr`'s buffer.",2,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the `AsciiStr`'s buffer.",2,null],[11,"to_ascii_string","","Copies the content of this `AsciiStr` into an owned `AsciiString`.",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"from_ascii","","Converts anything that can represent a byte slice into an `AsciiStr`.",2,{"inputs":[{"name":"b"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[11,"from_ascii_unchecked","","Converts anything that can be represented as a byte slice to an `AsciiStr` without checking for non-ASCII characters..",2,{"inputs":[{"name":"b"}],"output":{"name":"asciistr"}}],[11,"len","","Returns the number of characters / bytes in this ASCII sequence.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the ASCII slice contains zero bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trim","","Returns an ASCII string slice with leading and trailing whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trim_left","","Returns an ASCII string slice with leading whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trim_right","","Returns an ASCII string slice with trailing whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"to_owned","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"as_ref","","",2,null],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"asciistr"}}],[11,"is_ascii","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"to_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"eq_ignore_ascii_case","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"asasciistrerror"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"asasciistrerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"asasciistrerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index of the first non-ASCII byte.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","Returns \"one or more bytes are not ASCII\"",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ascii_str","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[11,"as_ascii_str_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"as_mut_ascii_str","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[11,"as_mut_ascii_str_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"asciistring"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"new","","Creates a new, empty ASCII string buffer without allocating.",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new ASCII string buffer with the given capacity. The string will be able to hold exactly `capacity` bytes without reallocating. If `capacity` is 0, the ASCII string will not allocate.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Creates a new `AsciiString` from a length, capacity and pointer.",4,null],[11,"from_ascii_unchecked","","Converts a vector of bytes to an `AsciiString` without checking for non-ASCII characters.",4,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"from_ascii","","Converts anything that can represent a byte buffer into an `AsciiString`.",4,{"inputs":[{"name":"b"}],"output":{"generics":["asciistring"],"name":"result"}}],[11,"push_str","","Pushes the given ASCII string onto this ASCII string buffer.",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":null}],[11,"capacity","","Returns the number of bytes that this ASCII string buffer can hold without reallocating.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted in the given `AsciiString`. The collection may reserve more space to avoid frequent reallocations.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be inserted in the given `AsciiString`. Does nothing if the capacity is already sufficient.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of this ASCII string buffer to match it's length.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Adds the given ASCII character to the end of the ASCII string.",4,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":null}],[11,"truncate","","Shortens a ASCII string to the specified length.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the ASCII string buffer and returns it. Returns `None` if this string buffer is empty.",4,{"inputs":[{"name":"self"}],"output":{"generics":["asciichar"],"name":"option"}}],[11,"remove","","Removes the ASCII character at position `idx` from the buffer and returns it.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"insert","","Inserts an ASCII character into the buffer at position `idx`.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"asciichar"}],"output":null}],[11,"len","","Returns the number of bytes in this ASCII string.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the ASCII string contains zero bytes.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the ASCII string, setting length (but not capacity) to zero.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"borrow","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"from","","",4,{"inputs":[{"generics":["asciichar"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["asciistring","asasciistrerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"asciistring"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"into_ascii_string_unchecked","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"into_ascii_string","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["asciistring"],"name":"result"}}],[8,"ToAsciiChar","","Convert `char`, `u8` and other character types to `AsciiChar`.",null,null],[10,"to_ascii_char_unchecked","","Convert to `AsciiChar` without checking that it is an ASCII character.",5,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[10,"to_ascii_char","","Convert to `AsciiChar`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["asciichar","toasciicharerror"],"name":"result"}}],[8,"AsAsciiStr","","Convert slices of bytes to `AsciiStr`.",null,null],[10,"as_ascii_str_unchecked","","Convert to an ASCII slice without checking for non-ASCII characters.",6,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[10,"as_ascii_str","","Convert to an ASCII slice.",6,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[8,"AsMutAsciiStr","","Convert mutable slices of bytes to `AsciiStr`.",null,null],[10,"as_mut_ascii_str_unchecked","","Convert to a mutable ASCII slice without checking for non-ASCII characters.",7,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[10,"as_mut_ascii_str","","Convert to a mutable ASCII slice.",7,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[8,"IntoAsciiString","","Convert vectors into `AsciiString`.",null,null],[10,"into_ascii_string_unchecked","","Convert to `AsciiString` without checking for non-ASCII characters.",8,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[10,"into_ascii_string","","Convert to `AsciiString`.",8,{"inputs":[{"name":"self"}],"output":{"generics":["asciistring"],"name":"result"}}]],"paths":[[4,"AsciiChar"],[3,"ToAsciiCharError"],[3,"AsciiStr"],[3,"AsAsciiStrError"],[3,"AsciiString"],[8,"ToAsciiChar"],[8,"AsAsciiStr"],[8,"AsMutAsciiStr"],[8,"IntoAsciiString"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"i":[{"n":"f"}]}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"name","","Returns the name of this function.",1,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"backtraceframe"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"o":{"n":"backtrace"}}],[11,"new_unresolved","","Similar to `new` except that this does not resolve any symbols, this simply captures the backtrace as a list of addresses.",3,{"o":{"n":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"resolve","","If this backtrace was created from `new_unresolved` then this function will resolve all addresses in the backtrace to their symbolic names.",3,{"i":[{"n":"self"}]}],[11,"from","","",3,{"i":[{"g":["backtraceframe"],"n":"vec"}],"o":{"n":"self"}}],[11,"into","","",3,{"i":[{"n":"self"}],"o":{"g":["backtraceframe"],"n":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"i":[{"n":"self"}],"o":{"g":["symbolname"],"n":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"i":[{"n":"self"}],"o":{"g":["path"],"n":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",3,{"o":{"n":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["base64"] = {"doc":"Configs","items":[[3,"Config","base64","Contains configuration parameters for base64 encoding",null,null],[4,"DecodeError","","Errors that can occur while decoding.",null,null],[13,"InvalidByte","","An invalid byte was found in the input. The offset and offending byte are provided.",0,null],[13,"InvalidLength","","The length of the input is invalid.",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[13,"Crypt","","The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`)",1,null],[4,"LineEnding","","Line ending used in optional line wrapping.",null,null],[13,"LF","","Unix-style \\n",2,null],[13,"CRLF","","Windows-style \\r\\n",2,null],[4,"LineWrap","","Line wrap configuration.",null,null],[13,"NoWrap","","Don't wrap.",3,null],[13,"Wrap","","Wrap lines with the specified length and line ending. The length must be > 0.",3,null],[5,"encode","","Encode arbitrary octets as base64. Returns a String. Convenience for `encode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"encode_config","","Encode arbitrary octets as base64. Returns a String.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"name":"string"}}],[5,"encode_config_buf","","Encode arbitrary octets as base64. Writes into the supplied output buffer, which will grow the buffer if needed.",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"string"}],"output":null}],[5,"encode_config_slice","","Encode arbitrary octets as base64. Writes into the supplied output buffer.",null,null],[5,"decode","","Decode from string reference as octets. Returns a Result containing a Vec. Convenience `decode_config(input, base64::STANDARD);`.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config","","Decode from string reference as octets. Returns a Result containing a Vec.",null,{"inputs":[{"name":"t"},{"name":"config"}],"output":{"generics":["vec","decodeerror"],"name":"result"}}],[5,"decode_config_buf","","Decode from string reference as octets. Writes into the supplied buffer to avoid allocation. Returns a Result containing an empty tuple, aka ().",null,{"inputs":[{"name":"t"},{"name":"config"},{"name":"vec"}],"output":{"generics":["decodeerror"],"name":"result"}}],[5,"decode_config_slice","","Decode the input into the provided output slice.",null,null],[0,"display","","Enables base64'd output anywhere you might use a `Display` implementation, like a format string.",null,null],[3,"Base64Display","base64::display","A convenience wrapper for base64'ing bytes into a format string without heap allocation.",null,null],[4,"DisplayError","","Errors that can occur initializing a Base64Display.",null,null],[13,"InvalidLineLength","","If wrapping is configured, the line length must be a multiple of 4, and must not be absurdly large (currently capped at 1024, subject to change).",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"displayerror"}],"output":{"name":"bool"}}],[11,"with_config","","Create a `Base64Display` with the provided config.",5,null],[11,"standard","","Convenience method for creating a `Base64Display` with the `STANDARD` configuration.",5,null],[11,"url_safe","","Convenience method for creating a `Base64Display` with the `URL_SAFE` configuration.",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","base64","",0,{"inputs":[{"name":"self"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[17,"STANDARD","","Standard character set with padding.",null,null],[17,"STANDARD_NO_PAD","","Standard character set without padding.",null,null],[17,"MIME","","As per standards for MIME encoded messages",null,null],[17,"URL_SAFE","","URL-safe character set with padding",null,null],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",null,null],[17,"CRYPT","","As per `crypt(3)` requirements",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lineending"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"linewrap"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Config`.",6,{"inputs":[{"name":"characterset"},{"name":"bool"},{"name":"bool"},{"name":"linewrap"}],"output":{"name":"config"}}]],"paths":[[4,"DecodeError"],[4,"CharacterSet"],[4,"LineEnding"],[4,"LineWrap"],[4,"DisplayError"],[3,"Base64Display"],[3,"Config"]]};
searchIndex["bincode"] = {"doc":"Bincode is a crate for encoding and decoding using a tiny binary serialization strategy.  Using it, you can easily go from having an object in memory, quickly serialize it to bytes, and then deserialize it back just as fast!","items":[[3,"Config","bincode","A configuration builder whose options Bincode will use while serializing and deserializing.",null,null],[4,"ErrorKind","","The kind of error that can be produced during a serialization or deserialization.",null,null],[13,"Io","","If the error stems from the reader/writer that is being used during (de)serialization, that error will be stored and returned here.",0,null],[13,"InvalidUtf8Encoding","","Returned if the deserializer attempts to deserialize a string that is not valid utf8",0,null],[13,"InvalidBoolEncoding","","Returned if the deserializer attempts to deserialize a bool that was not encoded as either a 1 or a 0",0,null],[13,"InvalidCharEncoding","","Returned if the deserializer attempts to deserialize a char that is not in the correct format.",0,null],[13,"InvalidTagEncoding","","Returned if the deserializer attempts to deserialize the tag of an enum that is not in the expected ranges",0,null],[13,"DeserializeAnyNotSupported","","Serde has a deserialize_any method that lets the format hint to the object which route to take in deserializing.",0,null],[13,"SizeLimit","","If (de)serializing a message takes more than the provided size limit, this error is returned.",0,null],[13,"SequenceMustHaveLength","","Bincode can not encode sequences of unknown length (like iterators).",0,null],[13,"Custom","","A custom error message from Serde.",0,null],[5,"config","","Get a default configuration object.",null,{"o":{"n":"config"}}],[5,"serialize_into","","Serializes an object directly into a `Writer` using the default configuration.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes using the default configuration.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"deserialize_from","","Deserializes an object directly from a `Read`er using the default configuration.",null,{"i":[{"n":"r"}],"o":{"n":"result"}}],[5,"deserialize_from_custom","","Deserializes an object from a custom `BincodeRead`er using the default configuration. It is highly recommended to use `deserialize_from` unless you need to implement `BincodeRead` for performance reasons.",null,{"i":[{"n":"r"}],"o":{"n":"result"}}],[5,"deserialize","","Deserializes a slice of bytes into an instance of `T` using the default configuration.",null,null],[5,"serialized_size","","Returns the size that an object would be if serialized using Bincode with the default configuration.",null,{"i":[{"n":"t"}],"o":{"g":["u64"],"n":"result"}}],[11,"no_limit","","Sets the byte limit to be unlimited. This is the default.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"limit","","Sets the byte limit to `limit`.",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"self"}}],[11,"little_endian","","Sets the endianness to little-endian This is the default.",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"big_endian","","Sets the endianness to big-endian",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"native_endian","","Sets the endianness to the the machine-native endianness",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"serialize","","Serializes a serializable object into a `Vec` of bytes using this configuration",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[11,"serialized_size","","Returns the size that an object would be if serialized using Bincode with this configuration",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["u64"],"n":"result"}}],[11,"serialize_into","","Serializes an object directly into a `Writer` using this configuration",1,{"i":[{"n":"self"},{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[11,"deserialize","","Deserializes a slice of bytes into an instance of `T` using this configuration",1,null],[11,"deserialize_from","","Deserializes an object directly from a `Read`er using this configuration",1,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"result"}}],[11,"deserialize_from_custom","","Deserializes an object from a custom `BincodeRead`er using the default configuration. It is highly recommended to use `deserialize_from` unless you need to implement `BincodeRead` for performance reasons.",1,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Error","","An error that can be produced during (de)serializing.",null,null],[6,"Result","","The result of a serialization or deserialization operation.",null,null],[8,"BincodeRead","","An optional Read trait for advanced Bincode usage.",null,null],[10,"forward_read_str","","Forwards reading `length` bytes of a string on to the serde reader.",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"get_byte_buffer","","Return the first `length` bytes of the internal byte buffer.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["vec"],"n":"result"}}],[10,"forward_read_bytes","","Forwards reading `length` bytes on to the serde reader.",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"from","","",3,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"custom","","",3,{"i":[{"n":"t"}],"o":{"n":"error"}}],[11,"custom","","",3,{"i":[{"n":"t"}],"o":{"n":"self"}}]],"paths":[[4,"ErrorKind"],[3,"Config"],[8,"BincodeRead"],[6,"Error"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"] = {"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[3,"Bytes","","A reference counted contiguous slice of memory.",null,null],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",null,null],[0,"buf","","Utilities for working with buffers.",null,null],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",null,null],[3,"Iter","","Iterator over the bytes contained by the buffer.",null,null],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",null,null],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",null,null],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",null,null],[11,"from_buf","bytes","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_buf","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","bytes::buf","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"chain"}}],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,null],[11,"remaining","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",3,null],[11,"advance","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec","","",3,null],[11,"remaining_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_mut","","",3,null],[11,"advance_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_vec_mut","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"read","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"limit","","Returns the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",6,null],[11,"advance","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"FromBuf","","Conversion from a [`Buf`]",null,null],[10,"from_buf","","Creates a value from a buffer.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoBuf","","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"new","","Creates a new empty `Bytes`.",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bytesmut","bytes"],"name":"result"}}],[11,"extend_from_slice","","Appends given bytes to this object.",1,null],[11,"into_buf","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"as_ref","","",1,null],[11,"deref","","",1,null],[11,"from","","",1,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"bytes"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,null],[11,"into_iter","","",1,null],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"new","","Creates a new `BytesMut` with default capacity.",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"split_to","","Splits the buffer into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytesmut"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Clears the buffer, removing all data.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"set_len","","Sets the length of the buffer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"extend_from_slice","","Appends given bytes to this object.",2,null],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":null}],[11,"remaining_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_mut","","",2,null],[11,"put_slice","","",2,null],[11,"put_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"into_buf","","",2,null],[11,"as_ref","","",2,null],[11,"deref","","",2,null],[11,"as_mut","","",2,null],[11,"deref_mut","","",2,null],[11,"from","","",2,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"bytesmut"}}],[11,"from","","",2,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesmut"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"bytesmut"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",2,null],[11,"borrow_mut","","",2,null],[11,"write_str","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","",2,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bytesmut"}}],[11,"into_iter","","",2,null],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[8,"Buf","","Read bytes from a buffer.",null,null],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,null],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[10,"advance","bytes","Advance the internal cursor of the Buf",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",null,null],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,null],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[8,"IntoBuf","bytes","Conversion into a `Buf`",null,null],[16,"Buf","","The `Buf` type that `self` is being converted into",11,null],[10,"into_buf","","Creates a `Buf` from a value.",11,null],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"read_u16","","",13,null],[11,"read_u32","","",13,null],[11,"read_u64","","",13,null],[11,"read_uint","","",13,null],[11,"write_u16","","",13,null],[11,"write_u32","","",13,null],[11,"write_u64","","",13,null],[11,"write_uint","","",13,null],[11,"read_u16_into","","",13,null],[11,"read_u32_into","","",13,null],[11,"read_u64_into","","",13,null],[11,"write_u16_into","","",13,null],[11,"write_u32_into","","",13,null],[11,"write_u64_into","","",13,null],[11,"from_slice_u16","","",13,null],[11,"from_slice_u32","","",13,null],[11,"from_slice_u64","","",13,null],[11,"from_slice_f32","","",13,null],[11,"from_slice_f64","","",13,null],[11,"read_u16","","",12,null],[11,"read_u32","","",12,null],[11,"read_u64","","",12,null],[11,"read_uint","","",12,null],[11,"write_u16","","",12,null],[11,"write_u32","","",12,null],[11,"write_u64","","",12,null],[11,"write_uint","","",12,null],[11,"read_u16_into","","",12,null],[11,"read_u32_into","","",12,null],[11,"read_u64_into","","",12,null],[11,"write_u16_into","","",12,null],[11,"write_u32_into","","",12,null],[11,"write_u64_into","","",12,null],[11,"from_slice_u16","","",12,null],[11,"from_slice_u32","","",12,null],[11,"from_slice_u64","","",12,null],[11,"from_slice_f32","","",12,null],[11,"from_slice_f64","","",12,null],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"bigendian"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"littleendian"}}],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,null],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,null],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i64"}}],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"chain"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,null],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,null],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":null}],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":null}],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"LittleEndian"],[4,"BigEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formatted error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should not be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,null],[13,"HideEnvValues","","Hides ENV values in the help message",1,null],[13,"HiddenShortHelp","","The argument should not be shown in short help text",1,null],[13,"HiddenLongHelp","","The argument should not be shown in long help text",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcommands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[13,"Elvish","","Generates a completion file for Elvish",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"inputs":[{"name":"self"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"arg"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["str"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["osstr"],"name":"option"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden_short_help","","Hides an argument from short help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden_long_help","","Hides an argument from long help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["cow"],"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["values"],"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["vec"],"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osvalues"],"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["usize"],"name":"option"}}],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["indices"],"name":"option"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["argmatches"],"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Short hand for [`Result`] type",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["combine"] = {"doc":"This crate contains parser combinators, roughly based on the Haskell libraries parsec and attoparsec.","items":[[5,"any","combine","Parses any token.",null,{"o":{"n":"any"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`. Returns the value of `parser`.",null,{"i":[{"n":"l"},{"n":"r"},{"n":"p"}],"o":{"n":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`. The value returned is the one produced by the left associative application of the function returned by the parser `op`.",null,{"i":[{"n":"p"},{"n":"op"}],"o":{"n":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`. The value returned is the one produced by the right associative application of the function returned by `op`.",null,{"i":[{"n":"p"},{"n":"op"}],"o":{"n":"chainr1"}}],[5,"count","","Parses `parser` from zero up to `count` times.",null,{"i":[{"n":"usize"},{"n":"p"}],"o":{"n":"count"}}],[5,"count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`).",null,{"i":[{"n":"usize"},{"n":"usize"},{"n":"p"}],"o":{"n":"countminmax"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to do the parsing. This is commonly useful to allow multiple parsers to share some environment while still allowing the parsers to be written in separate functions.",null,null],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"o":{"n":"eof"}}],[5,"look_ahead","","`look_ahead(p)` acts as `p` but doesn't consume input on success.",null,{"i":[{"n":"p"}],"o":{"n":"lookahead"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.",null,{"i":[{"n":"p"}],"o":{"n":"many"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.",null,{"i":[{"n":"p"}],"o":{"n":"many1"}}],[5,"none_of","","Extract one token and succeeds if it is not part of `tokens`.",null,{"i":[{"n":"t"}],"o":{"n":"noneof"}}],[5,"not_followed_by","","Succeeds only if `parser` fails. Never consumes any input.",null,{"i":[{"n":"p"}],"o":{"n":"notfollowedby"}}],[5,"one_of","","Extract one token and succeeds if it is part of `tokens`.",null,{"i":[{"n":"t"}],"o":{"n":"oneof"}}],[5,"optional","","Parses `parser` and outputs `Some(value)` if it succeeds, `None` if it fails without consuming any input. Fails if `parser` fails after having consumed some input.",null,{"i":[{"n":"p"}],"o":{"n":"optional"}}],[5,"parser","","Wraps a function, turning it into a parser.",null,{"i":[{"n":"f"}],"o":{"n":"fnparser"}}],[5,"position","","Parser which just returns the current position in the stream.",null,{"o":{"n":"position"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`.",null,{"i":[{"n":"p"}],"o":{"n":"satisfy"}}],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds and returns the value inside the `Option`. If `predicate` returns `None` the parser fails without consuming any input.",null,{"i":[{"n":"p"}],"o":{"n":"satisfymap"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sepby"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sepby1"}}],[5,"sep_end_by","","Parses `parser` zero or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sependby"}}],[5,"sep_end_by1","","Parses `parser` one or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sependby1"}}],[5,"skip_count","","Parses `parser` from zero up to `count` times skipping the output of `parser`.",null,{"i":[{"n":"usize"},{"n":"p"}],"o":{"n":"skipcount"}}],[5,"skip_count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`) skipping the output of `parser`.",null,{"i":[{"n":"usize"},{"n":"usize"},{"n":"p"}],"o":{"n":"skipcountminmax"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result.",null,{"i":[{"n":"p"}],"o":{"n":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result.",null,{"i":[{"n":"p"}],"o":{"n":"skipmany1"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`.",null,null],[5,"tokens","","Parses multiple tokens.",null,{"i":[{"n":"c"},{"n":"info"},{"n":"t"}],"o":{"n":"tokens"}}],[5,"try","","`try(p)` behaves as `p` except it acts as if the parser hadn't consumed any input if `p` fails after consuming input.",null,{"i":[{"n":"p"}],"o":{"n":"try"}}],[5,"unexpected","","Always fails with `message` as an unexpected error. Never consumes any input.",null,{"i":[{"n":"s"}],"o":{"n":"unexpected"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"i":[{"n":"t"}],"o":{"n":"value"}}],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",null,{"i":[{"n":"p"}],"o":{"n":"choice"}}],[0,"easy","","Stream wrapper which provides an informative and easy to use error type.",null,null],[3,"Errors","combine::easy","Struct which hold information about an error that occurred at a specific position. Can hold multiple instances of `Error` if more that one error occurred in the same position.",null,null],[12,"position","","The position where the error occurred",0,null],[12,"errors","","A vector containing specific information on what errors occurred at `position`. Usually a fully formed message contains one `Unexpected` error and one or more `Expected` errors. `Message` and `Other` may also appear (`combine` never generates these errors on its own) and may warrant custom handling.",0,null],[3,"Stream","","",null,null],[12,"0","","",1,null],[4,"Info","","Enum holding error information. Variants are defined for `Stream::Item` and `Stream::Range` as well as string variants holding easy descriptions.",null,null],[13,"Token","","",2,null],[13,"Range","","",2,null],[13,"Owned","","",2,null],[13,"Borrowed","","",2,null],[4,"Error","","Enum used to store information about an error that has occurred during parsing.",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",3,null],[13,"Expected","","Error indicating that the parser expected something else",3,null],[13,"Message","","Generic message",3,null],[13,"Other","","Variant for containing other types of errors",3,null],[6,"ParseError","","Convenience alias over `Errors` for `StreamOnce` types which makes it possible to specify the `Errors` type from a `StreamOnce` by writing `ParseError<I>` instead of `Errors<I::Item, I::Range, I::Position>`",null,null],[0,"error","combine","Error types and traits which define what kind of errors combine parsers may emit",null,null],[3,"Tracked","combine::error","Error wrapper which lets parsers track which parser in a sequence of sub-parsers has emitted the error. `Tracked::from` can be used to construct this and it should otherwise be ignored outside of combine.",null,null],[12,"error","","The error returned",4,null],[4,"Info","","",null,null],[13,"Token","","",5,null],[13,"Range","","",5,null],[13,"Borrowed","","",5,null],[4,"Consumed","","Enum used to indicate if a parser consumed any items of the stream it was given as an input.",null,null],[13,"Consumed","","Constructor indicating that the parser has consumed elements",6,null],[13,"Empty","","Constructor indicating that the parser did not consume any elements",6,null],[4,"UnexpectedParse","","",null,null],[13,"Eoi","","",7,null],[13,"Unexpected","","",7,null],[4,"StringStreamError","","",null,null],[13,"UnexpectedParse","","",8,null],[13,"Eoi","","",8,null],[13,"CharacterBoundary","","",8,null],[4,"FastResult","","",null,null],[13,"ConsumedOk","","",9,null],[13,"EmptyOk","","",9,null],[13,"ConsumedErr","","",9,null],[13,"EmptyErr","","",9,null],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate whether they were successful or not. `O` is the type that is output on success. `I` is the specific stream type used in the parser.",null,null],[6,"ParseResult2","","",null,null],[6,"ConsumedResult","","A `Result` type which has the consumed status flattened into the result. Conversions to and from `std::result::Result` can be done using `result.into()` or `From::from(result)`",null,null],[8,"StreamError","","`StreamError` represents a single error returned from a `Stream` or a `Parser`.",null,null],[10,"unexpected_token","","",10,{"i":[{"n":"item"}],"o":{"n":"self"}}],[10,"unexpected_range","","",10,{"i":[{"n":"range"}],"o":{"n":"self"}}],[10,"unexpected_message","","",10,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"unexpected","","",10,{"i":[{"n":"info"}],"o":{"n":"self"}}],[11,"unexpected_static_message","","",10,{"i":[{"n":"str"}],"o":{"n":"self"}}],[10,"expected_token","","",10,{"i":[{"n":"item"}],"o":{"n":"self"}}],[10,"expected_range","","",10,{"i":[{"n":"range"}],"o":{"n":"self"}}],[10,"expected_message","","",10,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"expected","","",10,{"i":[{"n":"info"}],"o":{"n":"self"}}],[11,"expected_static_message","","",10,{"i":[{"n":"str"}],"o":{"n":"self"}}],[10,"message_token","","",10,{"i":[{"n":"item"}],"o":{"n":"self"}}],[10,"message_range","","",10,{"i":[{"n":"range"}],"o":{"n":"self"}}],[10,"message_message","","",10,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"message_static_message","","",10,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"message","","",10,{"i":[{"n":"info"}],"o":{"n":"self"}}],[11,"other","","",10,{"i":[{"n":"e"}],"o":{"n":"self"}}],[11,"end_of_input","","",10,{"o":{"n":"self"}}],[10,"into_other","","Converts `self` into a different `StreamError` type.",10,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"ParseError","","Trait which defines a combine parse error.",null,null],[16,"StreamError","","",11,null],[10,"empty","","Constructs an empty error.",11,{"i":[{"n":"position"}],"o":{"n":"self"}}],[10,"from_error","","Creates a `ParseError` from a single `Self::StreamError`",11,null],[10,"set_position","","Sets the position of this `ParseError`",11,{"i":[{"n":"self"},{"n":"position"}]}],[11,"merge","","Merges two errors. If they exist at the same position the errors of `other` are added to `self` (using the semantics of `add`). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"add","","Adds a `StreamError` to `self`.",11,null],[11,"add_expected","","",11,{"i":[{"n":"self"},{"n":"info"}]}],[11,"add_unexpected","","",11,{"i":[{"n":"self"},{"n":"info"}]}],[11,"add_message","","",11,{"i":[{"n":"self"},{"n":"info"}]}],[10,"set_expected","","Sets `info` as the only `Expected` error of `self`",11,null],[10,"is_unexpected_end_of_input","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"into_other","","Does a best-effort conversion of `self` into another `ParseError`",11,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",5,{"i":[{"n":"char"}],"o":{"g":["char"],"n":"info"}}],[11,"from","","",5,{"i":[{"n":"str"}],"o":{"n":"info"}}],[11,"from","","",5,{"i":[{"n":"u8"}],"o":{"g":["u8"],"n":"info"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"consumed"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"consumed"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"consumed"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_mut","","",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"as_ref","","",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"is_empty","","Returns true if `self` is empty.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_inner","","Extracts the contained value.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_consumed","","Converts `self` into the `Consumed` state.",6,{"i":[{"n":"self"}],"o":{"n":"consumed"}}],[11,"into_empty","","Converts `self` into the `Empty` state.",6,{"i":[{"n":"self"}],"o":{"n":"consumed"}}],[11,"map","","Maps over the contained value without changing the consumed state.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"consumed"}}],[11,"merge","","",6,{"i":[{"n":"self"},{"n":"consumed"}],"o":{"n":"consumed"}}],[11,"combine","","Combines the `Consumed` flags from `self` and the result of `f`.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"parseresult2"}}],[11,"combine_consumed","","",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"fastresult"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"unexpectedparse"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"unexpectedparse"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unexpected_token","","",7,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"unexpected_range","","",7,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"unexpected_message","","",7,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"expected_token","","",7,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"expected_range","","",7,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"expected_message","","",7,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"message_message","","",7,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"message_token","","",7,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"message_range","","",7,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"end_of_input","","",7,{"o":{"n":"self"}}],[11,"into_other","","",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"empty","","",7,{"i":[{"n":"position"}],"o":{"n":"self"}}],[11,"from_error","","",7,null],[11,"set_position","","",7,{"i":[{"n":"self"},{"n":"position"}]}],[11,"add","","",7,null],[11,"set_expected","","",7,null],[11,"is_unexpected_end_of_input","","",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_other","","",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"stringstreamerror"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"stringstreamerror"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unexpected_token","","",8,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"unexpected_range","","",8,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"unexpected_message","","",8,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"expected_token","","",8,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"expected_range","","",8,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"expected_message","","",8,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"message_message","","",8,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"message_token","","",8,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"message_range","","",8,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"message_static_message","","",8,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"end_of_input","","",8,{"o":{"n":"self"}}],[11,"into_other","","",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"empty","","",8,{"i":[{"n":"position"}],"o":{"n":"self"}}],[11,"from_error","","",8,null],[11,"set_position","","",8,{"i":[{"n":"self"},{"n":"position"}]}],[11,"add","","",8,null],[11,"set_expected","","",8,null],[11,"is_unexpected_end_of_input","","",8,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_other","","",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"tracked"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"tracked"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"tracked"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"e"}],"o":{"n":"self"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"fastresult"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"fastresult"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"fastresult"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_ok","","",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ref","","",9,{"i":[{"n":"self"}],"o":{"n":"fastresult"}}],[11,"and_then","","",9,null],[11,"map_err","","",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"fastresult"}}],[11,"map","","",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"fastresult"}}],[11,"into","","",9,{"i":[{"n":"self"}],"o":{"g":["consumed","consumed"],"n":"result"}}],[11,"into","","",9,{"i":[{"n":"self"}],"o":{"n":"parseresult2"}}],[11,"from","","",9,{"i":[{"n":"parseresult2"}],"o":{"n":"fastresult"}}],[0,"stream","combine","Traits and implementations of arbitrary data streams.",null,null],[3,"PartialStream","combine::stream","Stream type which indicates that the stream is partial if end of input is reached",null,null],[12,"0","","",12,null],[3,"SliceStream","","Newtype for constructing a stream from a slice where the items in the slice are not copyable.",null,null],[12,"0","","",13,null],[3,"IteratorStream","","Wrapper around iterators which allows them to be treated as a stream. Returned by [`from_iter`].",null,null],[3,"ReadStream","","",null,null],[3,"PointerOffset","","Newtype around a pointer offset into a slice stream (`&[T]`/`&str`).",null,null],[12,"0","","",14,null],[5,"uncons","","",null,{"i":[{"n":"i"}],"o":{"n":"consumedresult"}}],[5,"uncons_range","","",null,{"i":[{"n":"i"},{"n":"usize"}],"o":{"n":"consumedresult"}}],[5,"uncons_while","","Removes items from the input while `predicate` returns `true`.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"consumedresult"}}],[5,"uncons_while1","","Takes items from stream, testing each one with `predicate` returns a range of at least one items which passed `predicate`.",null,{"i":[{"n":"i"},{"n":"f"}],"o":{"n":"consumedresult"}}],[5,"decode","","Decodes `input` using `parser`.",null,null],[0,"buffered","","",null,null],[3,"BufferedStream","combine::stream::buffered","`Stream` which buffers items from an instance of `StreamOnce` into a ring buffer. Instances of `StreamOnce` which is not able to implement `Resetable` (such as `ReadStream`) may use this as a way to implement `Resetable` and become a full `Stream` instance.",null,null],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"bufferedstream"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"bufferedstream"}],"o":{"n":"bool"}}],[11,"checkpoint","","",15,null],[11,"reset","","",15,null],[11,"new","","Constructs a new `BufferedStream` from a `StreamOnce` instance with a `lookahead` number of elements that can be stored in the buffer.",15,{"i":[{"n":"i"},{"n":"usize"}],"o":{"n":"bufferedstream"}}],[11,"position","","",15,null],[11,"uncons","","",15,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[0,"easy","combine::stream","Stream wrapper which provides an informative and easy to use error type.",null,null],[3,"Errors","combine::stream::easy","Struct which hold information about an error that occurred at a specific position. Can hold multiple instances of `Error` if more that one error occurred in the same position.",null,null],[12,"position","","The position where the error occurred",0,null],[12,"errors","","A vector containing specific information on what errors occurred at `position`. Usually a fully formed message contains one `Unexpected` error and one or more `Expected` errors. `Message` and `Other` may also appear (`combine` never generates these errors on its own) and may warrant custom handling.",0,null],[3,"Stream","","",null,null],[12,"0","","",1,null],[4,"Info","","Enum holding error information. Variants are defined for `Stream::Item` and `Stream::Range` as well as string variants holding easy descriptions.",null,null],[13,"Token","","",2,null],[13,"Range","","",2,null],[13,"Owned","","",2,null],[13,"Borrowed","","",2,null],[4,"Error","","Enum used to store information about an error that has occurred during parsing.",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",3,null],[13,"Expected","","Error indicating that the parser expected something else",3,null],[13,"Message","","Generic message",3,null],[13,"Other","","Variant for containing other types of errors",3,null],[6,"ParseError","","Convenience alias over `Errors` for `StreamOnce` types which makes it possible to specify the `Errors` type from a `StreamOnce` by writing `ParseError<I>` instead of `Errors<I::Item, I::Range, I::Position>`",null,null],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"info"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"primitiveinfo"}],"o":{"n":"self"}}],[11,"map_token","","",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"info"}}],[11,"map_range","","",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"info"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"info"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"char"}],"o":{"g":["char"],"n":"info"}}],[11,"from","","",2,{"i":[{"n":"string"}],"o":{"n":"info"}}],[11,"from","","",2,{"i":[{"n":"str"}],"o":{"n":"info"}}],[11,"from","","",2,{"i":[{"n":"u8"}],"o":{"g":["u8"],"n":"info"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"unexpected_token","","",3,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"unexpected_range","","",3,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"unexpected_message","","",3,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"unexpected_static_message","","",3,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"expected_token","","",3,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"expected_range","","",3,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"expected_message","","",3,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"expected_static_message","","",3,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"message_message","","",3,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"message_static_message","","",3,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"message_token","","",3,{"i":[{"n":"item"}],"o":{"n":"self"}}],[11,"message_range","","",3,{"i":[{"n":"range"}],"o":{"n":"self"}}],[11,"other","","",3,{"i":[{"n":"e"}],"o":{"n":"self"}}],[11,"into_other","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"empty","","",3,{"i":[{"n":"position"}],"o":{"n":"self"}}],[11,"from_error","","",3,null],[11,"set_position","","",3,{"i":[{"n":"self"},{"n":"position"}]}],[11,"add","","",3,null],[11,"set_expected","","",3,null],[11,"is_unexpected_end_of_input","","",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_other","","",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"empty","","",0,{"i":[{"n":"position"}],"o":{"n":"self"}}],[11,"from_error","","",0,null],[11,"set_position","","",0,{"i":[{"n":"self"},{"n":"position"}]}],[11,"merge","","",0,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[11,"add","","",0,null],[11,"set_expected","","",0,null],[11,"is_unexpected_end_of_input","","",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_other","","",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"map_token","","",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"map_range","","",3,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"error"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"from","","",3,{"i":[{"n":"e"}],"o":{"n":"error"}}],[11,"end_of_input","","Returns the `end_of_input` error.",3,{"o":{"n":"error"}}],[11,"fmt_errors","","Formats a slice of errors in a human readable way.",3,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"errors"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"errors"}],"o":{"n":"bool"}}],[11,"new","","Constructs a new `ParseError` which occurred at `position`.",0,{"i":[{"n":"p"},{"n":"error"}],"o":{"n":"errors"}}],[11,"empty","","Constructs an error with no other information than the position it occurred at.",0,{"i":[{"n":"p"}],"o":{"n":"errors"}}],[11,"from_errors","","Constructs a `ParseError` with multiple causes.",0,{"i":[{"n":"p"},{"g":["error"],"n":"vec"}],"o":{"n":"errors"}}],[11,"end_of_input","","Constructs an end of input error. Should be returned by parsers which encounter end of input unexpectedly.",0,{"i":[{"n":"p"}],"o":{"n":"errors"}}],[11,"add_error","","Adds an error if `error` does not exist in this `ParseError` already (as determined byte `PartialEq`).",0,{"i":[{"n":"self"},{"n":"error"}]}],[11,"set_expected","","Removes all `Expected` errors in `self` and adds `info` instead.",0,{"i":[{"n":"self"},{"n":"info"}]}],[11,"merge","","Merges two `ParseError`s. If they exist at the same position the errors of `other` are added to `self` (using `add_error` to skip duplicates). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",0,{"i":[{"n":"self"},{"n":"errors"}],"o":{"n":"errors"}}],[11,"map_position","","Maps the position to a new value",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"errors"}}],[11,"map_token","","Maps all token variants to a new value",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"errors"}}],[11,"map_range","","Maps all range variants to a new value.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"errors"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"stream"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"checkpoint","","",1,null],[11,"reset","","",1,null],[11,"uncons","","",1,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"is_partial","","",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"uncons_range","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while","","",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while1","","",1,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"fastresult"}}],[11,"distance","","",1,null],[11,"position","","",1,null],[11,"range","","",1,null],[0,"state","combine::stream","Stateful stream wrappers.",null,null],[3,"State","combine::stream::state","The `State<I>` struct maintains the current position in the stream `I` using the `Positioner` trait to track the position.",null,null],[12,"input","","The input stream used when items are requested",16,null],[12,"positioner","","The positioner used to update the current position",16,null],[3,"IndexPositioner","","The `IndexPositioner<Item, Range>` struct maintains the current index into the stream `I`.  The initial index is index 0.  Each `Item` consumed increments the index by 1; each `range` consumed increments the position by `range.len()`.",null,null],[3,"SourcePosition","","Struct which represents a position in a source file.",null,null],[12,"line","","Current line of the input",17,null],[12,"column","","Current column of the input",17,null],[8,"Positioner","","Trait for tracking the current position of a `Stream`.",null,null],[16,"Position","","The type which keeps track of the position",18,null],[10,"position","","Returns the current position",18,null],[10,"update","","Updates the position given that `item` has been taken from the stream",18,{"i":[{"n":"self"},{"n":"item"}]}],[8,"RangePositioner","","Trait for tracking the current position of a `RangeStream`.",null,null],[10,"update_range","","Updates the position given that `range` has been taken from the stream",19,{"i":[{"n":"self"},{"n":"range"}]}],[8,"DefaultPositioned","","Defines a default `Positioner` type for a particular `Stream` type.",null,null],[16,"Positioner","","",20,null],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"state"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"state"}],"o":{"n":"bool"}}],[11,"with_positioner","","Creates a new `State<I, X>` from an input stream and a positioner.",16,{"i":[{"n":"i"},{"n":"x"}],"o":{"n":"state"}}],[11,"new","","Creates a new `State<I, X>` from an input stream and its default positioner.",16,{"i":[{"n":"i"}],"o":{"n":"state"}}],[11,"position","","",16,null],[11,"uncons","","",16,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"indexpositioner"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",21,{"o":{"n":"indexpositioner"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"indexpositioner"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"indexpositioner"}],"o":{"n":"bool"}}],[11,"checkpoint","","",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reset","","",21,{"i":[{"n":"self"},{"n":"self"}]}],[11,"position","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"update","","",21,{"i":[{"n":"self"},{"n":"item"}]}],[11,"new","","",21,{"o":{"n":"indexpositioner"}}],[11,"new_with_position","","",21,{"i":[{"n":"usize"}],"o":{"n":"indexpositioner"}}],[11,"update_range","","",21,{"i":[{"n":"self"},{"n":"range"}]}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"sourceposition"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"n":"bool"}}],[11,"cmp","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"n":"bool"}}],[11,"le","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"n":"bool"}}],[11,"gt","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"n":"bool"}}],[11,"ge","","",17,{"i":[{"n":"self"},{"n":"sourceposition"}],"o":{"n":"bool"}}],[11,"checkpoint","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reset","","",17,{"i":[{"n":"self"},{"n":"self"}]}],[11,"default","","",17,{"o":{"n":"self"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","",17,{"o":{"n":"self"}}],[11,"position","","",17,{"i":[{"n":"self"}],"o":{"n":"sourceposition"}}],[11,"update","","",17,{"i":[{"n":"self"},{"n":"char"}]}],[11,"update_range","","",17,{"i":[{"n":"self"},{"n":"str"}]}],[11,"uncons_range","","",16,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while","","",16,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while1","","",16,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"fastresult"}}],[11,"distance","","",16,null],[11,"checkpoint","","",16,null],[11,"reset","","",16,null],[11,"range","","",16,null],[6,"StreamErrorFor","combine::stream","Convenience alias over the `StreamError` for the input stream `I`",null,null],[8,"Positioned","","A type which has a position.",null,null],[10,"position","","Returns the current position of the stream.",22,null],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",null,null],[16,"Item","","The type of items which is yielded from this stream.",23,null],[16,"Range","","The type of a range of items yielded from this stream. Types which do not a have a way of yielding ranges of items should just use the `Self::Item` for this type.",23,null],[16,"Position","","Type which represents the position in a stream. `Ord` is required to allow parsers to determine which of two positions are further ahead.",23,null],[16,"Error","","",23,null],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements. Returns `Err` if no element could be retrieved.",23,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"is_partial","","Returns `true` if this stream only contains partial input.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Resetable","","",null,null],[16,"Checkpoint","","",24,null],[10,"checkpoint","","",24,null],[10,"reset","","",24,null],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[8,"RangeStreamOnce","","A `RangeStream` is an extension of `StreamOnce` which allows for zero copy parsing.",null,null],[10,"uncons_range","","Takes `size` elements from the stream. Fails if the length of the stream is less than `size`.",25,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[10,"uncons_while","","Takes items from stream, testing each one with `predicate`. returns the range of items which passed `predicate`.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while1","","Takes items from stream, testing each one with `predicate` returns a range of at least one items which passed `predicate`.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"fastresult"}}],[10,"distance","","Returns the distance between `self` and `end`. The returned `usize` must be so that",25,null],[8,"RangeStream","","A `RangeStream` is an extension of `Stream` which allows for zero copy parsing.",null,null],[8,"FullRangeStream","","A `RangeStream` which is capable of providing it's entire range.",null,null],[10,"range","","Returns the entire range of `self`",26,null],[8,"Range","","Trait representing a range of elements.",null,null],[10,"len","","Returns the remaining length of `self`. The returned length need not be the same as the number of items left in the stream.",27,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the range does not contain any elements (`Range::len() == 0`)",27,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"checkpoint","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reset","","",13,{"i":[{"n":"self"},{"n":"self"}]}],[11,"checkpoint","","",28,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"reset","","",28,{"i":[{"n":"self"},{"n":"self"}]}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"partialstream"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"n":"bool"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"partialstream"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"position","","",12,null],[11,"checkpoint","","",12,null],[11,"reset","","",12,null],[11,"uncons","","",12,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"is_partial","","",12,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"uncons_range","","",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while","","",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while1","","",12,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"fastresult"}}],[11,"distance","","",12,null],[11,"range","","",12,null],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"n":"bool"}}],[11,"cmp","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"n":"bool"}}],[11,"le","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"n":"bool"}}],[11,"gt","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"n":"bool"}}],[11,"ge","","",13,{"i":[{"n":"self"},{"n":"slicestream"}],"o":{"n":"bool"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"slicestream"}}],[11,"position","","",13,null],[11,"uncons","","",13,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_range","","",13,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while1","","",13,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"fastresult"}}],[11,"distance","","",13,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"usize"}}],[11,"range","","",13,null],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"iteratorstream"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Converts an `Iterator` into a stream.",28,{"i":[{"n":"t"}],"o":{"n":"iteratorstream"}}],[11,"next","","",28,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"uncons","","",28,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons","","",29,{"i":[{"n":"self"}],"o":{"g":["u8","streamerrorfor"],"n":"result"}}],[11,"new","","Creates a `StreamOnce` instance from a value implementing `std::io::Read`.",29,{"i":[{"n":"r"}],"o":{"n":"readstream"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"pointeroffset"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",14,{"o":{"n":"pointeroffset"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"n":"bool"}}],[11,"cmp","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"n":"bool"}}],[11,"le","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"n":"bool"}}],[11,"gt","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"n":"bool"}}],[11,"ge","","",14,{"i":[{"n":"self"},{"n":"pointeroffset"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"translate_position","","Converts the pointer-based position into an indexed position.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"usize"}}],[0,"parser","combine","A collection of both concrete parsers as well as parser combinators.",null,null],[0,"byte","combine::parser","Module containing parsers specialized on byte streams.",null,null],[3,"Digit","combine::parser::byte","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"Newline","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"OctDigit","","",null,null],[3,"HexDigit","","",null,null],[3,"Bytes","","",null,null],[3,"BytesCmp","","",null,null],[3,"TakeUntilByte","","",null,null],[3,"TakeUntilByte2","","",null,null],[3,"TakeUntilByte3","","",null,null],[5,"byte","","Parses a byteacter and succeeds if the byteacter is equal to `c`.",null,{"i":[{"n":"u8"}],"o":{"n":"token"}}],[5,"digit","","Parses a base-10 digit (0–9).",null,{"o":{"n":"digit"}}],[5,"space","","Parses a `b' '`, `b'\\t'`, `b'\\n'` or `'b\\'r'`.",null,{"o":{"n":"space"}}],[5,"spaces","","Skips over [`space`] zero or more times",null,{"o":{"n":"spaces"}}],[5,"newline","","Parses a newline byteacter (`b'\\n'`).",null,{"o":{"n":"newline"}}],[5,"crlf","","Parses carriage return and newline (`&b\"\\r\\n\"`), returning the newline byteacter.",null,{"o":{"n":"crlf"}}],[5,"tab","","Parses a tab byteacter (`b'\\t'`).",null,{"o":{"n":"tab"}}],[5,"upper","","Parses an uppercase ASCII letter (A–Z).",null,{"o":{"n":"upper"}}],[5,"lower","","Parses an lowercase ASCII letter (a–z).",null,{"o":{"n":"lower"}}],[5,"alpha_num","","Parses either an ASCII alphabet letter or digit (a–z, A–Z, 0–9).",null,{"o":{"n":"alphanum"}}],[5,"letter","","Parses an ASCII alphabet letter (a–z, A–Z).",null,{"o":{"n":"letter"}}],[5,"oct_digit","","Parses an octal digit.",null,{"o":{"n":"octdigit"}}],[5,"hex_digit","","Parses an ASCII hexdecimal digit (accepts both uppercase and lowercase).",null,{"o":{"n":"hexdigit"}}],[5,"bytes","","Parses the bytes `s`.",null,null],[5,"bytes_cmp","","Parses the bytes `s` using `cmp` to compare each token.",null,null],[5,"take_until_byte","","Zero-copy parser which reads a range of 0 or more tokens until `a` is found.",null,{"i":[{"n":"u8"}],"o":{"n":"takeuntilbyte"}}],[5,"take_until_byte2","","Zero-copy parser which reads a range of 0 or more tokens until `a` or `b` is found.",null,{"i":[{"n":"u8"},{"n":"u8"}],"o":{"n":"takeuntilbyte2"}}],[5,"take_until_byte3","","Zero-copy parser which reads a range of 0 or more tokens until `a`, 'b' or `c` is found.",null,{"i":[{"n":"u8"},{"n":"u8"},{"n":"u8"}],"o":{"n":"takeuntilbyte3"}}],[0,"num","","Parsers for decoding numbers in big-endian or little-endian order.",null,null],[3,"U16","combine::parser::byte::num","",null,null],[3,"U32","","",null,null],[3,"U64","","",null,null],[3,"I16","","",null,null],[3,"I32","","",null,null],[3,"I64","","",null,null],[3,"F32","","",null,null],[3,"F64","","",null,null],[5,"u16","","Reads a u16 out of the byte stream with the specified endianess",null,{"o":{"n":"u16"}}],[5,"be_u16","","Reads a u16 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"u16"}}],[5,"le_u16","","Reads a u16 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"u16"}}],[5,"u32","","Reads a u32 out of the byte stream with the specified endianess",null,{"o":{"n":"u32"}}],[5,"be_u32","","Reads a u32 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"u32"}}],[5,"le_u32","","Reads a u32 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"u32"}}],[5,"u64","","Reads a u64 out of the byte stream with the specified endianess",null,{"o":{"n":"u64"}}],[5,"be_u64","","Reads a u64 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"u64"}}],[5,"le_u64","","Reads a u64 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"u64"}}],[5,"i16","","Reads a i16 out of the byte stream with the specified endianess",null,{"o":{"n":"i16"}}],[5,"be_i16","","Reads a i16 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"i16"}}],[5,"le_i16","","Reads a i16 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"i16"}}],[5,"i32","","Reads a i32 out of the byte stream with the specified endianess",null,{"o":{"n":"i32"}}],[5,"be_i32","","Reads a i32 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"i32"}}],[5,"le_i32","","Reads a i32 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"i32"}}],[5,"i64","","Reads a i64 out of the byte stream with the specified endianess",null,{"o":{"n":"i64"}}],[5,"be_i64","","Reads a i64 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"i64"}}],[5,"le_i64","","Reads a i64 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"i64"}}],[5,"f32","","Reads a i32 out of the byte stream with the specified endianess",null,{"o":{"n":"f32"}}],[5,"be_f32","","Reads a i32 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"f32"}}],[5,"le_f32","","Reads a i32 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"f32"}}],[5,"f64","","Reads a i64 out of the byte stream with the specified endianess",null,{"o":{"n":"f64"}}],[5,"be_f64","","Reads a i64 out of the byte stream with the specified endianess",null,{"o":{"g":["be"],"n":"f64"}}],[5,"le_f64","","Reads a i64 out of the byte stream with the specified endianess",null,{"o":{"g":["le"],"n":"f64"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"parse_lazy","","",30,null],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"parse_lazy","","",31,null],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"parse_lazy","","",32,null],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"i16"}}],[11,"parse_lazy","","",33,null],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"parse_lazy","","",34,null],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"i64"}}],[11,"parse_lazy","","",35,null],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"f32"}}],[11,"parse_lazy","","",36,null],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"parse_lazy","","",37,null],[11,"clone","combine::parser::byte","",38,{"i":[{"n":"self"}],"o":{"n":"digit"}}],[11,"parse_lazy","","",38,null],[11,"parse_partial","","",38,null],[11,"add_error","","",38,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"space"}}],[11,"parse_lazy","","",39,null],[11,"parse_partial","","",39,null],[11,"add_error","","",39,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"spaces"}}],[11,"parse_lazy","","",40,null],[11,"parse_partial","","",40,null],[11,"add_error","","",40,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"newline"}}],[11,"parse_lazy","","",41,null],[11,"parse_partial","","",41,null],[11,"add_error","","",41,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"crlf"}}],[11,"parse_lazy","","",42,null],[11,"parse_partial","","",42,null],[11,"add_error","","",42,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"tab"}}],[11,"parse_lazy","","",43,null],[11,"parse_partial","","",43,null],[11,"add_error","","",43,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"upper"}}],[11,"parse_lazy","","",44,null],[11,"parse_partial","","",44,null],[11,"add_error","","",44,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"lower"}}],[11,"parse_lazy","","",45,null],[11,"parse_partial","","",45,null],[11,"add_error","","",45,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"alphanum"}}],[11,"parse_lazy","","",46,null],[11,"parse_partial","","",46,null],[11,"add_error","","",46,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"letter"}}],[11,"parse_lazy","","",47,null],[11,"parse_partial","","",47,null],[11,"add_error","","",47,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"octdigit"}}],[11,"parse_lazy","","",48,null],[11,"parse_partial","","",48,null],[11,"add_error","","",48,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"hexdigit"}}],[11,"parse_lazy","","",49,null],[11,"parse_partial","","",49,null],[11,"add_error","","",49,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"parse_lazy","","",50,null],[11,"add_error","","",50,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"bytescmp"}}],[11,"parse_lazy","","",51,null],[11,"add_error","","",51,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"parse_partial","","",52,null],[11,"parse_first","","",52,null],[11,"parse_mode","","",52,null],[11,"parse_partial","","",53,null],[11,"parse_first","","",53,null],[11,"parse_mode","","",53,null],[11,"parse_partial","","",54,null],[11,"parse_first","","",54,null],[11,"parse_mode","","",54,null],[0,"char","combine::parser","Module containing parsers specialized on character streams.",null,null],[3,"Digit","combine::parser::char","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"Newline","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"OctDigit","","",null,null],[3,"HexDigit","","",null,null],[3,"Str","","",null,null],[3,"StrCmp","","",null,null],[5,"char","","Parses a character and succeeds if the character is equal to `c`.",null,{"i":[{"n":"char"}],"o":{"n":"token"}}],[5,"digit","","Parses a base-10 digit.",null,{"o":{"n":"digit"}}],[5,"space","","Parse a single whitespace according to [`std::char::is_whitespace`].",null,{"o":{"n":"space"}}],[5,"spaces","","Skips over zero or more spaces according to [`std::char::is_whitespace`].",null,{"o":{"n":"spaces"}}],[5,"newline","","Parses a newline character (`'\\n'`).",null,{"o":{"n":"newline"}}],[5,"crlf","","Parses carriage return and newline (`\"\\r\\n\"`), returning the newline character.",null,{"o":{"n":"crlf"}}],[5,"tab","","Parses a tab character (`'\\t'`).",null,{"o":{"n":"tab"}}],[5,"upper","","Parses an uppercase letter according to [`std::char::is_uppercase`].",null,{"o":{"n":"upper"}}],[5,"lower","","Parses an lowercase letter according to [`std::char::is_lowercase`].",null,{"o":{"n":"lower"}}],[5,"alpha_num","","Parses either an alphabet letter or digit according to [`std::char::is_alphanumeric`].",null,{"o":{"n":"alphanum"}}],[5,"letter","","Parses an alphabet letter according to [`std::char::is_alphabetic`].",null,{"o":{"n":"letter"}}],[5,"oct_digit","","Parses an octal digit.",null,{"o":{"n":"octdigit"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase.",null,{"o":{"n":"hexdigit"}}],[5,"string","","Parses the string `s`.",null,{"i":[{"n":"str"}],"o":{"n":"str"}}],[5,"string_cmp","","Parses the string `s`, using `cmp` to compare each character.",null,{"i":[{"n":"str"},{"n":"c"}],"o":{"n":"strcmp"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"digit"}}],[11,"parse_partial","","",55,null],[11,"add_error","","",55,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"space"}}],[11,"parse_lazy","","",56,null],[11,"parse_partial","","",56,null],[11,"add_error","","",56,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"spaces"}}],[11,"parse_lazy","","",57,null],[11,"parse_partial","","",57,null],[11,"add_error","","",57,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"newline"}}],[11,"parse_lazy","","",58,null],[11,"parse_partial","","",58,null],[11,"add_error","","",58,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"crlf"}}],[11,"parse_lazy","","",59,null],[11,"parse_partial","","",59,null],[11,"add_error","","",59,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"tab"}}],[11,"parse_lazy","","",60,null],[11,"parse_partial","","",60,null],[11,"add_error","","",60,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"upper"}}],[11,"parse_lazy","","",61,null],[11,"parse_partial","","",61,null],[11,"add_error","","",61,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"lower"}}],[11,"parse_lazy","","",62,null],[11,"parse_partial","","",62,null],[11,"add_error","","",62,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"alphanum"}}],[11,"parse_lazy","","",63,null],[11,"parse_partial","","",63,null],[11,"add_error","","",63,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"letter"}}],[11,"parse_lazy","","",64,null],[11,"parse_partial","","",64,null],[11,"add_error","","",64,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"octdigit"}}],[11,"parse_lazy","","",65,null],[11,"parse_partial","","",65,null],[11,"add_error","","",65,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"hexdigit"}}],[11,"parse_lazy","","",66,null],[11,"parse_partial","","",66,null],[11,"add_error","","",66,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"parse_lazy","","",67,null],[11,"add_error","","",67,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"strcmp"}}],[11,"parse_lazy","","",68,null],[11,"add_error","","",68,{"i":[{"n":"self"},{"n":"tracked"}]}],[0,"choice","combine::parser","Combinators which take one or more parsers and attempts to parse successfully with at least one of them.",null,null],[3,"Choice","combine::parser::choice","",null,null],[3,"Or","","",null,null],[3,"Optional","","",null,null],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",null,{"i":[{"n":"p"}],"o":{"n":"choice"}}],[5,"or","","Equivalent to [`p1.or(p2)`].",null,{"i":[{"n":"p1"},{"n":"p2"}],"o":{"n":"or"}}],[5,"optional","","Parses `parser` and outputs `Some(value)` if it succeeds, `None` if it fails without consuming any input. Fails if `parser` fails after having consumed some input.",null,{"i":[{"n":"p"}],"o":{"n":"optional"}}],[8,"ChoiceParser","","`ChoiceParser` represents a parser which may parse one of several different choices depending on the input.",null,null],[16,"Input","","",69,null],[16,"Output","","",69,null],[16,"PartialState","","",69,null],[10,"parse_first","","",69,null],[10,"parse_partial","","",69,null],[10,"parse_mode_choice","","",69,null],[10,"add_error_choice","","",69,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"choice"}}],[11,"parse_partial","","",70,null],[11,"parse_first","","",70,null],[11,"parse_mode_impl","","",70,null],[11,"add_error","","",70,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"parse_partial","","",71,null],[11,"parse_first","","",71,null],[11,"parse_mode_impl","","",71,null],[11,"add_error","","",71,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"optional"}}],[11,"parse_partial","","",72,null],[11,"parse_first","","",72,null],[11,"parse_mode_impl","","",72,null],[11,"add_error","","",72,{"i":[{"n":"self"},{"n":"tracked"}]}],[0,"combinator","combine::parser","Various combinators which do not fit anywhere else.",null,null],[3,"NotFollowedBy","combine::parser::combinator","",null,null],[12,"parser","","",73,null],[3,"Try","","",null,null],[3,"LookAhead","","",null,null],[3,"Map","","",null,null],[3,"FlatMap","","",null,null],[3,"AndThen","","",null,null],[3,"Recognize","","",null,null],[3,"NoPartial","","",null,null],[3,"Ignore","","",null,null],[3,"AnyPartialState","","",null,null],[3,"AnyPartialStateParser","","",null,null],[3,"AnySendPartialState","","",null,null],[3,"AnySendPartialStateParser","","",null,null],[3,"Lazy","","",null,null],[5,"not_followed_by","","Succeeds only if `parser` fails. Never consumes any input.",null,{"i":[{"n":"p"}],"o":{"n":"notfollowedby"}}],[5,"try","","`try(p)` behaves as `p` except it acts as if the parser hadn't consumed any input if `p` fails after consuming input.",null,{"i":[{"n":"p"}],"o":{"n":"try"}}],[5,"look_ahead","","`look_ahead(p)` acts as `p` but doesn't consume input on success.",null,{"i":[{"n":"p"}],"o":{"n":"lookahead"}}],[5,"map","","Equivalent to [`p.map(f)`].",null,{"i":[{"n":"p"},{"n":"f"}],"o":{"n":"map"}}],[5,"flat_map","","Equivalent to [`p.flat_map(f)`].",null,{"i":[{"n":"p"},{"n":"f"}],"o":{"n":"flatmap"}}],[5,"and_then","","Equivalent to [`p.and_then(f)`].",null,{"i":[{"n":"p"},{"n":"f"}],"o":{"n":"andthen"}}],[5,"recognize","","Constructs a parser which returns the tokens parsed by `parser` accumulated in `F: Extend<P::Input::Item>` instead of `P::Output`.",null,{"i":[{"n":"p"}],"o":{"n":"recognize"}}],[5,"no_partial","","",null,{"i":[{"n":"p"}],"o":{"n":"nopartial"}}],[5,"any_partial_state","","Returns a parser where `P::PartialState` is boxed. Useful as a way to avoid writing the type since it can get very large after combining a few parsers.",null,{"i":[{"n":"p"}],"o":{"n":"anypartialstateparser"}}],[5,"any_send_partial_state","","Returns a parser where `P::PartialState` is boxed. Useful as a way to avoid writing the type since it can get very large after combining a few parsers.",null,{"i":[{"n":"p"}],"o":{"n":"anysendpartialstateparser"}}],[5,"lazy","","Constructs the parser lazily and on each `parse_*` call. Can be used to effectively reduce the size of deeply nested parsers as only the function producing the parser is stored in `Lazy`",null,{"i":[{"n":"p"}],"o":{"n":"lazy"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"notfollowedby"}}],[11,"parse_partial","","",73,null],[11,"add_error","","",73,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"try"}}],[11,"parse_stream_consumed","","",74,null],[11,"parse_partial","","",74,null],[11,"parse_first","","",74,null],[11,"parse_consumed_mode","","",74,null],[11,"parse_mode_impl","","",74,null],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"lookahead"}}],[11,"parse_lazy","","",75,null],[11,"add_error","","",75,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"map"}}],[11,"parse_partial","","",76,null],[11,"parse_first","","",76,null],[11,"parse_mode_impl","","",76,null],[11,"add_error","","",76,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"flatmap"}}],[11,"parse_partial","","",77,null],[11,"parse_first","","",77,null],[11,"parse_mode_impl","","",77,null],[11,"add_error","","",77,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"andthen"}}],[11,"parse_partial","","",78,null],[11,"parse_first","","",78,null],[11,"parse_mode_impl","","",78,null],[11,"add_error","","",78,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"recognize"}}],[11,"parse_partial","","",79,null],[11,"parse_first","","",79,null],[11,"parse_mode_impl","","",79,null],[11,"add_error","","",79,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"parse_lazy","","",80,null],[11,"parse_partial","","",80,null],[11,"parse_first","","",80,null],[11,"parse_mode_impl","","",80,null],[11,"add_error","","",80,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"ignore"}}],[11,"parse_lazy","","",81,null],[11,"parse_partial","","",81,null],[11,"parse_first","","",81,null],[11,"parse_mode_impl","","",81,null],[11,"add_error","","",81,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"default","","",82,{"o":{"n":"anypartialstate"}}],[11,"parse_lazy","","",83,null],[11,"parse_partial","","",83,null],[11,"add_error","","",83,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"default","","",84,{"o":{"n":"anysendpartialstate"}}],[11,"parse_lazy","","",85,null],[11,"parse_partial","","",85,null],[11,"add_error","","",85,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"lazy"}}],[11,"parse_stream_consumed","","",86,null],[11,"parse_lazy","","",86,null],[11,"parse_partial","","",86,null],[11,"parse_first","","",86,null],[11,"parse_consumed_mode","","",86,null],[11,"parse_mode_impl","","",86,null],[0,"error","combine::parser","Parsers which cause errors or modifies the returned error on parse failure.",null,null],[3,"Unexpected","combine::parser::error","",null,null],[3,"Message","","",null,null],[3,"Expected","","",null,null],[5,"unexpected","","Always fails with `message` as an unexpected error. Never consumes any input.",null,{"i":[{"n":"s"}],"o":{"n":"unexpected"}}],[5,"unexpected_any","","Always fails with `message` as an unexpected error. Never consumes any input.",null,{"i":[{"n":"s"}],"o":{"n":"unexpected"}}],[5,"message","","Equivalent to [`p1.message(msg)`].",null,{"i":[{"n":"p"},{"n":"info"}],"o":{"n":"message"}}],[5,"expected","","Equivalent to [`p.expected(info)`].",null,{"i":[{"n":"p"},{"n":"info"}],"o":{"n":"expected"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"unexpected"}}],[11,"parse_lazy","","",87,null],[11,"add_error","","",87,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"message"}}],[11,"parse_partial","","",88,null],[11,"parse_first","","",88,null],[11,"parse_mode_impl","","",88,null],[11,"add_error","","",88,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"expected"}}],[11,"parse_partial","","",89,null],[11,"parse_first","","",89,null],[11,"parse_mode_impl","","",89,null],[11,"add_error","","",89,{"i":[{"n":"self"},{"n":"tracked"}]}],[0,"function","combine::parser","Parsers constructor from regular functions",null,null],[3,"FnParser","combine::parser::function","",null,null],[3,"EnvParser","","",null,null],[5,"parser","","Wraps a function, turning it into a parser.",null,{"i":[{"n":"f"}],"o":{"n":"fnparser"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to do the parsing. This is commonly useful to allow multiple parsers to share some environment while still allowing the parsers to be written in separate functions.",null,null],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"fnparser"}}],[11,"parse_lazy","","",90,null],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"parse_lazy","","",91,null],[0,"item","combine::parser","Parsers working with single stream items.",null,null],[3,"Any","combine::parser::item","",null,null],[3,"Satisfy","","",null,null],[3,"SatisfyMap","","",null,null],[3,"Token","","",null,null],[3,"Tokens","","",null,null],[3,"Position","","",null,null],[3,"OneOf","","",null,null],[3,"NoneOf","","",null,null],[3,"Value","","",null,null],[3,"Eof","","",null,null],[5,"item","","Parses a character and succeeds if the character is equal to `c`.",null,null],[5,"any","","Parses any token.",null,{"o":{"n":"any"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`.",null,{"i":[{"n":"p"}],"o":{"n":"satisfy"}}],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds and returns the value inside the `Option`. If `predicate` returns `None` the parser fails without consuming any input.",null,{"i":[{"n":"p"}],"o":{"n":"satisfymap"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`.",null,null],[5,"tokens","","Parses multiple tokens.",null,{"i":[{"n":"c"},{"n":"info"},{"n":"t"}],"o":{"n":"tokens"}}],[5,"position","","Parser which just returns the current position in the stream.",null,{"o":{"n":"position"}}],[5,"one_of","","Extract one token and succeeds if it is part of `tokens`.",null,{"i":[{"n":"t"}],"o":{"n":"oneof"}}],[5,"none_of","","Extract one token and succeeds if it is not part of `tokens`.",null,{"i":[{"n":"t"}],"o":{"n":"noneof"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"i":[{"n":"t"}],"o":{"n":"value"}}],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"o":{"n":"eof"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"any"}}],[11,"parse_lazy","","",92,null],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"satisfy"}}],[11,"parse_lazy","","",93,null],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"satisfymap"}}],[11,"parse_lazy","","",94,null],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"token"}}],[11,"parse_lazy","","",95,null],[11,"add_error","","",95,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"tokens"}}],[11,"parse_lazy","","",96,null],[11,"add_error","","",96,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"parse_lazy","","",97,null],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"oneof"}}],[11,"parse_lazy","","",98,null],[11,"add_error","","",98,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"noneof"}}],[11,"parse_lazy","","",99,null],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"parse_lazy","","",100,null],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"eof"}}],[11,"parse_lazy","","",101,null],[11,"add_error","","",101,{"i":[{"n":"self"},{"n":"tracked"}]}],[0,"range","combine::parser","Module containing zero-copy parsers.",null,null],[3,"Range","combine::parser::range","",null,null],[3,"Recognize","","",null,null],[12,"parser","","",102,null],[3,"RecognizeWithValue","","",null,null],[3,"Take","","",null,null],[3,"TakeWhile","","",null,null],[3,"TakeWhile1","","",null,null],[3,"TakeUntilRange","","",null,null],[5,"recognize","","Zero-copy parser which returns consumed input range.",null,{"i":[{"n":"p"}],"o":{"n":"recognize"}}],[5,"recognize_with_value","","Zero-copy parser which returns a pair: (consumed input range, parsed value).",null,{"i":[{"n":"p"}],"o":{"n":"recognizewithvalue"}}],[5,"range","","Zero-copy parser which reads a range of length `i.len()` and succeeds if `i` is equal to that range.",null,null],[5,"take","","Zero-copy parser which reads a range of length `n`.",null,{"i":[{"n":"usize"}],"o":{"n":"take"}}],[5,"take_while","","Zero-copy parser which reads a range of 0 or more tokens which satisfy `f`.",null,{"i":[{"n":"f"}],"o":{"n":"takewhile"}}],[5,"take_while1","","Zero-copy parser which reads a range of 1 or more tokens which satisfy `f`.",null,{"i":[{"n":"f"}],"o":{"n":"takewhile1"}}],[5,"take_until_range","","Zero-copy parser which reads a range of 0 or more tokens until `r` is found.",null,null],[11,"parse_lazy","","",103,null],[11,"add_error","","",103,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"recognize"}}],[11,"parse_partial","","",102,null],[11,"add_error","","",102,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"recognizewithvalue"}}],[11,"parse_partial","","",104,null],[11,"add_error","","",104,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"parse_lazy","","",105,null],[11,"parse_partial","","",106,null],[11,"parse_first","","",106,null],[11,"parse_mode_impl","","",106,null],[11,"parse_partial","","",107,null],[11,"parse_first","","",107,null],[11,"parse_mode_impl","","",107,null],[11,"parse_partial","","",108,null],[0,"repeat","combine::parser","Combinators which take one or more parsers and applies them repeatedly.",null,null],[3,"Count","combine::parser::repeat","",null,null],[3,"SkipCount","","",null,null],[12,"count","","",109,null],[12,"parser","","",109,null],[3,"CountMinMax","","",null,null],[3,"SkipCountMinMax","","",null,null],[12,"min","","",110,null],[12,"max","","",110,null],[12,"parser","","",110,null],[3,"Iter","","",null,null],[3,"Many","","",null,null],[3,"Many1","","",null,null],[3,"SkipMany","","",null,null],[3,"SkipMany1","","",null,null],[3,"SepBy","","",null,null],[3,"SepBy1","","",null,null],[3,"SepEndBy","","",null,null],[3,"SepEndBy1","","",null,null],[3,"Chainl1","","",null,null],[3,"Chainr1","","",null,null],[3,"TakeUntil","","",null,null],[3,"SkipUntil","","",null,null],[12,"end","","",111,null],[3,"EscapedState","","",null,null],[3,"Escaped","","",null,null],[5,"count","","Parses `parser` from zero up to `count` times.",null,{"i":[{"n":"usize"},{"n":"p"}],"o":{"n":"count"}}],[5,"skip_count","","Parses `parser` from zero up to `count` times skipping the output of `parser`.",null,{"i":[{"n":"usize"},{"n":"p"}],"o":{"n":"skipcount"}}],[5,"count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`).",null,{"i":[{"n":"usize"},{"n":"usize"},{"n":"p"}],"o":{"n":"countminmax"}}],[5,"skip_count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`) skipping the output of `parser`.",null,{"i":[{"n":"usize"},{"n":"usize"},{"n":"p"}],"o":{"n":"skipcountminmax"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.",null,{"i":[{"n":"p"}],"o":{"n":"many"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.",null,{"i":[{"n":"p"}],"o":{"n":"many1"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result.",null,{"i":[{"n":"p"}],"o":{"n":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result.",null,{"i":[{"n":"p"}],"o":{"n":"skipmany1"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sepby"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sepby1"}}],[5,"sep_end_by","","Parses `parser` zero or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sependby"}}],[5,"sep_end_by1","","Parses `parser` one or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"i":[{"n":"p"},{"n":"s"}],"o":{"n":"sependby1"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`. The value returned is the one produced by the left associative application of the function returned by the parser `op`.",null,{"i":[{"n":"p"},{"n":"op"}],"o":{"n":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`. The value returned is the one produced by the right associative application of the function returned by `op`.",null,{"i":[{"n":"p"},{"n":"op"}],"o":{"n":"chainr1"}}],[5,"take_until","","Takes input until `end` is encountered or `end` indicates that it has consumed input before failing (`try` can be used to make it look like it has not consumed any input)",null,{"i":[{"n":"p"}],"o":{"n":"takeuntil"}}],[5,"skip_until","","Skips input until `end` is encountered or `end` indicates that it has consumed input before failing (`try` can be used to make it look like it has not consumed any input)",null,{"i":[{"n":"p"}],"o":{"n":"skipuntil"}}],[5,"escaped","","Parses an escaped string by first applying `parser` which accept the normal characters which do not need escaping. Once `parser` can not consume any more input it checks if the next item is `escape`. If it is then `escape_parser` is used to parse the escaped character and then resumes parsing using `parser`. If `escape` was not found then the parser finishes successfully.",null,null],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"count"}}],[11,"parse_partial","","",112,null],[11,"parse_first","","",112,null],[11,"parse_mode_impl","","",112,null],[11,"add_error","","",112,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"skipcount"}}],[11,"parse_partial","","",109,null],[11,"add_error","","",109,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"countminmax"}}],[11,"parse_partial","","",113,null],[11,"parse_first","","",113,null],[11,"parse_mode_impl","","",113,null],[11,"add_error","","",113,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"skipcountminmax"}}],[11,"parse_partial","","",110,null],[11,"add_error","","",110,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"new","","",114,null],[11,"into_result","","Converts the iterator to a `ParseResult`, returning `Ok` if the parsing so far has be done without any errors which consumed data.",114,{"i":[{"n":"self"},{"n":"o"}],"o":{"n":"parseresult"}}],[11,"next","","",114,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"many"}}],[11,"parse_partial","","",115,null],[11,"parse_first","","",115,null],[11,"parse_mode_impl","","",115,null],[11,"add_error","","",115,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"many1"}}],[11,"parse_partial","","",116,null],[11,"parse_first","","",116,null],[11,"parse_mode_impl","","",116,null],[11,"add_error","","",116,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"skipmany"}}],[11,"parse_lazy","","",117,null],[11,"parse_partial","","",117,null],[11,"add_error","","",117,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"skipmany1"}}],[11,"parse_lazy","","",118,null],[11,"parse_partial","","",118,null],[11,"add_error","","",118,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"sepby"}}],[11,"parse_partial","","",119,null],[11,"parse_first","","",119,null],[11,"parse_mode_impl","","",119,null],[11,"add_error","","",119,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"sepby1"}}],[11,"parse_partial","","",120,null],[11,"parse_first","","",120,null],[11,"parse_mode_impl","","",120,null],[11,"add_error","","",120,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"sependby"}}],[11,"parse_partial","","",121,null],[11,"parse_first","","",121,null],[11,"parse_mode_impl","","",121,null],[11,"add_error","","",121,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"sependby1"}}],[11,"parse_partial","","",122,null],[11,"parse_first","","",122,null],[11,"parse_mode_impl","","",122,null],[11,"add_error","","",122,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"chainl1"}}],[11,"parse_partial","","",123,null],[11,"parse_first","","",123,null],[11,"parse_mode_impl","","",123,null],[11,"add_error","","",123,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"chainr1"}}],[11,"parse_lazy","","",124,null],[11,"add_error","","",124,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"takeuntil"}}],[11,"parse_partial","","",125,null],[11,"parse_first","","",125,null],[11,"parse_mode_impl","","",125,null],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"skipuntil"}}],[11,"parse_partial","","",111,null],[11,"add_error","","",111,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"default","","",126,{"o":{"n":"escapedstate"}}],[11,"parse_lazy","","",127,null],[11,"add_error","","",127,{"i":[{"n":"self"},{"n":"tracked"}]}],[0,"sequence","combine::parser","Combinators which take multiple parsers and applies them one after another.",null,null],[3,"PartialState1","combine::parser::sequence","",null,null],[12,"A","","",128,null],[3,"PartialState2","","",null,null],[12,"A","","",129,null],[12,"B","","",129,null],[3,"PartialState3","","",null,null],[12,"A","","",130,null],[12,"B","","",130,null],[12,"C","","",130,null],[3,"PartialState4","","",null,null],[12,"A","","",131,null],[12,"B","","",131,null],[12,"C","","",131,null],[12,"D","","",131,null],[3,"PartialState5","","",null,null],[12,"A","","",132,null],[12,"B","","",132,null],[12,"C","","",132,null],[12,"D","","",132,null],[12,"E","","",132,null],[3,"PartialState6","","",null,null],[12,"A","","",133,null],[12,"B","","",133,null],[12,"C","","",133,null],[12,"D","","",133,null],[12,"E","","",133,null],[12,"F","","",133,null],[3,"PartialState7","","",null,null],[12,"A","","",134,null],[12,"B","","",134,null],[12,"C","","",134,null],[12,"D","","",134,null],[12,"E","","",134,null],[12,"F","","",134,null],[12,"G","","",134,null],[3,"PartialState8","","",null,null],[12,"A","","",135,null],[12,"B","","",135,null],[12,"C","","",135,null],[12,"D","","",135,null],[12,"E","","",135,null],[12,"F","","",135,null],[12,"G","","",135,null],[12,"H","","",135,null],[3,"PartialState9","","",null,null],[12,"A","","",136,null],[12,"B","","",136,null],[12,"C","","",136,null],[12,"D","","",136,null],[12,"E","","",136,null],[12,"F","","",136,null],[12,"G","","",136,null],[12,"H","","",136,null],[12,"I","","",136,null],[3,"PartialState10","","",null,null],[12,"A","","",137,null],[12,"B","","",137,null],[12,"C","","",137,null],[12,"D","","",137,null],[12,"E","","",137,null],[12,"F","","",137,null],[12,"G","","",137,null],[12,"H","","",137,null],[12,"I","","",137,null],[12,"J","","",137,null],[3,"PartialState11","","",null,null],[12,"A","","",138,null],[12,"B","","",138,null],[12,"C","","",138,null],[12,"D","","",138,null],[12,"E","","",138,null],[12,"F","","",138,null],[12,"G","","",138,null],[12,"H","","",138,null],[12,"I","","",138,null],[12,"J","","",138,null],[12,"K","","",138,null],[3,"PartialState12","","",null,null],[12,"A","","",139,null],[12,"B","","",139,null],[12,"C","","",139,null],[12,"D","","",139,null],[12,"E","","",139,null],[12,"F","","",139,null],[12,"G","","",139,null],[12,"H","","",139,null],[12,"I","","",139,null],[12,"J","","",139,null],[12,"K","","",139,null],[12,"L","","",139,null],[3,"With","","",null,null],[3,"Skip","","",null,null],[3,"Between","","",null,null],[3,"Then","","",null,null],[3,"ThenPartial","","",null,null],[5,"with","","Equivalent to [`p1.with(p2)`].",null,{"i":[{"n":"p1"},{"n":"p2"}],"o":{"n":"with"}}],[5,"skip","","",null,{"i":[{"n":"p1"},{"n":"p2"}],"o":{"n":"skip"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`. Returns the value of `parser`.",null,{"i":[{"n":"l"},{"n":"r"},{"n":"p"}],"o":{"n":"between"}}],[5,"then","","Equivalent to [`p.then(f)`].",null,{"i":[{"n":"p"},{"n":"f"}],"o":{"n":"then"}}],[5,"then_partial","","Equivalent to [`p.then_partial(f)`].",null,{"i":[{"n":"p"},{"n":"f"}],"o":{"n":"thenpartial"}}],[11,"default","","",128,{"o":{"n":"partialstate1"}}],[11,"default","","",129,{"o":{"n":"partialstate2"}}],[11,"default","","",130,{"o":{"n":"partialstate3"}}],[11,"default","","",131,{"o":{"n":"partialstate4"}}],[11,"default","","",132,{"o":{"n":"partialstate5"}}],[11,"default","","",133,{"o":{"n":"partialstate6"}}],[11,"default","","",134,{"o":{"n":"partialstate7"}}],[11,"default","","",135,{"o":{"n":"partialstate8"}}],[11,"default","","",136,{"o":{"n":"partialstate9"}}],[11,"default","","",137,{"o":{"n":"partialstate10"}}],[11,"default","","",138,{"o":{"n":"partialstate11"}}],[11,"default","","",139,{"o":{"n":"partialstate12"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"with"}}],[11,"parse_lazy","","",140,null],[11,"parse_partial","","",140,null],[11,"parse_first","","",140,null],[11,"parse_mode_impl","","",140,null],[11,"add_error","","",140,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"skip"}}],[11,"parse_partial","","",141,null],[11,"parse_first","","",141,null],[11,"parse_mode_impl","","",141,null],[11,"add_error","","",141,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"between"}}],[11,"parse_lazy","","",142,null],[11,"parse_partial","","",142,null],[11,"add_error","","",142,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"then"}}],[11,"parse_partial","","",143,null],[11,"parse_first","","",143,null],[11,"parse_mode_impl","","",143,null],[11,"add_error","","",143,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"thenpartial"}}],[11,"parse_partial","","",144,null],[11,"parse_first","","",144,null],[11,"parse_mode_impl","","",144,null],[11,"add_error","","",144,{"i":[{"n":"self"},{"n":"tracked"}]}],[8,"Parser","combine::parser","By implementing the `Parser` trait a type says that it can be used to parse an input stream into the type `Output`.",null,null],[16,"Input","","The type which is taken as input for the parser. The type must implement the `Stream` trait which allows the parser to read items from the type.",145,null],[16,"Output","","The type which is returned if the parser is successful.",145,null],[16,"PartialState","","Determines the state necessary to resume parsing after more input is supplied.",145,null],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to parse it, returning an easy to use and format error if parsing did not succeed.",145,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Entry point of the parser. Takes some input and tries to parse it.",145,null],[11,"parse_with_state","","Entry point of the parser when using partial parsing. Takes some input and tries to parse it.",145,null],[11,"parse_stream","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,null],[11,"parse_stream_consumed","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,null],[11,"parse_stream_consumed_partial","","",145,null],[11,"parse_lazy","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,null],[11,"parse_first","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`.",145,null],[11,"parse_partial","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`",145,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed with an `EmptyErr` result.",145,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"by_ref","","Borrows a parser instead of consuming it.",145,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"with","","Discards the value of the `self` parser and returns the value of `p`. Fails if any of the parsers fails.",145,{"i":[{"n":"self"},{"n":"p2"}],"o":{"n":"with"}}],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`. Fails if any of the parsers fails.",145,{"i":[{"n":"self"},{"n":"p2"}],"o":{"n":"skip"}}],[11,"and","","Parses with `self` followed by `p`. Succeeds if both parsers succeed, otherwise fails. Returns a tuple with both values on success.",145,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any input it tries to consume the same input using `p`.",145,{"i":[{"n":"self"},{"n":"p2"}],"o":{"n":"or"}}],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse the rest of the input.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"then_partial","","Variant of `then` which parses using `self` and then passes the value to `f` as a `&mut` reference.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"thenpartial"}}],[11,"map","","Uses `f` to map over the parsed value.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"flatmap"}}],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error.",145,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"message"}}],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by `msg`. `msg` is then used in error messages as \"Expected `msg`\".",145,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"expected"}}],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully. `f` may optionally fail with an error which is automatically converted to a `ParseError`.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,null],[11,"partial_iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,null],[11,"boxed","","Turns the parser into a trait object by putting it in a `Box`. Can be used to easily return parsers from functions without naming the type.",145,{"i":[{"n":"self"}],"o":{"g":["parser"],"n":"box"}}],[11,"left","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,{"i":[{"n":"self"}],"o":{"n":"either"}}],[6,"ConsumedResult","combine","A `Result` type which has the consumed status flattened into the result. Conversions to and from `std::result::Result` can be done using `result.into()` or `From::from(result)`",null,null],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate whether they were successful or not. `O` is the type that is output on success. `I` is the specific stream type used in the parser.",null,null],[8,"ParseError","","Trait which defines a combine parse error.",null,null],[16,"StreamError","","",11,null],[10,"empty","","Constructs an empty error.",11,{"i":[{"n":"position"}],"o":{"n":"self"}}],[10,"from_error","","Creates a `ParseError` from a single `Self::StreamError`",11,null],[10,"set_position","","Sets the position of this `ParseError`",11,{"i":[{"n":"self"},{"n":"position"}]}],[11,"merge","","Merges two errors. If they exist at the same position the errors of `other` are added to `self` (using the semantics of `add`). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",11,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"self"}}],[10,"add","","Adds a `StreamError` to `self`.",11,null],[11,"add_expected","","",11,{"i":[{"n":"self"},{"n":"info"}]}],[11,"add_unexpected","","",11,{"i":[{"n":"self"},{"n":"info"}]}],[11,"add_message","","",11,{"i":[{"n":"self"},{"n":"info"}]}],[10,"set_expected","","Sets `info` as the only `Expected` error of `self`",11,null],[10,"is_unexpected_end_of_input","","",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"into_other","","Does a best-effort conversion of `self` into another `ParseError`",11,{"i":[{"n":"self"}],"o":{"n":"t"}}],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into the type `Output`.",null,null],[16,"Input","","The type which is taken as input for the parser. The type must implement the `Stream` trait which allows the parser to read items from the type.",145,null],[16,"Output","","The type which is returned if the parser is successful.",145,null],[16,"PartialState","","Determines the state necessary to resume parsing after more input is supplied.",145,null],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to parse it, returning an easy to use and format error if parsing did not succeed.",145,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Entry point of the parser. Takes some input and tries to parse it.",145,null],[11,"parse_with_state","","Entry point of the parser when using partial parsing. Takes some input and tries to parse it.",145,null],[11,"parse_stream","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,null],[11,"parse_stream_consumed","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,null],[11,"parse_stream_consumed_partial","","",145,null],[11,"parse_lazy","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",145,null],[11,"parse_first","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`.",145,null],[11,"parse_partial","","Parses using the stream `input` and allows itself to be resumed at a later point using `parse_partial` by storing the necessary intermediate state in `state`",145,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed with an `EmptyErr` result.",145,{"i":[{"n":"self"},{"n":"tracked"}]}],[11,"by_ref","","Borrows a parser instead of consuming it.",145,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"with","","Discards the value of the `self` parser and returns the value of `p`. Fails if any of the parsers fails.",145,{"i":[{"n":"self"},{"n":"p2"}],"o":{"n":"with"}}],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`. Fails if any of the parsers fails.",145,{"i":[{"n":"self"},{"n":"p2"}],"o":{"n":"skip"}}],[11,"and","","Parses with `self` followed by `p`. Succeeds if both parsers succeed, otherwise fails. Returns a tuple with both values on success.",145,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any input it tries to consume the same input using `p`.",145,{"i":[{"n":"self"},{"n":"p2"}],"o":{"n":"or"}}],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse the rest of the input.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"then_partial","","Variant of `then` which parses using `self` and then passes the value to `f` as a `&mut` reference.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"thenpartial"}}],[11,"map","","Uses `f` to map over the parsed value.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"flatmap"}}],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error.",145,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"message"}}],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by `msg`. `msg` is then used in error messages as \"Expected `msg`\".",145,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"expected"}}],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully. `f` may optionally fail with an error which is automatically converted to a `ParseError`.",145,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,null],[11,"partial_iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `Extend` type is not desirable.",145,null],[11,"boxed","","Turns the parser into a trait object by putting it in a `Box`. Can be used to easily return parsers from functions without naming the type.",145,{"i":[{"n":"self"}],"o":{"g":["parser"],"n":"box"}}],[11,"left","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,{"i":[{"n":"self"}],"o":{"n":"either"}}],[11,"right","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",145,{"i":[{"n":"self"}],"o":{"n":"either"}}],[8,"Positioned","","A type which has a position.",null,null],[10,"position","","Returns the current position of the stream.",22,null],[8,"RangeStream","","A `RangeStream` is an extension of `Stream` which allows for zero copy parsing.",null,null],[8,"RangeStreamOnce","","A `RangeStream` is an extension of `StreamOnce` which allows for zero copy parsing.",null,null],[10,"uncons_range","","Takes `size` elements from the stream. Fails if the length of the stream is less than `size`.",25,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[10,"uncons_while","","Takes items from stream, testing each one with `predicate`. returns the range of items which passed `predicate`.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"uncons_while1","","Takes items from stream, testing each one with `predicate` returns a range of at least one items which passed `predicate`.",25,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["streamerrorfor"],"n":"fastresult"}}],[10,"distance","","Returns the distance between `self` and `end`. The returned `usize` must be so that",25,null],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",null,null],[16,"Item","","The type of items which is yielded from this stream.",23,null],[16,"Range","","The type of a range of items yielded from this stream. Types which do not a have a way of yielding ranges of items should just use the `Self::Item` for this type.",23,null],[16,"Position","","Type which represents the position in a stream. `Ord` is required to allow parsers to determine which of two positions are further ahead.",23,null],[16,"Error","","",23,null],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements. Returns `Err` if no element could be retrieved.",23,{"i":[{"n":"self"}],"o":{"g":["streamerrorfor"],"n":"result"}}],[11,"is_partial","","Returns `true` if this stream only contains partial input.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"parser","","Declares a named parser which can easily be reused.",null,null],[14,"choice","","Takes a number of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",null,null],[14,"struct_parser","","Sequences multiple parsers and builds a struct out of them.",null,null]],"paths":[[3,"Errors"],[3,"Stream"],[4,"Info"],[4,"Error"],[3,"Tracked"],[4,"Info"],[4,"Consumed"],[4,"UnexpectedParse"],[4,"StringStreamError"],[4,"FastResult"],[8,"StreamError"],[8,"ParseError"],[3,"PartialStream"],[3,"SliceStream"],[3,"PointerOffset"],[3,"BufferedStream"],[3,"State"],[3,"SourcePosition"],[8,"Positioner"],[8,"RangePositioner"],[8,"DefaultPositioned"],[3,"IndexPositioner"],[8,"Positioned"],[8,"StreamOnce"],[8,"Resetable"],[8,"RangeStreamOnce"],[8,"FullRangeStream"],[8,"Range"],[3,"IteratorStream"],[3,"ReadStream"],[3,"U16"],[3,"U32"],[3,"U64"],[3,"I16"],[3,"I32"],[3,"I64"],[3,"F32"],[3,"F64"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Bytes"],[3,"BytesCmp"],[3,"TakeUntilByte"],[3,"TakeUntilByte2"],[3,"TakeUntilByte3"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Str"],[3,"StrCmp"],[8,"ChoiceParser"],[3,"Choice"],[3,"Or"],[3,"Optional"],[3,"NotFollowedBy"],[3,"Try"],[3,"LookAhead"],[3,"Map"],[3,"FlatMap"],[3,"AndThen"],[3,"Recognize"],[3,"NoPartial"],[3,"Ignore"],[3,"AnyPartialState"],[3,"AnyPartialStateParser"],[3,"AnySendPartialState"],[3,"AnySendPartialStateParser"],[3,"Lazy"],[3,"Unexpected"],[3,"Message"],[3,"Expected"],[3,"FnParser"],[3,"EnvParser"],[3,"Any"],[3,"Satisfy"],[3,"SatisfyMap"],[3,"Token"],[3,"Tokens"],[3,"Position"],[3,"OneOf"],[3,"NoneOf"],[3,"Value"],[3,"Eof"],[3,"Recognize"],[3,"Range"],[3,"RecognizeWithValue"],[3,"Take"],[3,"TakeWhile"],[3,"TakeWhile1"],[3,"TakeUntilRange"],[3,"SkipCount"],[3,"SkipCountMinMax"],[3,"SkipUntil"],[3,"Count"],[3,"CountMinMax"],[3,"Iter"],[3,"Many"],[3,"Many1"],[3,"SkipMany"],[3,"SkipMany1"],[3,"SepBy"],[3,"SepBy1"],[3,"SepEndBy"],[3,"SepEndBy1"],[3,"Chainl1"],[3,"Chainr1"],[3,"TakeUntil"],[3,"EscapedState"],[3,"Escaped"],[3,"PartialState1"],[3,"PartialState2"],[3,"PartialState3"],[3,"PartialState4"],[3,"PartialState5"],[3,"PartialState6"],[3,"PartialState7"],[3,"PartialState8"],[3,"PartialState9"],[3,"PartialState10"],[3,"PartialState11"],[3,"PartialState12"],[3,"With"],[3,"Skip"],[3,"Between"],[3,"Then"],[3,"ThenPartial"],[8,"Parser"]]};
searchIndex["crc"] = {"doc":"crc Rust implementation of CRC(16, 32, 64)","items":[[0,"crc16","crc","",null,null],[3,"Digest","crc::crc16","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_x25","","",null,null],[5,"checksum_usb","","",null,null],[17,"X25","","",null,null],[17,"X25_TABLE","","",null,null],[17,"USB","","",null,null],[17,"USB_TABLE","","",null,null],[8,"Hasher16","","",null,null],[10,"reset","","",0,{"inputs":[{"name":"self"}],"output":null}],[10,"write","","",0,null],[10,"sum16","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"new","","",1,{"inputs":[{"name":"u16"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",1,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"digest"}}],[11,"reset","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",1,null],[11,"sum16","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"crc32","crc","",null,null],[3,"Digest","crc::crc32","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ieee","","",null,null],[5,"checksum_castagnoli","","",null,null],[5,"checksum_koopman","","",null,null],[17,"CASTAGNOLI","","",null,null],[17,"CASTAGNOLI_TABLE","","",null,null],[17,"IEEE","","",null,null],[17,"IEEE_TABLE","","",null,null],[17,"KOOPMAN","","",null,null],[17,"KOOPMAN_TABLE","","",null,null],[8,"Hasher32","","",null,null],[10,"reset","","",2,{"inputs":[{"name":"self"}],"output":null}],[10,"write","","",2,null],[10,"sum32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",3,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"digest"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",3,null],[11,"sum32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write","","",3,null],[11,"finish","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"crc64","crc","",null,null],[3,"Digest","crc::crc64","",null,null],[5,"make_table","","",null,null],[5,"update","","",null,null],[5,"checksum_ecma","","",null,null],[5,"checksum_iso","","",null,null],[17,"ECMA","","",null,null],[17,"ECMA_TABLE","","",null,null],[17,"ISO","","",null,null],[17,"ISO_TABLE","","",null,null],[8,"Hasher64","","",null,null],[10,"reset","","",4,{"inputs":[{"name":"self"}],"output":null}],[10,"write","","",4,null],[10,"sum64","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"digest"}}],[11,"new_with_initial","","",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"digest"}}],[11,"reset","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",5,null],[11,"sum64","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}]],"paths":[[8,"Hasher16"],[3,"Digest"],[8,"Hasher32"],[3,"Digest"],[8,"Hasher64"],[3,"Digest"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"new","","Returns a new deque.",1,{"inputs":[],"output":{"name":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"min_capacity","","Returns the minimum capacity of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the number of elements the deque can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"shrink_to_fit","","Shrinks the capacity of the deque as much as possible.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","Creates another stealer.",2,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"inputs":[],"output":{"name":"guard"}}],[5,"default_collector","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"collector"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Returns a new null atomic pointer.",1,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"load_consume","","Loads a `Shared` from the atomic pointer using a \"consume\" memory ordering.",1,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"inputs":[{"name":"owned"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"into_usize","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"owned"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_usize","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"null","","Returns a new null pointer.",3,{"inputs":[],"output":{"name":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new collector.",4,{"inputs":[],"output":{"name":"self"}}],[11,"register","","Registers a new handle for the collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","Checks if both handles point to the same collector.",4,{"inputs":[{"name":"self"},{"name":"collector"}],"output":{"name":"bool"}}],[11,"pin","","Pins the handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"collector","","Returns the `Collector` associated with this handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"collector"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"collector","","Returns the `Collector` associated with this guard.",6,{"inputs":[{"name":"self"}],"output":{"generics":["collector"],"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[8,"Pointer","","A trait for either `Owned` or `Shared` pointers.",null,null],[10,"into_usize","","Returns the machine representation of the pointer.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"from_usize","","Returns a new pointer pointing to the tagged pointer `data`.",8,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Pads a value to the length of a cache line.",0,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",1,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["scopedjoinhandle"],"name":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread","","Get the underlying thread handle.",2,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[0,"consume","crossbeam_utils","",null,null],[8,"AtomicConsume","crossbeam_utils::consume","Trait which allows reading from an atomic type with \"consume\" ordering.",null,null],[16,"Val","","Type returned by `load_consume`.",4,null],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",4,null]],"paths":[[3,"CachePadded"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"],[8,"AtomicConsume"]]};
searchIndex["csv"] = {"doc":"This crate provides a streaming CSV (comma separated values) writer and reader that works with the `serialize` crate to do type based encoding and decoding. There are two primary goals of this project:","items":[[3,"Encoded","csv","A record to be encoded.",null,null],[3,"Decoded","","A record to be decoded.",null,null],[3,"Reader","","A CSV reader.",null,null],[3,"DecodedRecords","","An iterator of decoded records.",null,null],[3,"StringRecords","","An iterator of `String` records.",null,null],[3,"ByteRecords","","An iterator of `ByteString` records.",null,null],[3,"Writer","","A CSV writer.",null,null],[3,"LocatableError","","An error tagged with a location at which it occurred.",null,null],[12,"record","","The record number (starting at 1).",0,null],[12,"field","","The field number (starting at 1).",0,null],[12,"err","","The error.",0,null],[4,"NextField","","NextField is the result of parsing a single CSV field.",null,null],[13,"Data","","A single CSV field as a borrowed slice of the parser's internal buffer.",1,null],[13,"Error","","A CSV error found during parsing. When an error is found, it is first returned. All subsequent calls of `next_bytes` will return `EndOfCsv`. (EOF is exempt from this. Depending on the state of the parser, an EOF could trigger `Data`, `EndOfRecord` and `EndOfCsv`, all in succession.)",1,null],[13,"EndOfRecord","","Indicates the end of a record.",1,null],[13,"EndOfCsv","","Indicates the end of the CSV data. Once this state is entered, the parser can never leave it.",1,null],[4,"RecordTerminator","","A record terminator.",null,null],[13,"CRLF","","Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.",2,null],[13,"Any","","Parses the byte given as a record terminator.",2,null],[4,"QuoteStyle","","The quoting style to use when writing CSV data.",null,null],[13,"Always","","This puts quotes around every field. Always.",3,null],[13,"Necessary","","This puts quotes around fields only when necessary.",3,null],[13,"Never","","This never writes quotes.",3,null],[4,"Error","","An error produced by an operation on CSV data.",null,null],[13,"Encode","","An error reported by the type-based encoder.",4,null],[13,"Decode","","An error reported by the type-based decoder.",4,null],[13,"Parse","","An error reported by the CSV parser.",4,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",4,null],[13,"Index","","An error originating from using a CSV index.",4,null],[4,"ParseError","","A description of a CSV parse error.",null,null],[13,"UnequalLengths","","A record was found that has a different size than other records.",5,null],[12,"expected","csv::ParseError","Expected a record with this many fields.",5,null],[12,"got","","Got a record with this many fields.",5,null],[13,"InvalidUtf8","csv","An error occurred when trying to convert a field to a Unicode string.",5,null],[0,"index","","This sub-module provides experimental CSV record indexing.",null,null],[3,"Indexed","csv::index","A type for representing CSV data with a basic record index.",null,null],[5,"create_index","","Creates a new index for the given CSV reader.",null,{"inputs":[{"name":"reader"},{"name":"w"}],"output":{"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"open","","Opens a new index corresponding to the CSV reader given.",6,{"inputs":[{"name":"reader"},{"name":"i"}],"output":{"generics":["indexed"],"name":"result"}}],[11,"seek","","Seeks to `i`th record.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"count","","Returns the number of CSV records in the index in `O(1)` time.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"new","csv","Creates a new encodable record. The value returned can be passed to `Encodable::encode`.",7,{"inputs":[],"output":{"name":"encoded"}}],[11,"unwrap","","Once a record has been encoded into this value, `unwrap` can be used to access the raw CSV record.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bytestring"],"name":"vec"}}],[11,"emit_nil","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_usize","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",7,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",7,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",7,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",7,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",7,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",7,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",7,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"emit_option_some","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Creates a new decodable record from a record of byte strings.",8,{"inputs":[{"generics":["bytestring"],"name":"vec"}],"output":{"name":"decoded"}}],[11,"error","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_usize","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_u64","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_u32","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_u16","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_u8","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_isize","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[11,"read_i64","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_i32","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_i16","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_i8","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_bool","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"read_f64","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_f32","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_char","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[11,"read_str","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"read_enum","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recordterminator"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_reader","","Creates a new CSV reader from an arbitrary `io::Read`.",9,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","Creates a new CSV reader for the data at the file path given.",9,{"inputs":[{"name":"p"}],"output":{"generics":["reader"],"name":"result"}}],[11,"from_string","","Creates a CSV reader for an in memory string buffer.",9,{"inputs":[{"name":"s"}],"output":{"generics":["cursor"],"name":"reader"}}],[11,"from_bytes","","Creates a CSV reader for an in memory buffer of bytes.",9,{"inputs":[{"name":"v"}],"output":{"generics":["cursor"],"name":"reader"}}],[11,"decode","","Uses type-based decoding to read a single record from CSV data.",9,{"inputs":[{"name":"self"}],"output":{"name":"decodedrecords"}}],[11,"records","","Returns an iterator of records in the CSV data where each field is a `String`.",9,{"inputs":[{"name":"self"}],"output":{"name":"stringrecords"}}],[11,"headers","","Returns a copy of the first record in the CSV data as strings.",9,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"delimiter","","The delimiter to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"has_headers","","Whether to treat the first row as a special header row.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"flexible","","Whether to allow flexible length records when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"record_terminator","","Set the record terminator to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"reader"}}],[11,"quote","","Set the quote character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"escape","","Set the escape character to use when reading CSV data.",9,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"option"}],"output":{"name":"reader"}}],[11,"double_quote","","Enable double quote escapes.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"ascii","","A convenience method for reading ASCII delimited text.",9,{"inputs":[{"name":"self"}],"output":{"name":"reader"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter_result","","Transform NextField into an iterator result.",1,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"is_end","","Returns true if and only if the end of CSV data has been reached.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Returns the underlying field data.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"byte_headers","","This is just like `headers`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"byte_records","","This is just like `records`, except fields are `ByteString`s instead of `String`s.",9,{"inputs":[{"name":"self"}],"output":{"name":"byterecords"}}],[11,"done","","Returns `true` if the CSV parser has reached its final state. When this method returns `true`, all iterators will always return `None`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"next_bytes","","An iterator over fields in the current record.",9,{"inputs":[{"name":"self"}],"output":{"name":"nextfield"}}],[11,"next_str","","This is just like `next_bytes` except it converts each field to a Unicode string in place.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"nextfield"}}],[11,"byte_offset","","Returns the byte offset at which the current record started.",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"seek","","Seeks the underlying reader to the file cursor specified.",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"quotestyle"}}],[11,"from_file","","Creates a new `Writer` that writes CSV data to the file path given.",13,{"inputs":[{"name":"p"}],"output":{"generics":["writer"],"name":"result"}}],[11,"from_writer","","Creates a new CSV writer that writes to the `io::Write` given.",13,{"inputs":[{"name":"w"}],"output":{"name":"writer"}}],[11,"from_buffer","","Creates a new CSV writer that writes to the buffer given.",13,{"inputs":[{"name":"bufwriter"}],"output":{"name":"writer"}}],[11,"from_memory","","Creates a new CSV writer that writes to an in memory buffer. At any time, `as_string` or `as_bytes` can be called to retrieve the cumulative CSV data.",13,{"inputs":[],"output":{"generics":["vec"],"name":"writer"}}],[11,"as_string","","Returns the written CSV data as a string.",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_bytes","","Returns the encoded CSV data as raw bytes.",13,null],[11,"into_string","","Convert the Writer into a string of written CSV data",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"into_bytes","","Convert the Writer into a vector of encoded CSV bytes.",13,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"encode","","Writes a record by encoding any `Encodable` value.",13,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"write","","Writes a record of strings (Unicode or raw bytes).",13,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"flush","","Flushes the underlying buffer.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"flexible","","Whether to allow flexible length records when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[11,"record_terminator","","Sets the record terminator to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"recordterminator"}],"output":{"name":"writer"}}],[11,"quote_style","","Set the quoting style to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"quotestyle"}],"output":{"name":"writer"}}],[11,"quote","","Set the quote character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"escape","","Set the escape character to use when writing CSV data.",13,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"double_quote","","Set the quoting escape mechanism.",13,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"writer"}}],[6,"Result","","A convenience type for representing the result of most CSV reader/writer operations.",null,null],[6,"ByteString","","A convenience type for referring to a plain byte string.",null,null],[8,"BorrowBytes","","A trait that permits borrowing byte vectors.",null,null],[10,"borrow_bytes","","Borrow a byte vector.",14,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"locatableerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"borrow_bytes","","",15,null]],"paths":[[3,"LocatableError"],[4,"NextField"],[4,"RecordTerminator"],[4,"QuoteStyle"],[4,"Error"],[4,"ParseError"],[3,"Indexed"],[3,"Encoded"],[3,"Decoded"],[3,"Reader"],[3,"DecodedRecords"],[3,"StringRecords"],[3,"ByteRecords"],[3,"Writer"],[8,"BorrowBytes"],[6,"ByteString"]]};
searchIndex["discard"] = {"doc":"There are situations where you need to intentionally leak some memory but not other memory. This crate can help!","items":[[3,"DiscardOnDrop","discard","If you have a value which implements `Discard`, you can use `DiscardOnDrop::new(value)` which will wrap the value. When the wrapper is dropped it will automatically call `value.discard()`.",null,null],[8,"Discard","","This trait is very similar to `Drop`: it allows for cleaning up memory and resources when they are no longer needed.",null,null],[10,"discard","","This consumes the value and cleans up any memory / resources / etc. that the value was using.",0,{"i":[{"n":"self"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `DiscardOnDrop`.",1,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"leak","","Returns the wrapped `discarder`.",1,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"deref","","",1,null],[11,"deref_mut","","",1,null]],"paths":[[8,"Discard"],[3,"DiscardOnDrop"]]};
searchIndex["dotenv"] = {"doc":"This crate provides a configuration loader in the style of the ruby dotenv gem. This library is meant to be used on development or testing environments in which setting environment variables is not practical. It loads environment variables from a .env file, if available, and mashes those with the actual environment variables provided by the operating system.","items":[[4,"Error","dotenv","",null,null],[13,"LineParse","","",0,null],[13,"Io","","",0,null],[13,"EnvVar","","",0,null],[5,"var","","After loading the dotenv file, fetches the environment variable key from the current process.",null,{"inputs":[{"name":"k"}],"output":{"generics":["string"],"name":"result"}}],[5,"vars","","After loading the dotenv file, returns an iterator of (variable, value) pairs of strings, for all the environment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"from_path","","Loads the file at the specified absolute path.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"from_path_iter","","Like `from_path`, but returns an iterator over variables instead of loading into environment.",null,{"inputs":[{"name":"p"}],"output":{"generics":["iter"],"name":"result"}}],[5,"from_filename","","Loads the specified file from the environment's current directory or its parents in sequence.",null,{"inputs":[{"name":"p"}],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"from_filename_iter","","Like `from_filename`, but returns an iterator over variables instead of loading into environment.",null,{"inputs":[{"name":"p"}],"output":{"generics":["iter"],"name":"result"}}],[5,"dotenv","","This is usually what you want. It loads the .env file located in the environment's current directory or its parents in sequence.",null,{"inputs":[],"output":{"generics":["pathbuf"],"name":"result"}}],[5,"dotenv_iter","","Like `dotenv`, but returns an iterator over variables instead of loading into environment.",null,{"inputs":[],"output":{"generics":["iter"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"not_found","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"Result","","",null,null]],"paths":[[4,"Error"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["encode_unicode"] = {"doc":"Miscellaneous UTF-8 and UTF-16 types and methods.","items":[[3,"Utf8Char","encode_unicode","An unicode codepoint stored as UTF-8.",null,null],[3,"Utf16Char","","An unicode codepoint stored as UTF-16.",null,null],[3,"Utf8Iterator","","Read or iterate over the bytes of the UTF-8 representation of a codepoint.",null,null],[3,"Utf16Iterator","","Iterate over the units of the UTF-16 representation of a codepoint.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"utf8char"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"utf8char"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8char"}}],[11,"from_str","","The string must contain exactly one codepoint",0,{"inputs":[{"name":"str"}],"output":{"generics":["fromstrerror"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"utf16char"}],"output":{"name":"utf8char"}}],[11,"from","","",0,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"into_iter","","Iterate over the byte values.",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8iterator"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"borrow","","",0,null],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,null],[11,"is_ascii","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_ignore_ascii_case","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",0,null],[11,"to_ascii_lowercase","","",0,null],[11,"make_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice_start","","Validate the start of a UTF-8 slice and store it. Also returns how many bytes were needed.",0,null],[11,"from_slice_start_unchecked","","A `from_slice_start()` that doesn't validate the codepoint.",0,null],[11,"from_array","","Validate the array and store it.",0,null],[11,"from_array_unchecked","","Unused bytes must be zero",0,null],[11,"len","","Result is 1...4 and identical to `.as_ref().len()` or `.as_char().len_utf8()`. There is no .is_emty() because this type is never empty.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_char","","Convert from UTF-8 to UTF-32",0,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"to_slice","","Write the internal representation to a slice, and then returns the number of bytes written.",0,null],[11,"to_array","","Expose the internal array and the number of used bytes.",0,null],[11,"as_str","","Return a `str` view of the array the codepoint is stored as. Ns an unambiguous version of `.as_ref()`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8iterator"}}],[11,"from","","",1,{"inputs":[{"name":"utf8char"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"read","","Always returns Ok",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"utf16char"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utf16char"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"utf16char"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utf16char"}}],[11,"from","","",2,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"utf8char"}],"output":{"name":"utf16char"}}],[11,"into_iter","","Iterate over the units.",2,{"inputs":[{"name":"self"}],"output":{"name":"utf16iterator"}}],[11,"as_ref","","",2,null],[11,"borrow","","",2,null],[11,"deref","","",2,null],[11,"is_ascii","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq_ignore_ascii_case","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"make_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_slice_start","","Validate and store the first UTF-16 codepoint in the slice. Also return how many units were needed.",2,null],[11,"from_slice_start_unchecked","","Store the first UTF-16 codepoint of the slice.",2,null],[11,"from_tuple","","Validate and store a UTF-16 pair as returned from `char.to_utf16_tuple()`.",2,null],[11,"from_tuple_unchecked","","Create an `Utf16Char` from a tuple as returned from `char.to_utf16_tuple()`.",2,null],[11,"len","","Returns 1 or 2. There is no `.is_emty()` because it would always return false.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_char","","Convert from UTF-16 to UTF-32",2,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"to_slice","","Write the internal representation to a slice, and then returns the number of `u16`s written.",2,null],[11,"to_tuple","","The second `u16` is used for surrogate pairs.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"utf16iterator"}}],[11,"from","","",3,{"inputs":[{"name":"char"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"utf16char"}],"output":{"name":"self"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"size_hint","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"error","","Errors returned by various conversion methods in this crate.",null,null],[3,"InvalidUtf16FirstUnit","encode_unicode::error","Cannot tell wether an `u16` needs an extra unit, because it's a trailing surrogate itself.",null,null],[4,"FromStrError","","Reasons why `Utf8Char::from_str()` failed.",null,null],[13,"MultipleCodepoints","","`Utf8Char` cannot store more than a single codepoint.",4,null],[13,"Empty","","`Utf8Char` cannot be empty.",4,null],[4,"InvalidCodepoint","","Reasons why an `u32` is not a valid UTF codepoint.",null,null],[13,"Utf16Reserved","","It's reserved for UTF-16 surrogate pairs.\"",5,null],[13,"TooHigh","","It's higher than the highest codepoint (which is 0x10ffff).",5,null],[4,"InvalidUtf8","","Reasons why a byte sequence is not valid UTF-8, excluding invalid codepoint. In sinking precedence.",null,null],[13,"FirstByte","","Something is wrong with the first byte.",6,null],[13,"NotAContinuationByte","","Thee byte at index 1...3 should be a continuation byte, but dosesn't fit the pattern 0b10xx_xxxx.",6,null],[13,"OverLong","","There are too many leading zeros: it could be a byte shorter.",6,null],[4,"InvalidUtf8FirstByte","","Reasons why a byte is not the start of a UTF-8 codepoint.",null,null],[13,"TooLongSeqence","","Sequences cannot be longer than 4 bytes. Is given for values >= 240.",7,null],[13,"ContinuationByte","","This byte belongs to a previous seqence. Is given for values between 128 and 192 (exclusive).",7,null],[4,"InvalidUtf8Slice","","Reasons why a byte slice is not valid UTF-8, in sinking precedence.",null,null],[13,"Utf8","","Something is certainly wrong with the first byte.",8,null],[13,"Codepoint","","The encoded codepoint is invalid:",8,null],[13,"TooShort","","The slice is too short; n bytes was required.",8,null],[4,"InvalidUtf16Slice","","Reasons why a slice of `u16`s doesn't start with valid UTF-16.",null,null],[13,"EmptySlice","","The slice is empty.",9,null],[13,"FirstLowSurrogate","","The first unit is a low surrogate.",9,null],[13,"MissingSecond","","The first and only unit requires a second unit.",9,null],[13,"SecondNotLowSurrogate","","The first unit requires a second one, but it's not a low surrogate.",9,null],[4,"InvalidUtf8Array","","Reasons why a byte array is not valid UTF-8, in sinking precedence.",null,null],[13,"Utf8","","Not a valid UTF-8 sequence.",10,null],[13,"Codepoint","","Not a valid unicode codepoint.",10,null],[4,"InvalidUtf16Tuple","","Reasons why one or two `u16`s are not valid UTF-16, in sinking precedence.",null,null],[13,"FirstIsTrailingSurrogate","","The first unit is a trailing/low surrogate, which is never valid.",11,null],[13,"SuperfluousSecond","","You provided a second unit, but the first one stands on its own.",11,null],[13,"MissingSecond","","The first and only unit requires a second unit.",11,null],[13,"InvalidSecond","","The first unit requires a second unit, but it's not a trailing/low surrogate.",11,null],[8,"CharExt","encode_unicode","Extension trait for `char` that adds methods for converting to and from UTF-8 or UTF-16.",null,null],[10,"to_utf8","","Get the UTF-8 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf8char"}}],[10,"to_utf16","","Get the UTF-16 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf16char"}}],[10,"iter_utf8_bytes","","Iterate over or read the one to four bytes in the UTF-8 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf8iterator"}}],[10,"iter_utf16_units","","Iterate over the one or two units in the UTF-16 representation of this codepoint.",12,{"inputs":[{"name":"self"}],"output":{"name":"utf16iterator"}}],[10,"to_utf8_array","","Convert this char to an UTF-8 array and lenght,",12,null],[10,"to_utf16_tuple","","Convert this char to UTF-16. The second `u16` is `Some` if a surrogate pair is required.",12,null],[10,"from_utf8_slice_start","","Create a `char` from the start of a UTF-8 slice, and also return how many bytes were used.",12,null],[10,"from_utf16_slice_start","","Create a `char` from the start of a UTF-16 slice, and also return how many units were used.",12,null],[10,"from_utf8_array","","Convert an UTF-8 sequence as returned from `.to_utf8_array()` into a `char`",12,null],[10,"from_utf16_tuple","","Convert a UTF-16 pair as returned from `.to_utf16_tuple()` into a `char`.",12,null],[10,"from_utf8_exact_slice_unchecked","","Convert an UTF-8 sequence into a char. The length of the slice is the length of the sequence, should be 1,2,3 or 4.",12,null],[10,"from_utf16_tuple_unchecked","","Convert a UTF-16 tuple as returned from `.to_utf16_tuple()` into a `char`.",12,null],[10,"from_u32_detailed","","Perform some extra validations compared to `char::from_u32_unchecked()`",12,{"inputs":[{"name":"u32"}],"output":{"generics":["invalidcodepoint"],"name":"result"}}],[8,"U8UtfExt","","Methods for working with `u8`s as UTF-8 bytes.",null,null],[10,"extra_utf8_bytes","","How many more bytes will you need to complete this codepoint?",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize","invalidutf8firstbyte"],"name":"result"}}],[10,"extra_utf8_bytes_unchecked","","How many more bytes will you need to complete this codepoint?",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"U16UtfExt","","Methods for working with `u16`s as UTF-16 units.",null,null],[10,"utf16_needs_extra_unit","","Will you need an extra unit to complete this codepoint?",14,{"inputs":[{"name":"self"}],"output":{"generics":["bool","invalidutf16firstunit"],"name":"result"}}],[10,"is_utf16_leading_surrogate","","Does this `u16` need another `u16` to complete a codepoint? Returns `(self & 0xfc00) == 0xd800`",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","encode_unicode::error","",15,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf16firstunit"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"invalidutf16firstunit"}],"output":{"name":"bool"}}],[11,"description","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"invalidcodepoint"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidcodepoint"}],"output":{"name":"bool"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"error_range","","Get the range of values for which this error would be given.",5,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf16tuple"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"invalidutf16tuple"}],"output":{"name":"bool"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf16slice"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"invalidutf16slice"}],"output":{"name":"bool"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fromstrerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fromstrerror"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8firstbyte"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"invalidutf8firstbyte"}],"output":{"name":"bool"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"invalidutf8"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"invalidutf8"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"invalidutf8firstbyte"}],"output":{"name":"invalidutf8"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","Returns `Some` if the error is a `InvalidUtf8FirstByte`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8array"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"invalidutf8array"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"invalidutf8array"}],"output":{"name":"bool"}}],[11,"from","","",10,{"inputs":[{"name":"invalidutf8"}],"output":{"name":"invalidutf8array"}}],[11,"from","","",10,{"inputs":[{"name":"invalidcodepoint"}],"output":{"name":"invalidutf8array"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","Always returns `Some`.",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"invalidutf8slice"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"invalidutf8slice"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"invalidutf8slice"}],"output":{"name":"bool"}}],[11,"from","","",8,{"inputs":[{"name":"invalidutf8"}],"output":{"name":"invalidutf8slice"}}],[11,"from","","",8,{"inputs":[{"name":"invalidcodepoint"}],"output":{"name":"invalidutf8slice"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Utf8Char"],[3,"Utf8Iterator"],[3,"Utf16Char"],[3,"Utf16Iterator"],[4,"FromStrError"],[4,"InvalidCodepoint"],[4,"InvalidUtf8"],[4,"InvalidUtf8FirstByte"],[4,"InvalidUtf8Slice"],[4,"InvalidUtf16Slice"],[4,"InvalidUtf8Array"],[4,"InvalidUtf16Tuple"],[8,"CharExt"],[8,"U8UtfExt"],[8,"U16UtfExt"],[3,"InvalidUtf16FirstUnit"]]};
searchIndex["encoding_rs"] = {"doc":"encoding_rs is a Gecko-oriented Free Software / Open Source implementation of the Encoding Standard in Rust. Gecko-oriented means that converting to and from UTF-16 is supported in addition to converting to and from UTF-8, that the performance and streamability goals are browser-oriented, and that FFI-friendliness is a goal.","items":[[3,"Encoding","encoding_rs","An encoding as defined in the [Encoding Standard][1].",null,null],[3,"Decoder","","A converter that decodes a byte stream into Unicode according to a character encoding in a streaming (incremental) manner.",null,null],[3,"Encoder","","A converter that encodes a Unicode stream into bytes according to a character encoding in a streaming (incremental) manner.",null,null],[4,"CoderResult","","Result of a (potentially partial) decode or encode operation with replacement.",null,null],[13,"InputEmpty","","The input was exhausted.",0,null],[13,"OutputFull","","The converter cannot produce another unit of output, because the output buffer does not have enough space left.",0,null],[4,"DecoderResult","","Result of a (potentially partial) decode operation without replacement.",null,null],[13,"InputEmpty","","The input was exhausted.",1,null],[13,"OutputFull","","The decoder cannot produce another unit of output, because the output buffer does not have enough space left.",1,null],[13,"Malformed","","The decoder encountered a malformed byte sequence.",1,null],[4,"EncoderResult","","Result of a (potentially partial) encode operation without replacement.",null,null],[13,"InputEmpty","","The input was exhausted.",2,null],[13,"OutputFull","","The encoder cannot produce another unit of output, because the output buffer does not have enough space left.",2,null],[13,"Unmappable","","The encoder encountered an unmappable character.",2,null],[0,"mem","","Functions for converting between different in-RAM representations of text and for quickly checking if the Unicode Bidirectional Algorithm can be avoided.",null,null],[4,"Latin1Bidi","encoding_rs::mem","Classification of text as Latin1 (all code points are below U+0100), left-to-right with some non-Latin1 characters or as containing at least some right-to-left characters.",null,null],[13,"Latin1","","Every character is below U+0100.",3,null],[13,"LeftToRight","","There is at least one character that's U+0100 or higher, but there are no right-to-left characters.",3,null],[13,"Bidi","","There is at least one right-to-left character.",3,null],[5,"is_ascii","","Checks whether the buffer is all-ASCII.",null,null],[5,"is_basic_latin","","Checks whether the buffer is all-Basic Latin (i.e. UTF-16 representing only ASCII characters).",null,null],[5,"is_utf8_latin1","","Checks whether the buffer is valid UTF-8 representing only code points less than or equal to U+00FF.",null,null],[5,"is_str_latin1","","Checks whether the buffer represents only code point less than or equal to U+00FF.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_utf16_latin1","","Checks whether the buffer represents only code point less than or equal to U+00FF.",null,null],[5,"is_utf8_bidi","","Checks whether a potentially-invalid UTF-8 buffer contains code points that trigger right-to-left processing.",null,null],[5,"is_str_bidi","","Checks whether a valid UTF-8 buffer contains code points that trigger right-to-left processing.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_utf16_bidi","","Checks whether a UTF-16 buffer contains code points that trigger right-to-left processing.",null,null],[5,"is_char_bidi","","Checks whether a code point triggers right-to-left processing.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_utf16_code_unit_bidi","","Checks whether a UTF-16 code unit triggers right-to-left processing.",null,{"inputs":[{"name":"u16"}],"output":{"name":"bool"}}],[5,"check_utf8_for_latin1_and_bidi","","Checks whether a potentially invalid UTF-8 buffer contains code points that trigger right-to-left processing or is all-Latin1.",null,null],[5,"check_str_for_latin1_and_bidi","","Checks whether a valid UTF-8 buffer contains code points that trigger right-to-left processing or is all-Latin1.",null,{"inputs":[{"name":"str"}],"output":{"name":"latin1bidi"}}],[5,"check_utf16_for_latin1_and_bidi","","Checks whether a potentially invalid UTF-16 buffer contains code points that trigger right-to-left processing or is all-Latin1.",null,null],[5,"convert_utf8_to_utf16","","Converts potentially-invalid UTF-8 to valid UTF-16 with errors replaced with the REPLACEMENT CHARACTER.",null,null],[5,"convert_str_to_utf16","","Converts valid UTF-8 to valid UTF-16.",null,null],[5,"convert_utf16_to_utf8","","Converts potentially-invalid UTF-16 to valid UTF-8 with errors replaced with the REPLACEMENT CHARACTER.",null,null],[5,"convert_utf16_to_str","","Converts potentially-invalid UTF-16 to valid UTF-8 with errors replaced with the REPLACEMENT CHARACTER such that the validity of the output is signaled using the Rust type system.",null,null],[5,"convert_latin1_to_utf16","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-16.",null,null],[5,"convert_latin1_to_utf8","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-8.",null,null],[5,"convert_latin1_to_str","","Converts bytes whose unsigned value is interpreted as Unicode code point (i.e. U+0000 to U+00FF, inclusive) to UTF-8 such that the validity of the output is signaled using the Rust type system.",null,null],[5,"convert_utf8_to_latin1_lossy","","If the input is valid UTF-8 representing only Unicode code points from U+0000 to U+00FF, inclusive, converts the input into output that represents the value of each code point as the unsigned byte value of each output byte.",null,null],[5,"convert_utf16_to_latin1_lossy","","If the input is valid UTF-16 representing only Unicode code points from U+0000 to U+00FF, inclusive, converts the input into output that represents the value of each code point as the unsigned byte value of each output byte.",null,null],[5,"utf16_valid_up_to","","Returns the index of the first unpaired surrogate or, if the input is valid UTF-16 in its entirety, the length of the input.",null,null],[5,"ensure_utf16_validity","","Replaces unpaired surrogates in the input with the REPLACEMENT CHARACTER.",null,null],[5,"copy_ascii_to_ascii","","Copies ASCII from source to destination up to the first non-ASCII byte (or the end of the input if it is ASCII in its entirety).",null,null],[5,"copy_ascii_to_basic_latin","","Copies ASCII from source to destination zero-extending it to UTF-16 up to the first non-ASCII byte (or the end of the input if it is ASCII in its entirety).",null,null],[5,"copy_basic_latin_to_ascii","","Copies Basic Latin from source to destination narrowing it to ASCII up to the first non-Basic Latin code unit (or the end of the input if it is Basic Latin in its entirety).",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"latin1bidi"}],"output":{"name":"bool"}}],[7,"BIG5_INIT","encoding_rs","The initializer for the Big5 encoding.",null,null],[7,"BIG5","","The Big5 encoding.",null,null],[7,"EUC_JP_INIT","","The initializer for the EUC-JP encoding.",null,null],[7,"EUC_JP","","The EUC-JP encoding.",null,null],[7,"EUC_KR_INIT","","The initializer for the EUC-KR encoding.",null,null],[7,"EUC_KR","","The EUC-KR encoding.",null,null],[7,"GBK_INIT","","The initializer for the GBK encoding.",null,null],[7,"GBK","","The GBK encoding.",null,null],[7,"IBM866_INIT","","The initializer for the IBM866 encoding.",null,null],[7,"IBM866","","The IBM866 encoding.",null,null],[7,"ISO_2022_JP_INIT","","The initializer for the ISO-2022-JP encoding.",null,null],[7,"ISO_2022_JP","","The ISO-2022-JP encoding.",null,null],[7,"ISO_8859_10_INIT","","The initializer for the ISO-8859-10 encoding.",null,null],[7,"ISO_8859_10","","The ISO-8859-10 encoding.",null,null],[7,"ISO_8859_13_INIT","","The initializer for the ISO-8859-13 encoding.",null,null],[7,"ISO_8859_13","","The ISO-8859-13 encoding.",null,null],[7,"ISO_8859_14_INIT","","The initializer for the ISO-8859-14 encoding.",null,null],[7,"ISO_8859_14","","The ISO-8859-14 encoding.",null,null],[7,"ISO_8859_15_INIT","","The initializer for the ISO-8859-15 encoding.",null,null],[7,"ISO_8859_15","","The ISO-8859-15 encoding.",null,null],[7,"ISO_8859_16_INIT","","The initializer for the ISO-8859-16 encoding.",null,null],[7,"ISO_8859_16","","The ISO-8859-16 encoding.",null,null],[7,"ISO_8859_2_INIT","","The initializer for the ISO-8859-2 encoding.",null,null],[7,"ISO_8859_2","","The ISO-8859-2 encoding.",null,null],[7,"ISO_8859_3_INIT","","The initializer for the ISO-8859-3 encoding.",null,null],[7,"ISO_8859_3","","The ISO-8859-3 encoding.",null,null],[7,"ISO_8859_4_INIT","","The initializer for the ISO-8859-4 encoding.",null,null],[7,"ISO_8859_4","","The ISO-8859-4 encoding.",null,null],[7,"ISO_8859_5_INIT","","The initializer for the ISO-8859-5 encoding.",null,null],[7,"ISO_8859_5","","The ISO-8859-5 encoding.",null,null],[7,"ISO_8859_6_INIT","","The initializer for the ISO-8859-6 encoding.",null,null],[7,"ISO_8859_6","","The ISO-8859-6 encoding.",null,null],[7,"ISO_8859_7_INIT","","The initializer for the ISO-8859-7 encoding.",null,null],[7,"ISO_8859_7","","The ISO-8859-7 encoding.",null,null],[7,"ISO_8859_8_INIT","","The initializer for the ISO-8859-8 encoding.",null,null],[7,"ISO_8859_8","","The ISO-8859-8 encoding.",null,null],[7,"ISO_8859_8_I_INIT","","The initializer for the ISO-8859-8-I encoding.",null,null],[7,"ISO_8859_8_I","","The ISO-8859-8-I encoding.",null,null],[7,"KOI8_R_INIT","","The initializer for the KOI8-R encoding.",null,null],[7,"KOI8_R","","The KOI8-R encoding.",null,null],[7,"KOI8_U_INIT","","The initializer for the KOI8-U encoding.",null,null],[7,"KOI8_U","","The KOI8-U encoding.",null,null],[7,"SHIFT_JIS_INIT","","The initializer for the Shift_JIS encoding.",null,null],[7,"SHIFT_JIS","","The Shift_JIS encoding.",null,null],[7,"UTF_16BE_INIT","","The initializer for the UTF-16BE encoding.",null,null],[7,"UTF_16BE","","The UTF-16BE encoding.",null,null],[7,"UTF_16LE_INIT","","The initializer for the UTF-16LE encoding.",null,null],[7,"UTF_16LE","","The UTF-16LE encoding.",null,null],[7,"UTF_8_INIT","","The initializer for the UTF-8 encoding.",null,null],[7,"UTF_8","","The UTF-8 encoding.",null,null],[7,"GB18030_INIT","","The initializer for the gb18030 encoding.",null,null],[7,"GB18030","","The gb18030 encoding.",null,null],[7,"MACINTOSH_INIT","","The initializer for the macintosh encoding.",null,null],[7,"MACINTOSH","","The macintosh encoding.",null,null],[7,"REPLACEMENT_INIT","","The initializer for the replacement encoding.",null,null],[7,"REPLACEMENT","","The replacement encoding.",null,null],[7,"WINDOWS_1250_INIT","","The initializer for the windows-1250 encoding.",null,null],[7,"WINDOWS_1250","","The windows-1250 encoding.",null,null],[7,"WINDOWS_1251_INIT","","The initializer for the windows-1251 encoding.",null,null],[7,"WINDOWS_1251","","The windows-1251 encoding.",null,null],[7,"WINDOWS_1252_INIT","","The initializer for the windows-1252 encoding.",null,null],[7,"WINDOWS_1252","","The windows-1252 encoding.",null,null],[7,"WINDOWS_1253_INIT","","The initializer for the windows-1253 encoding.",null,null],[7,"WINDOWS_1253","","The windows-1253 encoding.",null,null],[7,"WINDOWS_1254_INIT","","The initializer for the windows-1254 encoding.",null,null],[7,"WINDOWS_1254","","The windows-1254 encoding.",null,null],[7,"WINDOWS_1255_INIT","","The initializer for the windows-1255 encoding.",null,null],[7,"WINDOWS_1255","","The windows-1255 encoding.",null,null],[7,"WINDOWS_1256_INIT","","The initializer for the windows-1256 encoding.",null,null],[7,"WINDOWS_1256","","The windows-1256 encoding.",null,null],[7,"WINDOWS_1257_INIT","","The initializer for the windows-1257 encoding.",null,null],[7,"WINDOWS_1257","","The windows-1257 encoding.",null,null],[7,"WINDOWS_1258_INIT","","The initializer for the windows-1258 encoding.",null,null],[7,"WINDOWS_1258","","The windows-1258 encoding.",null,null],[7,"WINDOWS_874_INIT","","The initializer for the windows-874 encoding.",null,null],[7,"WINDOWS_874","","The windows-874 encoding.",null,null],[7,"X_MAC_CYRILLIC_INIT","","The initializer for the x-mac-cyrillic encoding.",null,null],[7,"X_MAC_CYRILLIC","","The x-mac-cyrillic encoding.",null,null],[7,"X_USER_DEFINED_INIT","","The initializer for the x-user-defined encoding.",null,null],[7,"X_USER_DEFINED","","The x-user-defined encoding.",null,null],[11,"for_label","","Implements the get an encoding algorithm.",4,null],[11,"for_label_no_replacement","","This method behaves the same as `for_label()`, except when `for_label()` would return `Some(REPLACEMENT)`, this method returns `None` instead.",4,null],[11,"for_bom","","Performs non-incremental BOM sniffing.",4,null],[11,"name","","Returns the name of this encoding.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"can_encode_everything","","Checks whether the output encoding of this encoding can encode every `char`. (Only true if the output encoding is UTF-8.)",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ascii_compatible","","Checks whether the bytes 0x00...0x7F map exclusively to the characters U+0000...U+007F and vice versa.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"output_encoding","","Returns the output encoding of this encoding. This is UTF-8 for UTF-16BE, UTF-16LE and replacement and the encoding itself otherwise.",4,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"decode","","Decode complete input to `Cow<'a, str>` with BOM sniffing and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"decode_with_bom_removal","","Decode complete input to `Cow<'a, str>` with BOM removal and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"decode_without_bom_handling","","Decode complete input to `Cow<'a, str>` without BOM handling and with malformed sequences replaced with the REPLACEMENT CHARACTER when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"decode_without_bom_handling_and_without_replacement","","Decode complete input to `Cow<'a, str>` without BOM handling and with malformed sequences treated as fatal when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"encode","","Encode complete input to `Cow<'a, [u8]>` with unmappable characters replaced with decimal numeric character references when the entire input is available as a single buffer (i.e. the end of the buffer marks the end of the stream).",4,null],[11,"new_decoder","","Instantiates a new decoder for this encoding with BOM sniffing enabled.",4,{"inputs":[{"name":"self"}],"output":{"name":"decoder"}}],[11,"new_decoder_with_bom_removal","","Instantiates a new decoder for this encoding with BOM removal.",4,{"inputs":[{"name":"self"}],"output":{"name":"decoder"}}],[11,"new_decoder_without_bom_handling","","Instantiates a new decoder for this encoding with BOM handling disabled.",4,{"inputs":[{"name":"self"}],"output":{"name":"decoder"}}],[11,"new_encoder","","Instantiates a new encoder for the output encoding of this encoding.",4,{"inputs":[{"name":"self"}],"output":{"name":"encoder"}}],[11,"utf8_valid_up_to","","Validates UTF-8.",4,null],[11,"ascii_valid_up_to","","Validates ASCII.",4,null],[11,"iso_2022_jp_ascii_valid_up_to","","Validates ISO-2022-JP ASCII-state data.",4,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"coderresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"decoderresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"decoderresult"}],"output":{"name":"bool"}}],[11,"encoding","","The `Encoding` this `Decoder` is for.",5,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"max_utf8_buffer_length","","Query the worst-case UTF-8 output size with replacement.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max_utf8_buffer_length_without_replacement","","Query the worst-case UTF-8 output size without replacement.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"decode_to_utf8","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER.",5,null],[11,"decode_to_str","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER with type system signaling of UTF-8 validity.",5,null],[11,"decode_to_string","","Incrementally decode a byte stream into UTF-8 with malformed sequences replaced with the REPLACEMENT CHARACTER using a `String` receiver.",5,null],[11,"decode_to_utf8_without_replacement","","Incrementally decode a byte stream into UTF-8 without replacement.",5,null],[11,"decode_to_str_without_replacement","","Incrementally decode a byte stream into UTF-8 with type system signaling of UTF-8 validity.",5,null],[11,"decode_to_string_without_replacement","","Incrementally decode a byte stream into UTF-8 using a `String` receiver.",5,null],[11,"max_utf16_buffer_length","","Query the worst-case UTF-16 output size (with or without replacement).",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"decode_to_utf16","","Incrementally decode a byte stream into UTF-16 with malformed sequences replaced with the REPLACEMENT CHARACTER.",5,null],[11,"decode_to_utf16_without_replacement","","Incrementally decode a byte stream into UTF-16 without replacement.",5,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"encoderresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"encoderresult"}],"output":{"name":"bool"}}],[11,"encoding","","The `Encoding` this `Encoder` is for.",6,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"has_pending_state","","Returns `true` if this is an ISO-2022-JP encoder that's not in the ASCII state and `false` otherwise.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"max_buffer_length_from_utf8_if_no_unmappables","","Query the worst-case output size when encoding from UTF-8 with replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max_buffer_length_from_utf8_without_replacement","","Query the worst-case output size when encoding from UTF-8 without replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"encode_from_utf8","","Incrementally encode into byte stream from UTF-8 with unmappable characters replaced with HTML (decimal) numeric character references.",6,null],[11,"encode_from_utf8_to_vec","","Incrementally encode into byte stream from UTF-8 with unmappable characters replaced with HTML (decimal) numeric character references.",6,null],[11,"encode_from_utf8_without_replacement","","Incrementally encode into byte stream from UTF-8 without replacement.",6,null],[11,"encode_from_utf8_to_vec_without_replacement","","Incrementally encode into byte stream from UTF-8 without replacement.",6,null],[11,"max_buffer_length_from_utf16_if_no_unmappables","","Query the worst-case output size when encoding from UTF-16 with replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"max_buffer_length_from_utf16_without_replacement","","Query the worst-case output size when encoding from UTF-16 without replacement.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize"],"name":"option"}}],[11,"encode_from_utf16","","Incrementally encode into byte stream from UTF-16 with unmappable characters replaced with HTML (decimal) numeric character references.",6,null],[11,"encode_from_utf16_without_replacement","","Incrementally encode into byte stream from UTF-16 without replacement.",6,null]],"paths":[[4,"CoderResult"],[4,"DecoderResult"],[4,"EncoderResult"],[4,"Latin1Bidi"],[3,"Encoding"],[3,"Decoder"],[3,"Encoder"]]};
searchIndex["envy"] = {"doc":"envy is a library for deserializing env vars into typesafe structs","items":[[3,"Prefixed","envy","A type which filters env vars with a prefixed for use as serde field inputs",null,null],[4,"Error","","Types of errors that may result from failed attempts to deserialize a type from env vars",null,null],[13,"MissingValue","","",0,null],[13,"Custom","","",0,null],[5,"from_env","","Deserializes a type based on information based on env variables",null,{"inputs":[],"output":{"name":"result"}}],[5,"from_iter","","Deserializes a type based on an iterable of `(String, String)` representing keys and values",null,{"inputs":[{"name":"iter"}],"output":{"name":"result"}}],[5,"prefixed","","produces a instance of `Prefixed` for prefixing env variable names",null,{"inputs":[{"name":"c"}],"output":{"name":"prefixed"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"missing_field","","",0,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[6,"Result","","A type result type specific to `envy::Errors`",null,null],[11,"from_env","","Deserializes a type based on prefixed env varables",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_iter","","Deserializes a type based on prefixed (String, String) tuples",1,{"inputs":[{"name":"self"},{"name":"iter"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Prefixed"]]};
searchIndex["example_module"] = {"doc":"","items":[[3,"ExampleModule","example_module","",null,null],[0,"example_module","","",null,null],[3,"AcceptTopicSuggestionInput","example_module::example_module","",null,null],[12,"clientMutationId","","",0,null],[12,"name","","",0,null],[12,"repositoryId","","",0,null],[3,"AddCommentInput","","",null,null],[12,"body","","",1,null],[12,"clientMutationId","","",1,null],[12,"subjectId","","",1,null],[3,"AddProjectCardInput","","",null,null],[12,"clientMutationId","","",2,null],[12,"contentId","","",2,null],[12,"note","","",2,null],[12,"projectColumnId","","",2,null],[3,"AddProjectColumnInput","","",null,null],[12,"clientMutationId","","",3,null],[12,"name","","",3,null],[12,"projectId","","",3,null],[3,"AddPullRequestReviewCommentInput","","",null,null],[12,"body","","",4,null],[12,"clientMutationId","","",4,null],[12,"commitOID","","",4,null],[12,"inReplyTo","","",4,null],[12,"path","","",4,null],[12,"position","","",4,null],[12,"pullRequestReviewId","","",4,null],[3,"AddPullRequestReviewInput","","",null,null],[12,"body","","",5,null],[12,"clientMutationId","","",5,null],[12,"comments","","",5,null],[12,"commitOID","","",5,null],[12,"event","","",5,null],[12,"pullRequestId","","",5,null],[3,"AddReactionInput","","",null,null],[12,"clientMutationId","","",6,null],[12,"content","","",6,null],[12,"subjectId","","",6,null],[3,"AddStarInput","","",null,null],[12,"clientMutationId","","",7,null],[12,"starrableId","","",7,null],[3,"CommitAuthor","","",null,null],[12,"emails","","",8,null],[12,"id","","",8,null],[3,"CreateProjectInput","","",null,null],[12,"body","","",9,null],[12,"clientMutationId","","",9,null],[12,"name","","",9,null],[12,"ownerId","","",9,null],[3,"DeclineTopicSuggestionInput","","",null,null],[12,"clientMutationId","","",10,null],[12,"name","","",10,null],[12,"reason","","",10,null],[12,"repositoryId","","",10,null],[3,"DeleteProjectCardInput","","",null,null],[12,"cardId","","",11,null],[12,"clientMutationId","","",11,null],[3,"DeleteProjectColumnInput","","",null,null],[12,"clientMutationId","","",12,null],[12,"columnId","","",12,null],[3,"DeleteProjectInput","","",null,null],[12,"clientMutationId","","",13,null],[12,"projectId","","",13,null],[3,"DeletePullRequestReviewInput","","",null,null],[12,"clientMutationId","","",14,null],[12,"pullRequestReviewId","","",14,null],[3,"DismissPullRequestReviewInput","","",null,null],[12,"clientMutationId","","",15,null],[12,"message","","",15,null],[12,"pullRequestReviewId","","",15,null],[3,"DraftPullRequestReviewComment","","",null,null],[12,"body","","",16,null],[12,"path","","",16,null],[12,"position","","",16,null],[3,"GistOrder","","",null,null],[12,"direction","","",17,null],[12,"field","","",17,null],[3,"IssueOrder","","",null,null],[12,"direction","","",18,null],[12,"field","","",18,null],[3,"LanguageOrder","","",null,null],[12,"direction","","",19,null],[12,"field","","",19,null],[3,"LockLockableInput","","",null,null],[12,"clientMutationId","","",20,null],[12,"lockReason","","",20,null],[12,"lockableId","","",20,null],[3,"MilestoneOrder","","",null,null],[12,"direction","","",21,null],[12,"field","","",21,null],[3,"MoveProjectCardInput","","",null,null],[12,"afterCardId","","",22,null],[12,"cardId","","",22,null],[12,"clientMutationId","","",22,null],[12,"columnId","","",22,null],[3,"MoveProjectColumnInput","","",null,null],[12,"afterColumnId","","",23,null],[12,"clientMutationId","","",23,null],[12,"columnId","","",23,null],[3,"ProjectOrder","","",null,null],[12,"direction","","",24,null],[12,"field","","",24,null],[3,"ReactionOrder","","",null,null],[12,"direction","","",25,null],[12,"field","","",25,null],[3,"RefOrder","","",null,null],[12,"direction","","",26,null],[12,"field","","",26,null],[3,"ReleaseOrder","","",null,null],[12,"direction","","",27,null],[12,"field","","",27,null],[3,"RemoveOutsideCollaboratorInput","","",null,null],[12,"clientMutationId","","",28,null],[12,"organizationId","","",28,null],[12,"userId","","",28,null],[3,"RemoveReactionInput","","",null,null],[12,"clientMutationId","","",29,null],[12,"content","","",29,null],[12,"subjectId","","",29,null],[3,"RemoveStarInput","","",null,null],[12,"clientMutationId","","",30,null],[12,"starrableId","","",30,null],[3,"RepositoryOrder","","",null,null],[12,"direction","","",31,null],[12,"field","","",31,null],[3,"RequestReviewsInput","","",null,null],[12,"clientMutationId","","",32,null],[12,"pullRequestId","","",32,null],[12,"teamIds","","",32,null],[12,"union","","",32,null],[12,"userIds","","",32,null],[3,"StarOrder","","",null,null],[12,"direction","","",33,null],[12,"field","","",33,null],[3,"SubmitPullRequestReviewInput","","",null,null],[12,"body","","",34,null],[12,"clientMutationId","","",34,null],[12,"event","","",34,null],[12,"pullRequestReviewId","","",34,null],[3,"TeamMemberOrder","","",null,null],[12,"direction","","",35,null],[12,"field","","",35,null],[3,"TeamOrder","","",null,null],[12,"direction","","",36,null],[12,"field","","",36,null],[3,"TeamRepositoryOrder","","",null,null],[12,"direction","","",37,null],[12,"field","","",37,null],[3,"UpdateProjectCardInput","","",null,null],[12,"clientMutationId","","",38,null],[12,"note","","",38,null],[12,"projectCardId","","",38,null],[3,"UpdateProjectColumnInput","","",null,null],[12,"clientMutationId","","",39,null],[12,"name","","",39,null],[12,"projectColumnId","","",39,null],[3,"UpdateProjectInput","","",null,null],[12,"body","","",40,null],[12,"clientMutationId","","",40,null],[12,"name","","",40,null],[12,"projectId","","",40,null],[12,"public","","",40,null],[12,"state","","",40,null],[3,"UpdatePullRequestReviewCommentInput","","",null,null],[12,"body","","",41,null],[12,"clientMutationId","","",41,null],[12,"pullRequestReviewCommentId","","",41,null],[3,"UpdatePullRequestReviewInput","","",null,null],[12,"body","","",42,null],[12,"clientMutationId","","",42,null],[12,"pullRequestReviewId","","",42,null],[3,"UpdateSubscriptionInput","","",null,null],[12,"clientMutationId","","",43,null],[12,"state","","",43,null],[12,"subscribableId","","",43,null],[3,"UpdateTopicsInput","","",null,null],[12,"clientMutationId","","",44,null],[12,"repositoryId","","",44,null],[12,"topicNames","","",44,null],[3,"RustOctocatReposRepositoryIssuesEdgesNodeLabelsEdgesNode","","",null,null],[12,"name","","",45,null],[3,"RustOctocatReposRepositoryIssuesEdgesNodeLabelsEdges","","",null,null],[12,"node","","",46,null],[3,"RustOctocatReposRepositoryIssuesEdgesNodeLabels","","",null,null],[12,"edges","","",47,null],[3,"RustOctocatReposRepositoryIssuesEdgesNode","","",null,null],[12,"title","","",48,null],[12,"url","","",48,null],[12,"labels","","",48,null],[3,"RustOctocatReposRepositoryIssuesEdges","","",null,null],[12,"node","","",49,null],[3,"RustOctocatReposRepositoryIssues","","",null,null],[12,"edges","","",50,null],[3,"RustOctocatReposRepository","","",null,null],[12,"issues","","",51,null],[3,"Variables","","",null,null],[3,"ResponseData","","",null,null],[12,"repository","","",52,null],[4,"CollaboratorAffiliation","","",null,null],[13,"ALL","","",53,null],[13,"DIRECT","","",53,null],[13,"OUTSIDE","","",53,null],[13,"Other","","",53,null],[4,"CommentAuthorAssociation","","",null,null],[13,"COLLABORATOR","","",54,null],[13,"CONTRIBUTOR","","",54,null],[13,"FIRST_TIMER","","",54,null],[13,"FIRST_TIME_CONTRIBUTOR","","",54,null],[13,"MEMBER","","",54,null],[13,"NONE","","",54,null],[13,"OWNER","","",54,null],[13,"Other","","",54,null],[4,"CommentCannotUpdateReason","","",null,null],[13,"INSUFFICIENT_ACCESS","","",55,null],[13,"LOCKED","","",55,null],[13,"LOGIN_REQUIRED","","",55,null],[13,"MAINTENANCE","","",55,null],[13,"VERIFIED_EMAIL_REQUIRED","","",55,null],[13,"Other","","",55,null],[4,"DefaultRepositoryPermissionField","","",null,null],[13,"ADMIN","","",56,null],[13,"NONE","","",56,null],[13,"READ","","",56,null],[13,"WRITE","","",56,null],[13,"Other","","",56,null],[4,"DeploymentState","","",null,null],[13,"ABANDONED","","",57,null],[13,"ACTIVE","","",57,null],[13,"DESTROYED","","",57,null],[13,"ERROR","","",57,null],[13,"FAILURE","","",57,null],[13,"INACTIVE","","",57,null],[13,"PENDING","","",57,null],[13,"Other","","",57,null],[4,"DeploymentStatusState","","",null,null],[13,"ERROR","","",58,null],[13,"FAILURE","","",58,null],[13,"INACTIVE","","",58,null],[13,"PENDING","","",58,null],[13,"SUCCESS","","",58,null],[13,"Other","","",58,null],[4,"GistOrderField","","",null,null],[13,"CREATED_AT","","",59,null],[13,"PUSHED_AT","","",59,null],[13,"UPDATED_AT","","",59,null],[13,"Other","","",59,null],[4,"GistPrivacy","","",null,null],[13,"ALL","","",60,null],[13,"PUBLIC","","",60,null],[13,"SECRET","","",60,null],[13,"Other","","",60,null],[4,"GitSignatureState","","",null,null],[13,"BAD_EMAIL","","",61,null],[13,"EXPIRED_KEY","","",61,null],[13,"GPGVERIFY_ERROR","","",61,null],[13,"GPGVERIFY_UNAVAILABLE","","",61,null],[13,"INVALID","","",61,null],[13,"MALFORMED_SIG","","",61,null],[13,"NOT_SIGNING_KEY","","",61,null],[13,"NO_USER","","",61,null],[13,"OCSP_ERROR","","",61,null],[13,"OCSP_PENDING","","",61,null],[13,"OCSP_REVOKED","","",61,null],[13,"UNKNOWN_KEY","","",61,null],[13,"UNKNOWN_SIG_TYPE","","",61,null],[13,"UNSIGNED","","",61,null],[13,"UNVERIFIED_EMAIL","","",61,null],[13,"VALID","","",61,null],[13,"Other","","",61,null],[4,"IssueOrderField","","",null,null],[13,"COMMENTS","","",62,null],[13,"CREATED_AT","","",62,null],[13,"UPDATED_AT","","",62,null],[13,"Other","","",62,null],[4,"IssuePubSubTopic","","",null,null],[13,"MARKASREAD","","",63,null],[13,"TIMELINE","","",63,null],[13,"UPDATED","","",63,null],[13,"Other","","",63,null],[4,"IssueState","","",null,null],[13,"CLOSED","","",64,null],[13,"OPEN","","",64,null],[13,"Other","","",64,null],[4,"LanguageOrderField","","",null,null],[13,"SIZE","","",65,null],[13,"Other","","",65,null],[4,"LockReason","","",null,null],[13,"OFF_TOPIC","","",66,null],[13,"RESOLVED","","",66,null],[13,"SPAM","","",66,null],[13,"TOO_HEATED","","",66,null],[13,"Other","","",66,null],[4,"MergeableState","","",null,null],[13,"CONFLICTING","","",67,null],[13,"MERGEABLE","","",67,null],[13,"UNKNOWN","","",67,null],[13,"Other","","",67,null],[4,"MilestoneOrderField","","",null,null],[13,"CREATED_AT","","",68,null],[13,"DUE_DATE","","",68,null],[13,"NUMBER","","",68,null],[13,"UPDATED_AT","","",68,null],[13,"Other","","",68,null],[4,"MilestoneState","","",null,null],[13,"CLOSED","","",69,null],[13,"OPEN","","",69,null],[13,"Other","","",69,null],[4,"OrderDirection","","",null,null],[13,"ASC","","",70,null],[13,"DESC","","",70,null],[13,"Other","","",70,null],[4,"OrganizationInvitationRole","","",null,null],[13,"ADMIN","","",71,null],[13,"BILLING_MANAGER","","",71,null],[13,"DIRECT_MEMBER","","",71,null],[13,"REINSTATE","","",71,null],[13,"Other","","",71,null],[4,"OrganizationInvitationType","","",null,null],[13,"EMAIL","","",72,null],[13,"USER","","",72,null],[13,"Other","","",72,null],[4,"ProjectCardState","","",null,null],[13,"CONTENT_ONLY","","",73,null],[13,"NOTE_ONLY","","",73,null],[13,"REDACTED","","",73,null],[13,"Other","","",73,null],[4,"ProjectOrderField","","",null,null],[13,"CREATED_AT","","",74,null],[13,"NAME","","",74,null],[13,"UPDATED_AT","","",74,null],[13,"Other","","",74,null],[4,"ProjectState","","",null,null],[13,"CLOSED","","",75,null],[13,"OPEN","","",75,null],[13,"Other","","",75,null],[4,"PullRequestPubSubTopic","","",null,null],[13,"HEAD_REF","","",76,null],[13,"MARKASREAD","","",76,null],[13,"TIMELINE","","",76,null],[13,"UPDATED","","",76,null],[13,"Other","","",76,null],[4,"PullRequestReviewEvent","","",null,null],[13,"APPROVE","","",77,null],[13,"COMMENT","","",77,null],[13,"DISMISS","","",77,null],[13,"REQUEST_CHANGES","","",77,null],[13,"Other","","",77,null],[4,"PullRequestReviewState","","",null,null],[13,"APPROVED","","",78,null],[13,"CHANGES_REQUESTED","","",78,null],[13,"COMMENTED","","",78,null],[13,"DISMISSED","","",78,null],[13,"PENDING","","",78,null],[13,"Other","","",78,null],[4,"PullRequestState","","",null,null],[13,"CLOSED","","",79,null],[13,"MERGED","","",79,null],[13,"OPEN","","",79,null],[13,"Other","","",79,null],[4,"ReactionContent","","",null,null],[13,"CONFUSED","","",80,null],[13,"HEART","","",80,null],[13,"HOORAY","","",80,null],[13,"LAUGH","","",80,null],[13,"THUMBS_DOWN","","",80,null],[13,"THUMBS_UP","","",80,null],[13,"Other","","",80,null],[4,"ReactionOrderField","","",null,null],[13,"CREATED_AT","","",81,null],[13,"Other","","",81,null],[4,"RefOrderField","","",null,null],[13,"ALPHABETICAL","","",82,null],[13,"TAG_COMMIT_DATE","","",82,null],[13,"Other","","",82,null],[4,"ReleaseOrderField","","",null,null],[13,"CREATED_AT","","",83,null],[13,"NAME","","",83,null],[13,"Other","","",83,null],[4,"RepositoryAffiliation","","",null,null],[13,"COLLABORATOR","","",84,null],[13,"ORGANIZATION_MEMBER","","",84,null],[13,"OWNER","","",84,null],[13,"Other","","",84,null],[4,"RepositoryCollaboratorAffiliation","","",null,null],[13,"ALL","","",85,null],[13,"OUTSIDE","","",85,null],[13,"Other","","",85,null],[4,"RepositoryContributionType","","",null,null],[13,"COMMIT","","",86,null],[13,"ISSUE","","",86,null],[13,"PULL_REQUEST","","",86,null],[13,"PULL_REQUEST_REVIEW","","",86,null],[13,"REPOSITORY","","",86,null],[13,"Other","","",86,null],[4,"RepositoryLockReason","","",null,null],[13,"BILLING","","",87,null],[13,"MIGRATING","","",87,null],[13,"MOVING","","",87,null],[13,"RENAME","","",87,null],[13,"Other","","",87,null],[4,"RepositoryOrderField","","",null,null],[13,"CREATED_AT","","",88,null],[13,"NAME","","",88,null],[13,"PUSHED_AT","","",88,null],[13,"STARGAZERS","","",88,null],[13,"UPDATED_AT","","",88,null],[13,"Other","","",88,null],[4,"RepositoryPermission","","",null,null],[13,"ADMIN","","",89,null],[13,"READ","","",89,null],[13,"WRITE","","",89,null],[13,"Other","","",89,null],[4,"RepositoryPrivacy","","",null,null],[13,"PRIVATE","","",90,null],[13,"PUBLIC","","",90,null],[13,"Other","","",90,null],[4,"SearchType","","",null,null],[13,"ISSUE","","",91,null],[13,"REPOSITORY","","",91,null],[13,"USER","","",91,null],[13,"Other","","",91,null],[4,"StarOrderField","","",null,null],[13,"STARRED_AT","","",92,null],[13,"Other","","",92,null],[4,"StatusState","","",null,null],[13,"ERROR","","",93,null],[13,"EXPECTED","","",93,null],[13,"FAILURE","","",93,null],[13,"PENDING","","",93,null],[13,"SUCCESS","","",93,null],[13,"Other","","",93,null],[4,"SubscriptionState","","",null,null],[13,"IGNORED","","",94,null],[13,"SUBSCRIBED","","",94,null],[13,"UNSUBSCRIBED","","",94,null],[13,"Other","","",94,null],[4,"TeamMemberOrderField","","",null,null],[13,"CREATED_AT","","",95,null],[13,"LOGIN","","",95,null],[13,"Other","","",95,null],[4,"TeamMemberRole","","",null,null],[13,"MAINTAINER","","",96,null],[13,"MEMBER","","",96,null],[13,"Other","","",96,null],[4,"TeamMembershipType","","",null,null],[13,"ALL","","",97,null],[13,"CHILD_TEAM","","",97,null],[13,"IMMEDIATE","","",97,null],[13,"Other","","",97,null],[4,"TeamOrderField","","",null,null],[13,"NAME","","",98,null],[13,"Other","","",98,null],[4,"TeamPrivacy","","",null,null],[13,"SECRET","","",99,null],[13,"VISIBLE","","",99,null],[13,"Other","","",99,null],[4,"TeamRepositoryOrderField","","",null,null],[13,"CREATED_AT","","",100,null],[13,"NAME","","",100,null],[13,"PERMISSION","","",100,null],[13,"PUSHED_AT","","",100,null],[13,"STARGAZERS","","",100,null],[13,"UPDATED_AT","","",100,null],[13,"Other","","",100,null],[4,"TeamRole","","",null,null],[13,"ADMIN","","",101,null],[13,"MEMBER","","",101,null],[13,"Other","","",101,null],[4,"TopicSuggestionDeclineReason","","",null,null],[13,"NOT_RELEVANT","","",102,null],[13,"PERSONAL_PREFERENCE","","",102,null],[13,"TOO_GENERAL","","",102,null],[13,"TOO_SPECIFIC","","",102,null],[13,"Other","","",102,null],[17,"QUERY","","",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",53,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",53,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",54,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",54,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",55,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",55,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",56,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",56,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",57,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",57,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",58,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",58,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",59,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",59,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",60,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",60,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",61,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",61,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",62,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",62,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",63,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",63,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",64,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",64,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",65,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",65,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",66,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",66,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",67,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",67,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",68,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",68,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",69,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",69,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",70,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",70,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",71,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",71,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",72,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",72,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",73,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",73,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",74,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",74,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",75,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",75,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",76,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",76,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",77,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",77,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",78,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",78,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",79,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",79,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",80,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",80,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",81,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",81,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",82,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",82,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",83,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",83,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",84,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",84,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",85,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",85,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",86,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",86,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",87,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",87,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",88,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",88,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",89,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",89,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",90,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",90,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",91,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",91,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",92,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",92,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",93,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",93,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",94,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",94,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",95,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",95,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",96,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",96,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",97,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",97,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",98,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",98,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",99,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",99,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",100,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",100,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",101,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",101,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",102,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",102,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"build_query","example_module","",103,null]],"paths":[[3,"AcceptTopicSuggestionInput"],[3,"AddCommentInput"],[3,"AddProjectCardInput"],[3,"AddProjectColumnInput"],[3,"AddPullRequestReviewCommentInput"],[3,"AddPullRequestReviewInput"],[3,"AddReactionInput"],[3,"AddStarInput"],[3,"CommitAuthor"],[3,"CreateProjectInput"],[3,"DeclineTopicSuggestionInput"],[3,"DeleteProjectCardInput"],[3,"DeleteProjectColumnInput"],[3,"DeleteProjectInput"],[3,"DeletePullRequestReviewInput"],[3,"DismissPullRequestReviewInput"],[3,"DraftPullRequestReviewComment"],[3,"GistOrder"],[3,"IssueOrder"],[3,"LanguageOrder"],[3,"LockLockableInput"],[3,"MilestoneOrder"],[3,"MoveProjectCardInput"],[3,"MoveProjectColumnInput"],[3,"ProjectOrder"],[3,"ReactionOrder"],[3,"RefOrder"],[3,"ReleaseOrder"],[3,"RemoveOutsideCollaboratorInput"],[3,"RemoveReactionInput"],[3,"RemoveStarInput"],[3,"RepositoryOrder"],[3,"RequestReviewsInput"],[3,"StarOrder"],[3,"SubmitPullRequestReviewInput"],[3,"TeamMemberOrder"],[3,"TeamOrder"],[3,"TeamRepositoryOrder"],[3,"UpdateProjectCardInput"],[3,"UpdateProjectColumnInput"],[3,"UpdateProjectInput"],[3,"UpdatePullRequestReviewCommentInput"],[3,"UpdatePullRequestReviewInput"],[3,"UpdateSubscriptionInput"],[3,"UpdateTopicsInput"],[3,"RustOctocatReposRepositoryIssuesEdgesNodeLabelsEdgesNode"],[3,"RustOctocatReposRepositoryIssuesEdgesNodeLabelsEdges"],[3,"RustOctocatReposRepositoryIssuesEdgesNodeLabels"],[3,"RustOctocatReposRepositoryIssuesEdgesNode"],[3,"RustOctocatReposRepositoryIssuesEdges"],[3,"RustOctocatReposRepositoryIssues"],[3,"RustOctocatReposRepository"],[3,"ResponseData"],[4,"CollaboratorAffiliation"],[4,"CommentAuthorAssociation"],[4,"CommentCannotUpdateReason"],[4,"DefaultRepositoryPermissionField"],[4,"DeploymentState"],[4,"DeploymentStatusState"],[4,"GistOrderField"],[4,"GistPrivacy"],[4,"GitSignatureState"],[4,"IssueOrderField"],[4,"IssuePubSubTopic"],[4,"IssueState"],[4,"LanguageOrderField"],[4,"LockReason"],[4,"MergeableState"],[4,"MilestoneOrderField"],[4,"MilestoneState"],[4,"OrderDirection"],[4,"OrganizationInvitationRole"],[4,"OrganizationInvitationType"],[4,"ProjectCardState"],[4,"ProjectOrderField"],[4,"ProjectState"],[4,"PullRequestPubSubTopic"],[4,"PullRequestReviewEvent"],[4,"PullRequestReviewState"],[4,"PullRequestState"],[4,"ReactionContent"],[4,"ReactionOrderField"],[4,"RefOrderField"],[4,"ReleaseOrderField"],[4,"RepositoryAffiliation"],[4,"RepositoryCollaboratorAffiliation"],[4,"RepositoryContributionType"],[4,"RepositoryLockReason"],[4,"RepositoryOrderField"],[4,"RepositoryPermission"],[4,"RepositoryPrivacy"],[4,"SearchType"],[4,"StarOrderField"],[4,"StatusState"],[4,"SubscriptionState"],[4,"TeamMemberOrderField"],[4,"TeamMemberRole"],[4,"TeamMembershipType"],[4,"TeamOrderField"],[4,"TeamPrivacy"],[4,"TeamRepositoryOrderField"],[4,"TeamRole"],[4,"TopicSuggestionDeclineReason"],[3,"ExampleModule"]]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library.","items":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this crate.",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,{"i":[{"n":"d"}],"o":{"n":"error"}}],[11,"new","","Constructs a new backtrace. This will only create a real backtrace if the crate is compiled in std mode and the `RUST_BACKTRACE` environmental variable is activated.",0,{"o":{"n":"backtrace"}}],[11,"default","","",0,{"o":{"n":"backtrace"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"compat"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"compat"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"compat"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"o":{"n":"compat"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Unwraps this into the inner error.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Creates a new context without an underlying error message.",2,{"i":[{"n":"d"}],"o":{"n":"context"}}],[11,"get_context","","Returns a reference to the context provided with this error.",2,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"cause","","",2,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",2,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"d"}],"o":{"n":"context"}}],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement `Fail`.",3,{"i":[{"n":"e"}],"o":{"n":"self"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"f"}],"o":{"n":"error"}}],[11,"cause","","Returns a reference to the underlying cause of this `Error`. Unlike the method on `Fail`, this does not return an `Option`. The `Error` type always has an underlying failure.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,{"i":[{"n":"self"}],"o":{"n":"backtrace"}}],[11,"context","","Provides context for this `Error`.",4,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"context"}}],[11,"compat","","Wraps `Error` in a compatibility type.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"compat"}}],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail` type.",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"root_cause","","Returns the \"root cause\" of this error - the last value in the cause chain which does not return an underlying `cause`.",4,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail` type by reference.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail` type by mutable reference.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"causes","","Returns a iterator over the causes of the `Error`, beginning with the failure returned by the `cause` method and ending with the failure returned by `root_cause`.",4,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with older error handling APIs that expect `std::error::Error`.",5,{"i":[{"n":"self"}],"o":{"g":["compat"],"n":"result"}}],[10,"context","","Wraps the error type in a context type.",5,{"i":[{"n":"self"},{"n":"d"}],"o":{"g":["context"],"n":"result"}}],[10,"with_context","","Wraps the error type in a context type generated by looking at the error value.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["context"],"n":"result"}}],[8,"Fail","","The `Fail` trait.",null,null],[11,"cause","","Returns a reference to the underlying cause of this failure, if it is an error that wraps other errors.",6,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this failure, if it carries one.",6,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"context","","Provides context for this failure.",6,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"context"}}],[11,"compat","","Wraps this failure in a compatibility wrapper that implements `std::error::Error`.",6,{"i":[{"n":"self"}],"o":{"n":"compat"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by reference.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by mutable reference.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"root_cause","","Returns the \"root cause\" of this `Fail` - the last value in the cause chain which does not return an underlying `cause`.",6,{"i":[{"n":"self"}],"o":{"n":"fail"}}],[11,"causes","","Returns a iterator over the causes of this `Fail` with itself as the first item and the `root_cause` as the final item.",6,{"i":[{"n":"self"}],"o":{"n":"causes"}}],[11,"next","","",7,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is not satisfied.",null,null],[14,"format_err","","Constructs an `Error` using the standard string interpolation syntax.",null,null]],"paths":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"] = {"doc":"","items":[[5,"Fail","failure_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"o":{"n":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"i":[{"n":"u64"}],"o":{"n":"fnvhasher"}}],[11,"finish","","",0,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["foreign_types"] = {"doc":"A framework for Rust wrappers over C APIs.","items":[[14,"foreign_type","foreign_types","A macro to easily define wrappers for foreign types.",null,null]],"paths":[]};
searchIndex["foreign_types_shared"] = {"doc":"Internal crate used by foreign-types","items":[[3,"Opaque","foreign_types_shared","An opaque type used to define `ForeignTypeRef` types.",null,null],[8,"ForeignType","","A type implemented by wrappers over foreign types.",null,null],[16,"CType","","The raw C type.",0,null],[16,"Ref","","The type representing a reference to this type.",0,null],[10,"from_ptr","","Constructs an instance of this type from its raw type.",0,null],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",0,null],[8,"ForeignTypeRef","","A trait implemented by types which reference borrowed foreign types.",null,null],[16,"CType","","The raw C type.",1,null],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",1,null],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",1,null],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",1,null]],"paths":[[8,"ForeignType"],[8,"ForeignTypeRef"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success value of this `Async` with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"from","","",8,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,null],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",35,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",36,null],[16,"Item","","The item that the future may resolve with.",36,null],[16,"Error","","The error that the future may resolve with.",36,null],[10,"into_future","","Consumes this object and produces a future.",36,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",37,null],[16,"Error","","Possible errors during conversion.",37,null],[10,"future_from","","Consume the given value, beginning the conversion.",37,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Create a new `ExecuteError`",39,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",39,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","futures","Asynchronous streams",null,null],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",40,null],[12,"1","","",40,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",41,null],[13,"Second","","An item from the second stream",41,null],[13,"Both","","Items from both streams",41,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",46,null],[11,"poll_complete","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",65,null],[11,"poll_complete","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",72,null],[11,"poll_complete","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",77,null],[11,"poll_complete","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_send","","",80,null],[11,"poll_complete","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",80,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"poll"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"next","","",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"start_send","","",84,null],[11,"poll_complete","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"futures_unordered","","An unbounded set of futures.",null,null],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"poll","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll","","",87,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",88,null],[16,"Error","","The type of error this stream may generate.",88,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",88,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",null,null],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",null,null],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",null,null],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",null,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",90,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",90,null],[11,"poll_complete","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",90,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",93,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",95,null],[11,"poll_complete","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",95,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"start_send","","",96,null],[11,"poll_complete","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",96,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",97,null],[11,"poll_complete","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",97,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,null],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",99,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,null],[10,"start_send","","Begin the process of sending a value to the sink.",99,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"init","","Initialize the `futures` task system.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",100,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Run","futures::executor","Units of work submitted to an `Executor`, currently only created internally.",null,null],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",null,null],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",null,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",101,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",102,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",null,null],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",104,{"inputs":[{"name":"self"}],"output":{"name":"notifyhandle"}}],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",104,{"inputs":[{"name":"self"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",105,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["canceled"],"name":"poll"}}],[11,"drop","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",109,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"TrySendError","","Error type returned from `try_send`",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"trysenderror"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["trysenderror"],"name":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"start_send","","",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"start_send","","",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",110,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",112,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",113,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",117,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","futures::sync","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BiLock` protecting the provided data.",118,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",118,{"inputs":[{"name":"self"}],"output":{"generics":["bilockguard"],"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",118,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",118,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["bilockacquired"],"name":"poll"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",121,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[0,"unsync","futures","Future-aware single-threaded synchronization",null,null],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",null,null],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedSender","","The transmission end of an unbounded channel.",null,null],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",null,null],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",null,null],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",null,null],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",null,{"inputs":[{"name":"s"},{"name":"e"},{"name":"usize"}],"output":{"name":"spawnhandle"}}],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",null,{"inputs":[{"name":"s"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"drop","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",123,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",123,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"drop","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_send","","",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"startsend"}}],[11,"poll_complete","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"close","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["senderror"],"name":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",124,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","Closes the receiving half",125,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",null,null],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"SpawnHandle","","Handle returned from the `spawn` function.",null,null],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",null,{"inputs":[{"name":"f"},{"name":"e"}],"output":{"name":"spawnhandle"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Completes this oneshot with a successful result.",129,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",130,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",130,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",131,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",132,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",null,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",133,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",133,{"inputs":[{"name":"self"},{"name":"task"}],"output":null}],[11,"notify","","Notifies the task that last called `register`.",133,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"poll_future","futures::executor","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",135,{"inputs":[{"name":"self"},{"generics":["executor"],"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["option"],"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",135,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",135,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",135,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",136,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","futures::task","",137,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",137,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","futures::executor","",138,{"inputs":[{"name":"arc"}],"output":{"name":"notifyhandle"}}],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",103,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","futures::task","",139,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",139,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",135,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",135,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"name":"poll"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `NotifyHandle` directly.",138,null],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",138,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",138,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",138,{"inputs":[{"name":"t"}],"output":{"name":"notifyhandle"}}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["futures_cpupool"] = {"doc":"A simple crate for executing work on a thread pool, and getting back a future.","items":[[3,"CpuPool","futures_cpupool","A thread pool intended to run CPU intensive work.",null,null],[3,"Builder","","Thread pool configuration object",null,null],[3,"CpuFuture","","The type of future returned from the `CpuPool::spawn` function, which proxies the futures running on the thread pool.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new thread pool with `size` worker threads associated with it.",0,{"inputs":[{"name":"usize"}],"output":{"name":"cpupool"}}],[11,"new_num_cpus","","Creates a new thread pool with a number of workers equal to the number of CPUs on the host.",0,{"inputs":[],"output":{"name":"cpupool"}}],[11,"spawn","","Spawns a future to run on this thread pool, returning a future representing the produced value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"spawn_fn","","Spawns a closure on this thread pool.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"cpufuture"}}],[11,"execute","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"forget","","Drop this future without canceling the underlying future.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a builder a number of workers equal to the number of CPUs on the host.",1,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set size of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"stack_size","","Set stack size of threads in the pool.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"name_prefix","","Set thread name prefix of a future CpuPool",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` right after each thread is started but before running any jobs on it.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each worker thread stops.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"create","","Create CpuPool with configured parameters",1,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}]],"paths":[[3,"CpuPool"],[3,"Builder"],[3,"CpuFuture"]]};
searchIndex["graphql_client"] = {"doc":"","items":[[3,"GraphQLQueryBody","graphql_client","",null,null],[12,"variables","","",0,null],[12,"query","","",0,null],[3,"GraphQLError","","",null,null],[12,"path","","",1,null],[3,"GraphQLResponse","","",null,null],[12,"data","","",2,null],[12,"errors","","",2,null],[8,"GraphQLQuery","","",null,null],[16,"Variables","","",3,null],[16,"ResponseData","","",3,null],[10,"build_query","","Produce a GraphQL query struct that can be JSON serialized and sent to a GraphQL API.",3,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"GraphQLQueryBody"],[3,"GraphQLError"],[3,"GraphQLResponse"],[8,"GraphQLQuery"]]};
searchIndex["graphql_parser"] = {"doc":"Graphql Parser ==============","items":[[3,"Pos","graphql_parser","Original position of element in source code",null,null],[12,"line","","One-based line number",0,null],[12,"column","","One-based column number",0,null],[3,"Style","","A configuration of formatting style",null,null],[5,"parse_query","","Parses a piece of query language and returns an AST",null,{"i":[{"n":"str"}],"o":{"g":["document","parseerror"],"n":"result"}}],[5,"parse_schema","","Parses a piece of schema language and returns an AST",null,{"i":[{"n":"str"}],"o":{"g":["document","parseerror"],"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"bool"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"style"}}],[11,"default","","",1,{"o":{"n":"style"}}],[11,"indent","","Change the number of spaces used for indentation",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"self"}}],[11,"partial_cmp","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"n":"bool"}}],[11,"le","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"n":"bool"}}],[11,"gt","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"n":"bool"}}],[11,"ge","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"n":"bool"}}],[11,"cmp","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"n":"ordering"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"pos"}],"o":{"n":"bool"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"pos"}}],[11,"default","","",0,{"o":{"n":"pos"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"query","","Query language AST and parsing utilities",null,null],[3,"ParseError","graphql_parser::query","Error parsing query",null,null],[3,"Directive","","",null,null],[12,"position","","",2,null],[12,"name","","",2,null],[12,"arguments","","",2,null],[3,"Number","","This represents integer number",null,null],[3,"Document","","Root of query data",null,null],[12,"definitions","","",3,null],[3,"FragmentDefinition","","",null,null],[12,"position","","",4,null],[12,"name","","",4,null],[12,"type_condition","","",4,null],[12,"directives","","",4,null],[12,"selection_set","","",4,null],[3,"Query","","",null,null],[12,"position","","",5,null],[12,"name","","",5,null],[12,"variable_definitions","","",5,null],[12,"directives","","",5,null],[12,"selection_set","","",5,null],[3,"Mutation","","",null,null],[12,"position","","",6,null],[12,"name","","",6,null],[12,"variable_definitions","","",6,null],[12,"directives","","",6,null],[12,"selection_set","","",6,null],[3,"Subscription","","",null,null],[12,"position","","",7,null],[12,"name","","",7,null],[12,"variable_definitions","","",7,null],[12,"directives","","",7,null],[12,"selection_set","","",7,null],[3,"SelectionSet","","",null,null],[12,"span","","",8,null],[12,"items","","",8,null],[3,"VariableDefinition","","",null,null],[12,"position","","",9,null],[12,"name","","",9,null],[12,"var_type","","",9,null],[12,"default_value","","",9,null],[3,"Field","","",null,null],[12,"position","","",10,null],[12,"alias","","",10,null],[12,"name","","",10,null],[12,"arguments","","",10,null],[12,"directives","","",10,null],[12,"selection_set","","",10,null],[3,"FragmentSpread","","",null,null],[12,"position","","",11,null],[12,"fragment_name","","",11,null],[12,"directives","","",11,null],[3,"InlineFragment","","",null,null],[12,"position","","",12,null],[12,"type_condition","","",12,null],[12,"directives","","",12,null],[12,"selection_set","","",12,null],[4,"Value","","",null,null],[13,"Variable","","",13,null],[13,"Int","","",13,null],[13,"Float","","",13,null],[13,"String","","",13,null],[13,"Boolean","","",13,null],[13,"Null","","",13,null],[13,"Enum","","",13,null],[13,"List","","",13,null],[13,"Object","","",13,null],[4,"Type","","",null,null],[13,"NamedType","","",14,null],[13,"ListType","","",14,null],[13,"NonNullType","","",14,null],[4,"Definition","","",null,null],[13,"Operation","","",15,null],[13,"Fragment","","",15,null],[4,"OperationDefinition","","",null,null],[13,"SelectionSet","","",16,null],[13,"Query","","",16,null],[13,"Mutation","","",16,null],[13,"Subscription","","",16,null],[4,"Selection","","",null,null],[13,"Field","","",17,null],[13,"FragmentSpread","","",17,null],[13,"InlineFragment","","",17,null],[4,"TypeCondition","","",null,null],[13,"On","","",18,null],[5,"parse_query","","Parses a piece of query language and returns an AST",null,{"i":[{"n":"str"}],"o":{"g":["document","parseerror"],"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"document"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"document"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"document"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"definition"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"definition"}],"o":{"n":"bool"}}],[11,"ne","","",15,{"i":[{"n":"self"},{"n":"definition"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fragmentdefinition"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"fragmentdefinition"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"fragmentdefinition"}],"o":{"n":"bool"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"operationdefinition"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"operationdefinition"}],"o":{"n":"bool"}}],[11,"ne","","",16,{"i":[{"n":"self"},{"n":"operationdefinition"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"query"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"query"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"query"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"mutation"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"mutation"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"mutation"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"subscription"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"subscription"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"subscription"}],"o":{"n":"bool"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"selectionset"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"selectionset"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"selectionset"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"variabledefinition"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"variabledefinition"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"variabledefinition"}],"o":{"n":"bool"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"selection"}}],[11,"eq","","",17,{"i":[{"n":"self"},{"n":"selection"}],"o":{"n":"bool"}}],[11,"ne","","",17,{"i":[{"n":"self"},{"n":"selection"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"eq","","",10,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",10,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"fragmentspread"}}],[11,"eq","","",11,{"i":[{"n":"self"},{"n":"fragmentspread"}],"o":{"n":"bool"}}],[11,"ne","","",11,{"i":[{"n":"self"},{"n":"fragmentspread"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"typecondition"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"typecondition"}],"o":{"n":"bool"}}],[11,"ne","","",18,{"i":[{"n":"self"},{"n":"typecondition"}],"o":{"n":"bool"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"inlinefragment"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"inlinefragment"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"inlinefragment"}],"o":{"n":"bool"}}],[11,"cause","","",19,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",19,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",19,{"i":[{"g":["token","token","pos"],"n":"errors"}],"o":{"n":"parseerror"}}],[11,"format","","Format a document according to style",3,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"string"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Name","","An alias for string, used where graphql expects a name",null,null],[0,"schema","graphql_parser","Schema definition language AST and utility",null,null],[3,"Directive","graphql_parser::schema","",null,null],[12,"position","","",2,null],[12,"name","","",2,null],[12,"arguments","","",2,null],[3,"Document","","",null,null],[12,"definitions","","",20,null],[3,"SchemaDefinition","","",null,null],[12,"position","","",21,null],[12,"directives","","",21,null],[12,"query","","",21,null],[12,"mutation","","",21,null],[12,"subscription","","",21,null],[3,"ScalarType","","",null,null],[12,"position","","",22,null],[12,"description","","",22,null],[12,"name","","",22,null],[12,"directives","","",22,null],[3,"ScalarTypeExtension","","",null,null],[12,"position","","",23,null],[12,"name","","",23,null],[12,"directives","","",23,null],[3,"ObjectType","","",null,null],[12,"position","","",24,null],[12,"description","","",24,null],[12,"name","","",24,null],[12,"implements_interfaces","","",24,null],[12,"directives","","",24,null],[12,"fields","","",24,null],[3,"ObjectTypeExtension","","",null,null],[12,"position","","",25,null],[12,"name","","",25,null],[12,"implements_interfaces","","",25,null],[12,"directives","","",25,null],[12,"fields","","",25,null],[3,"Field","","",null,null],[12,"position","","",26,null],[12,"description","","",26,null],[12,"name","","",26,null],[12,"arguments","","",26,null],[12,"field_type","","",26,null],[12,"directives","","",26,null],[3,"InputValue","","",null,null],[12,"position","","",27,null],[12,"description","","",27,null],[12,"name","","",27,null],[12,"value_type","","",27,null],[12,"default_value","","",27,null],[12,"directives","","",27,null],[3,"InterfaceType","","",null,null],[12,"position","","",28,null],[12,"description","","",28,null],[12,"name","","",28,null],[12,"directives","","",28,null],[12,"fields","","",28,null],[3,"InterfaceTypeExtension","","",null,null],[12,"position","","",29,null],[12,"name","","",29,null],[12,"directives","","",29,null],[12,"fields","","",29,null],[3,"UnionType","","",null,null],[12,"position","","",30,null],[12,"description","","",30,null],[12,"name","","",30,null],[12,"directives","","",30,null],[12,"types","","",30,null],[3,"UnionTypeExtension","","",null,null],[12,"position","","",31,null],[12,"name","","",31,null],[12,"directives","","",31,null],[12,"types","","",31,null],[3,"EnumType","","",null,null],[12,"position","","",32,null],[12,"description","","",32,null],[12,"name","","",32,null],[12,"directives","","",32,null],[12,"values","","",32,null],[3,"EnumValue","","",null,null],[12,"position","","",33,null],[12,"description","","",33,null],[12,"name","","",33,null],[12,"directives","","",33,null],[3,"EnumTypeExtension","","",null,null],[12,"position","","",34,null],[12,"name","","",34,null],[12,"directives","","",34,null],[12,"values","","",34,null],[3,"InputObjectType","","",null,null],[12,"position","","",35,null],[12,"description","","",35,null],[12,"name","","",35,null],[12,"directives","","",35,null],[12,"fields","","",35,null],[3,"InputObjectTypeExtension","","",null,null],[12,"position","","",36,null],[12,"name","","",36,null],[12,"directives","","",36,null],[12,"fields","","",36,null],[3,"DirectiveDefinition","","",null,null],[12,"position","","",37,null],[12,"description","","",37,null],[12,"name","","",37,null],[12,"arguments","","",37,null],[12,"locations","","",37,null],[3,"InvalidDirectiveLocation","","",null,null],[3,"ParseError","","Error parsing schema",null,null],[4,"Type","","",null,null],[13,"NamedType","","",14,null],[13,"ListType","","",14,null],[13,"NonNullType","","",14,null],[4,"Value","","",null,null],[13,"Variable","","",13,null],[13,"Int","","",13,null],[13,"Float","","",13,null],[13,"String","","",13,null],[13,"Boolean","","",13,null],[13,"Null","","",13,null],[13,"Enum","","",13,null],[13,"List","","",13,null],[13,"Object","","",13,null],[4,"Definition","","",null,null],[13,"SchemaDefinition","","",38,null],[13,"TypeDefinition","","",38,null],[13,"TypeExtension","","",38,null],[13,"DirectiveDefinition","","",38,null],[4,"TypeDefinition","","",null,null],[13,"Scalar","","",39,null],[13,"Object","","",39,null],[13,"Interface","","",39,null],[13,"Union","","",39,null],[13,"Enum","","",39,null],[13,"InputObject","","",39,null],[4,"TypeExtension","","",null,null],[13,"Scalar","","",40,null],[13,"Object","","",40,null],[13,"Interface","","",40,null],[13,"Union","","",40,null],[13,"Enum","","",40,null],[13,"InputObject","","",40,null],[4,"DirectiveLocation","","",null,null],[13,"Query","","",41,null],[13,"Mutation","","",41,null],[13,"Subscription","","",41,null],[13,"Field","","",41,null],[13,"FragmentDefinition","","",41,null],[13,"FragmentSpread","","",41,null],[13,"InlineFragment","","",41,null],[13,"Schema","","",41,null],[13,"Scalar","","",41,null],[13,"Object","","",41,null],[13,"FieldDefinition","","",41,null],[13,"ArgumentDefinition","","",41,null],[13,"Interface","","",41,null],[13,"Union","","",41,null],[13,"Enum","","",41,null],[13,"EnumValue","","",41,null],[13,"InputObject","","",41,null],[13,"InputFieldDefinition","","",41,null],[5,"parse_schema","","Parses a piece of schema language and returns an AST",null,{"i":[{"n":"str"}],"o":{"g":["document","parseerror"],"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"document"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"document"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"document"}],"o":{"n":"bool"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"definition"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"definition"}],"o":{"n":"bool"}}],[11,"ne","","",38,{"i":[{"n":"self"},{"n":"definition"}],"o":{"n":"bool"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"schemadefinition"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"schemadefinition"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"schemadefinition"}],"o":{"n":"bool"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"typedefinition"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"typedefinition"}],"o":{"n":"bool"}}],[11,"ne","","",39,{"i":[{"n":"self"},{"n":"typedefinition"}],"o":{"n":"bool"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"typeextension"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"typeextension"}],"o":{"n":"bool"}}],[11,"ne","","",40,{"i":[{"n":"self"},{"n":"typeextension"}],"o":{"n":"bool"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"scalartype"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"scalartype"}],"o":{"n":"bool"}}],[11,"ne","","",22,{"i":[{"n":"self"},{"n":"scalartype"}],"o":{"n":"bool"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"scalartypeextension"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"scalartypeextension"}],"o":{"n":"bool"}}],[11,"ne","","",23,{"i":[{"n":"self"},{"n":"scalartypeextension"}],"o":{"n":"bool"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"objecttype"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"objecttype"}],"o":{"n":"bool"}}],[11,"ne","","",24,{"i":[{"n":"self"},{"n":"objecttype"}],"o":{"n":"bool"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"objecttypeextension"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"objecttypeextension"}],"o":{"n":"bool"}}],[11,"ne","","",25,{"i":[{"n":"self"},{"n":"objecttypeextension"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"ne","","",26,{"i":[{"n":"self"},{"n":"field"}],"o":{"n":"bool"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"inputvalue"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"inputvalue"}],"o":{"n":"bool"}}],[11,"ne","","",27,{"i":[{"n":"self"},{"n":"inputvalue"}],"o":{"n":"bool"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"interfacetype"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"interfacetype"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"interfacetype"}],"o":{"n":"bool"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"interfacetypeextension"}}],[11,"eq","","",29,{"i":[{"n":"self"},{"n":"interfacetypeextension"}],"o":{"n":"bool"}}],[11,"ne","","",29,{"i":[{"n":"self"},{"n":"interfacetypeextension"}],"o":{"n":"bool"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"uniontype"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"uniontype"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"uniontype"}],"o":{"n":"bool"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"uniontypeextension"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"uniontypeextension"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"uniontypeextension"}],"o":{"n":"bool"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"enumtype"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"enumtype"}],"o":{"n":"bool"}}],[11,"ne","","",32,{"i":[{"n":"self"},{"n":"enumtype"}],"o":{"n":"bool"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"enumvalue"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"enumvalue"}],"o":{"n":"bool"}}],[11,"ne","","",33,{"i":[{"n":"self"},{"n":"enumvalue"}],"o":{"n":"bool"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"enumtypeextension"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"enumtypeextension"}],"o":{"n":"bool"}}],[11,"ne","","",34,{"i":[{"n":"self"},{"n":"enumtypeextension"}],"o":{"n":"bool"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"inputobjecttype"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"inputobjecttype"}],"o":{"n":"bool"}}],[11,"ne","","",35,{"i":[{"n":"self"},{"n":"inputobjecttype"}],"o":{"n":"bool"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"inputobjecttypeextension"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"inputobjecttypeextension"}],"o":{"n":"bool"}}],[11,"ne","","",36,{"i":[{"n":"self"},{"n":"inputobjecttypeextension"}],"o":{"n":"bool"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"directivelocation"}}],[11,"eq","","",41,{"i":[{"n":"self"},{"n":"directivelocation"}],"o":{"n":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"directivedefinition"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"directivedefinition"}],"o":{"n":"bool"}}],[11,"ne","","",37,{"i":[{"n":"self"},{"n":"directivedefinition"}],"o":{"n":"bool"}}],[11,"as_str","","Returns GraphQL syntax compatible name of the directive",41,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_query","","Returns `true` if this location is for queries (execution)",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_schema","","Returns `true` if this location is for schema",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cause","","",42,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",42,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_str","","",41,{"i":[{"n":"str"}],"o":{"g":["directivelocation","invaliddirectivelocation"],"n":"result"}}],[11,"cause","","",43,{"i":[{"n":"self"}],"o":{"g":["fail"],"n":"option"}}],[11,"backtrace","","",43,{"i":[{"n":"self"}],"o":{"g":["backtrace"],"n":"option"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",43,{"i":[{"g":["token","token","pos"],"n":"errors"}],"o":{"n":"parseerror"}}],[11,"format","","Format a document according to style",20,{"i":[{"n":"self"},{"n":"style"}],"o":{"n":"string"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Name","","An alias for string, used where graphql expects a name",null,null],[6,"NamedType","","",null,null],[11,"fmt","graphql_parser::query","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"directive"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"directive"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"directive"}],"o":{"n":"bool"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"number"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"ne","","",44,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"ne","","",14,{"i":[{"n":"self"},{"n":"type"}],"o":{"n":"bool"}}],[11,"as_i64","","Returns a number as i64 if it fits the type",44,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"from","","",44,{"i":[{"n":"i32"}],"o":{"n":"self"}}]],"paths":[[3,"Pos"],[3,"Style"],[3,"Directive"],[3,"Document"],[3,"FragmentDefinition"],[3,"Query"],[3,"Mutation"],[3,"Subscription"],[3,"SelectionSet"],[3,"VariableDefinition"],[3,"Field"],[3,"FragmentSpread"],[3,"InlineFragment"],[4,"Value"],[4,"Type"],[4,"Definition"],[4,"OperationDefinition"],[4,"Selection"],[4,"TypeCondition"],[3,"ParseError"],[3,"Document"],[3,"SchemaDefinition"],[3,"ScalarType"],[3,"ScalarTypeExtension"],[3,"ObjectType"],[3,"ObjectTypeExtension"],[3,"Field"],[3,"InputValue"],[3,"InterfaceType"],[3,"InterfaceTypeExtension"],[3,"UnionType"],[3,"UnionTypeExtension"],[3,"EnumType"],[3,"EnumValue"],[3,"EnumTypeExtension"],[3,"InputObjectType"],[3,"InputObjectTypeExtension"],[3,"DirectiveDefinition"],[4,"Definition"],[4,"TypeDefinition"],[4,"TypeExtension"],[4,"DirectiveLocation"],[3,"InvalidDirectiveLocation"],[3,"ParseError"],[3,"Number"]]};
searchIndex["graphql_query_derive"] = {"doc":"","items":[[5,"graphql_query_derive","graphql_query_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["graphql_query_github_example"] = {"doc":"","items":[[0,"query1","graphql_query_github_example","",null,null],[3,"AcceptTopicSuggestionInput","graphql_query_github_example::query1","",null,null],[12,"clientMutationId","","",0,null],[12,"name","","",0,null],[12,"repositoryId","","",0,null],[3,"AddCommentInput","","",null,null],[12,"body","","",1,null],[12,"clientMutationId","","",1,null],[12,"subjectId","","",1,null],[3,"AddProjectCardInput","","",null,null],[12,"clientMutationId","","",2,null],[12,"contentId","","",2,null],[12,"note","","",2,null],[12,"projectColumnId","","",2,null],[3,"AddProjectColumnInput","","",null,null],[12,"clientMutationId","","",3,null],[12,"name","","",3,null],[12,"projectId","","",3,null],[3,"AddPullRequestReviewCommentInput","","",null,null],[12,"body","","",4,null],[12,"clientMutationId","","",4,null],[12,"commitOID","","",4,null],[12,"inReplyTo","","",4,null],[12,"path","","",4,null],[12,"position","","",4,null],[12,"pullRequestReviewId","","",4,null],[3,"AddPullRequestReviewInput","","",null,null],[12,"body","","",5,null],[12,"clientMutationId","","",5,null],[12,"comments","","",5,null],[12,"commitOID","","",5,null],[12,"event","","",5,null],[12,"pullRequestId","","",5,null],[3,"AddReactionInput","","",null,null],[12,"clientMutationId","","",6,null],[12,"content","","",6,null],[12,"subjectId","","",6,null],[3,"AddStarInput","","",null,null],[12,"clientMutationId","","",7,null],[12,"starrableId","","",7,null],[3,"CommitAuthor","","",null,null],[12,"emails","","",8,null],[12,"id","","",8,null],[3,"CreateProjectInput","","",null,null],[12,"body","","",9,null],[12,"clientMutationId","","",9,null],[12,"name","","",9,null],[12,"ownerId","","",9,null],[3,"DeclineTopicSuggestionInput","","",null,null],[12,"clientMutationId","","",10,null],[12,"name","","",10,null],[12,"reason","","",10,null],[12,"repositoryId","","",10,null],[3,"DeleteProjectCardInput","","",null,null],[12,"cardId","","",11,null],[12,"clientMutationId","","",11,null],[3,"DeleteProjectColumnInput","","",null,null],[12,"clientMutationId","","",12,null],[12,"columnId","","",12,null],[3,"DeleteProjectInput","","",null,null],[12,"clientMutationId","","",13,null],[12,"projectId","","",13,null],[3,"DeletePullRequestReviewInput","","",null,null],[12,"clientMutationId","","",14,null],[12,"pullRequestReviewId","","",14,null],[3,"DismissPullRequestReviewInput","","",null,null],[12,"clientMutationId","","",15,null],[12,"message","","",15,null],[12,"pullRequestReviewId","","",15,null],[3,"DraftPullRequestReviewComment","","",null,null],[12,"body","","",16,null],[12,"path","","",16,null],[12,"position","","",16,null],[3,"GistOrder","","",null,null],[12,"direction","","",17,null],[12,"field","","",17,null],[3,"IssueOrder","","",null,null],[12,"direction","","",18,null],[12,"field","","",18,null],[3,"LanguageOrder","","",null,null],[12,"direction","","",19,null],[12,"field","","",19,null],[3,"LockLockableInput","","",null,null],[12,"clientMutationId","","",20,null],[12,"lockReason","","",20,null],[12,"lockableId","","",20,null],[3,"MilestoneOrder","","",null,null],[12,"direction","","",21,null],[12,"field","","",21,null],[3,"MoveProjectCardInput","","",null,null],[12,"afterCardId","","",22,null],[12,"cardId","","",22,null],[12,"clientMutationId","","",22,null],[12,"columnId","","",22,null],[3,"MoveProjectColumnInput","","",null,null],[12,"afterColumnId","","",23,null],[12,"clientMutationId","","",23,null],[12,"columnId","","",23,null],[3,"ProjectOrder","","",null,null],[12,"direction","","",24,null],[12,"field","","",24,null],[3,"ReactionOrder","","",null,null],[12,"direction","","",25,null],[12,"field","","",25,null],[3,"RefOrder","","",null,null],[12,"direction","","",26,null],[12,"field","","",26,null],[3,"ReleaseOrder","","",null,null],[12,"direction","","",27,null],[12,"field","","",27,null],[3,"RemoveOutsideCollaboratorInput","","",null,null],[12,"clientMutationId","","",28,null],[12,"organizationId","","",28,null],[12,"userId","","",28,null],[3,"RemoveReactionInput","","",null,null],[12,"clientMutationId","","",29,null],[12,"content","","",29,null],[12,"subjectId","","",29,null],[3,"RemoveStarInput","","",null,null],[12,"clientMutationId","","",30,null],[12,"starrableId","","",30,null],[3,"RepositoryOrder","","",null,null],[12,"direction","","",31,null],[12,"field","","",31,null],[3,"RequestReviewsInput","","",null,null],[12,"clientMutationId","","",32,null],[12,"pullRequestId","","",32,null],[12,"teamIds","","",32,null],[12,"union","","",32,null],[12,"userIds","","",32,null],[3,"StarOrder","","",null,null],[12,"direction","","",33,null],[12,"field","","",33,null],[3,"SubmitPullRequestReviewInput","","",null,null],[12,"body","","",34,null],[12,"clientMutationId","","",34,null],[12,"event","","",34,null],[12,"pullRequestReviewId","","",34,null],[3,"TeamMemberOrder","","",null,null],[12,"direction","","",35,null],[12,"field","","",35,null],[3,"TeamOrder","","",null,null],[12,"direction","","",36,null],[12,"field","","",36,null],[3,"TeamRepositoryOrder","","",null,null],[12,"direction","","",37,null],[12,"field","","",37,null],[3,"UpdateProjectCardInput","","",null,null],[12,"clientMutationId","","",38,null],[12,"note","","",38,null],[12,"projectCardId","","",38,null],[3,"UpdateProjectColumnInput","","",null,null],[12,"clientMutationId","","",39,null],[12,"name","","",39,null],[12,"projectColumnId","","",39,null],[3,"UpdateProjectInput","","",null,null],[12,"body","","",40,null],[12,"clientMutationId","","",40,null],[12,"name","","",40,null],[12,"projectId","","",40,null],[12,"public","","",40,null],[12,"state","","",40,null],[3,"UpdatePullRequestReviewCommentInput","","",null,null],[12,"body","","",41,null],[12,"clientMutationId","","",41,null],[12,"pullRequestReviewCommentId","","",41,null],[3,"UpdatePullRequestReviewInput","","",null,null],[12,"body","","",42,null],[12,"clientMutationId","","",42,null],[12,"pullRequestReviewId","","",42,null],[3,"UpdateSubscriptionInput","","",null,null],[12,"clientMutationId","","",43,null],[12,"state","","",43,null],[12,"subscribableId","","",43,null],[3,"UpdateTopicsInput","","",null,null],[12,"clientMutationId","","",44,null],[12,"repositoryId","","",44,null],[12,"topicNames","","",44,null],[3,"RustRepoViewRepositoryStargazers","","",null,null],[12,"total_count","","",45,null],[3,"RustRepoViewRepositoryIssuesNodesComments","","",null,null],[12,"total_count","","",46,null],[3,"RustRepoViewRepositoryIssuesNodes","","",null,null],[12,"title","","",47,null],[12,"comments","","",47,null],[3,"RustRepoViewRepositoryIssues","","",null,null],[12,"nodes","","",48,null],[3,"RustRepoViewRepositoryPullRequestsNodesCommits","","",null,null],[12,"total_count","","",49,null],[3,"RustRepoViewRepositoryPullRequestsNodes","","",null,null],[12,"title","","",50,null],[12,"commits","","",50,null],[3,"RustRepoViewRepositoryPullRequests","","",null,null],[12,"nodes","","",51,null],[3,"RustRepoViewRepository","","",null,null],[12,"stargazers","","",52,null],[12,"issues","","",52,null],[12,"pull_requests","","",52,null],[3,"Variables","","",null,null],[12,"owner","","",53,null],[12,"name","","",53,null],[3,"ResponseData","","",null,null],[12,"repository","","",54,null],[4,"CollaboratorAffiliation","","",null,null],[13,"ALL","","",55,null],[13,"DIRECT","","",55,null],[13,"OUTSIDE","","",55,null],[13,"Other","","",55,null],[4,"CommentAuthorAssociation","","",null,null],[13,"COLLABORATOR","","",56,null],[13,"CONTRIBUTOR","","",56,null],[13,"FIRST_TIMER","","",56,null],[13,"FIRST_TIME_CONTRIBUTOR","","",56,null],[13,"MEMBER","","",56,null],[13,"NONE","","",56,null],[13,"OWNER","","",56,null],[13,"Other","","",56,null],[4,"CommentCannotUpdateReason","","",null,null],[13,"INSUFFICIENT_ACCESS","","",57,null],[13,"LOCKED","","",57,null],[13,"LOGIN_REQUIRED","","",57,null],[13,"MAINTENANCE","","",57,null],[13,"VERIFIED_EMAIL_REQUIRED","","",57,null],[13,"Other","","",57,null],[4,"DefaultRepositoryPermissionField","","",null,null],[13,"ADMIN","","",58,null],[13,"NONE","","",58,null],[13,"READ","","",58,null],[13,"WRITE","","",58,null],[13,"Other","","",58,null],[4,"DeploymentState","","",null,null],[13,"ABANDONED","","",59,null],[13,"ACTIVE","","",59,null],[13,"DESTROYED","","",59,null],[13,"ERROR","","",59,null],[13,"FAILURE","","",59,null],[13,"INACTIVE","","",59,null],[13,"PENDING","","",59,null],[13,"Other","","",59,null],[4,"DeploymentStatusState","","",null,null],[13,"ERROR","","",60,null],[13,"FAILURE","","",60,null],[13,"INACTIVE","","",60,null],[13,"PENDING","","",60,null],[13,"SUCCESS","","",60,null],[13,"Other","","",60,null],[4,"GistOrderField","","",null,null],[13,"CREATED_AT","","",61,null],[13,"PUSHED_AT","","",61,null],[13,"UPDATED_AT","","",61,null],[13,"Other","","",61,null],[4,"GistPrivacy","","",null,null],[13,"ALL","","",62,null],[13,"PUBLIC","","",62,null],[13,"SECRET","","",62,null],[13,"Other","","",62,null],[4,"GitSignatureState","","",null,null],[13,"BAD_EMAIL","","",63,null],[13,"EXPIRED_KEY","","",63,null],[13,"GPGVERIFY_ERROR","","",63,null],[13,"GPGVERIFY_UNAVAILABLE","","",63,null],[13,"INVALID","","",63,null],[13,"MALFORMED_SIG","","",63,null],[13,"NOT_SIGNING_KEY","","",63,null],[13,"NO_USER","","",63,null],[13,"OCSP_ERROR","","",63,null],[13,"OCSP_PENDING","","",63,null],[13,"OCSP_REVOKED","","",63,null],[13,"UNKNOWN_KEY","","",63,null],[13,"UNKNOWN_SIG_TYPE","","",63,null],[13,"UNSIGNED","","",63,null],[13,"UNVERIFIED_EMAIL","","",63,null],[13,"VALID","","",63,null],[13,"Other","","",63,null],[4,"IssueOrderField","","",null,null],[13,"COMMENTS","","",64,null],[13,"CREATED_AT","","",64,null],[13,"UPDATED_AT","","",64,null],[13,"Other","","",64,null],[4,"IssuePubSubTopic","","",null,null],[13,"MARKASREAD","","",65,null],[13,"TIMELINE","","",65,null],[13,"UPDATED","","",65,null],[13,"Other","","",65,null],[4,"IssueState","","",null,null],[13,"CLOSED","","",66,null],[13,"OPEN","","",66,null],[13,"Other","","",66,null],[4,"LanguageOrderField","","",null,null],[13,"SIZE","","",67,null],[13,"Other","","",67,null],[4,"LockReason","","",null,null],[13,"OFF_TOPIC","","",68,null],[13,"RESOLVED","","",68,null],[13,"SPAM","","",68,null],[13,"TOO_HEATED","","",68,null],[13,"Other","","",68,null],[4,"MergeableState","","",null,null],[13,"CONFLICTING","","",69,null],[13,"MERGEABLE","","",69,null],[13,"UNKNOWN","","",69,null],[13,"Other","","",69,null],[4,"MilestoneOrderField","","",null,null],[13,"CREATED_AT","","",70,null],[13,"DUE_DATE","","",70,null],[13,"NUMBER","","",70,null],[13,"UPDATED_AT","","",70,null],[13,"Other","","",70,null],[4,"MilestoneState","","",null,null],[13,"CLOSED","","",71,null],[13,"OPEN","","",71,null],[13,"Other","","",71,null],[4,"OrderDirection","","",null,null],[13,"ASC","","",72,null],[13,"DESC","","",72,null],[13,"Other","","",72,null],[4,"OrganizationInvitationRole","","",null,null],[13,"ADMIN","","",73,null],[13,"BILLING_MANAGER","","",73,null],[13,"DIRECT_MEMBER","","",73,null],[13,"REINSTATE","","",73,null],[13,"Other","","",73,null],[4,"OrganizationInvitationType","","",null,null],[13,"EMAIL","","",74,null],[13,"USER","","",74,null],[13,"Other","","",74,null],[4,"ProjectCardState","","",null,null],[13,"CONTENT_ONLY","","",75,null],[13,"NOTE_ONLY","","",75,null],[13,"REDACTED","","",75,null],[13,"Other","","",75,null],[4,"ProjectOrderField","","",null,null],[13,"CREATED_AT","","",76,null],[13,"NAME","","",76,null],[13,"UPDATED_AT","","",76,null],[13,"Other","","",76,null],[4,"ProjectState","","",null,null],[13,"CLOSED","","",77,null],[13,"OPEN","","",77,null],[13,"Other","","",77,null],[4,"PullRequestPubSubTopic","","",null,null],[13,"HEAD_REF","","",78,null],[13,"MARKASREAD","","",78,null],[13,"TIMELINE","","",78,null],[13,"UPDATED","","",78,null],[13,"Other","","",78,null],[4,"PullRequestReviewEvent","","",null,null],[13,"APPROVE","","",79,null],[13,"COMMENT","","",79,null],[13,"DISMISS","","",79,null],[13,"REQUEST_CHANGES","","",79,null],[13,"Other","","",79,null],[4,"PullRequestReviewState","","",null,null],[13,"APPROVED","","",80,null],[13,"CHANGES_REQUESTED","","",80,null],[13,"COMMENTED","","",80,null],[13,"DISMISSED","","",80,null],[13,"PENDING","","",80,null],[13,"Other","","",80,null],[4,"PullRequestState","","",null,null],[13,"CLOSED","","",81,null],[13,"MERGED","","",81,null],[13,"OPEN","","",81,null],[13,"Other","","",81,null],[4,"ReactionContent","","",null,null],[13,"CONFUSED","","",82,null],[13,"HEART","","",82,null],[13,"HOORAY","","",82,null],[13,"LAUGH","","",82,null],[13,"THUMBS_DOWN","","",82,null],[13,"THUMBS_UP","","",82,null],[13,"Other","","",82,null],[4,"ReactionOrderField","","",null,null],[13,"CREATED_AT","","",83,null],[13,"Other","","",83,null],[4,"RefOrderField","","",null,null],[13,"ALPHABETICAL","","",84,null],[13,"TAG_COMMIT_DATE","","",84,null],[13,"Other","","",84,null],[4,"ReleaseOrderField","","",null,null],[13,"CREATED_AT","","",85,null],[13,"NAME","","",85,null],[13,"Other","","",85,null],[4,"RepositoryAffiliation","","",null,null],[13,"COLLABORATOR","","",86,null],[13,"ORGANIZATION_MEMBER","","",86,null],[13,"OWNER","","",86,null],[13,"Other","","",86,null],[4,"RepositoryCollaboratorAffiliation","","",null,null],[13,"ALL","","",87,null],[13,"OUTSIDE","","",87,null],[13,"Other","","",87,null],[4,"RepositoryContributionType","","",null,null],[13,"COMMIT","","",88,null],[13,"ISSUE","","",88,null],[13,"PULL_REQUEST","","",88,null],[13,"PULL_REQUEST_REVIEW","","",88,null],[13,"REPOSITORY","","",88,null],[13,"Other","","",88,null],[4,"RepositoryLockReason","","",null,null],[13,"BILLING","","",89,null],[13,"MIGRATING","","",89,null],[13,"MOVING","","",89,null],[13,"RENAME","","",89,null],[13,"Other","","",89,null],[4,"RepositoryOrderField","","",null,null],[13,"CREATED_AT","","",90,null],[13,"NAME","","",90,null],[13,"PUSHED_AT","","",90,null],[13,"STARGAZERS","","",90,null],[13,"UPDATED_AT","","",90,null],[13,"Other","","",90,null],[4,"RepositoryPermission","","",null,null],[13,"ADMIN","","",91,null],[13,"READ","","",91,null],[13,"WRITE","","",91,null],[13,"Other","","",91,null],[4,"RepositoryPrivacy","","",null,null],[13,"PRIVATE","","",92,null],[13,"PUBLIC","","",92,null],[13,"Other","","",92,null],[4,"SearchType","","",null,null],[13,"ISSUE","","",93,null],[13,"REPOSITORY","","",93,null],[13,"USER","","",93,null],[13,"Other","","",93,null],[4,"StarOrderField","","",null,null],[13,"STARRED_AT","","",94,null],[13,"Other","","",94,null],[4,"StatusState","","",null,null],[13,"ERROR","","",95,null],[13,"EXPECTED","","",95,null],[13,"FAILURE","","",95,null],[13,"PENDING","","",95,null],[13,"SUCCESS","","",95,null],[13,"Other","","",95,null],[4,"SubscriptionState","","",null,null],[13,"IGNORED","","",96,null],[13,"SUBSCRIBED","","",96,null],[13,"UNSUBSCRIBED","","",96,null],[13,"Other","","",96,null],[4,"TeamMemberOrderField","","",null,null],[13,"CREATED_AT","","",97,null],[13,"LOGIN","","",97,null],[13,"Other","","",97,null],[4,"TeamMemberRole","","",null,null],[13,"MAINTAINER","","",98,null],[13,"MEMBER","","",98,null],[13,"Other","","",98,null],[4,"TeamMembershipType","","",null,null],[13,"ALL","","",99,null],[13,"CHILD_TEAM","","",99,null],[13,"IMMEDIATE","","",99,null],[13,"Other","","",99,null],[4,"TeamOrderField","","",null,null],[13,"NAME","","",100,null],[13,"Other","","",100,null],[4,"TeamPrivacy","","",null,null],[13,"SECRET","","",101,null],[13,"VISIBLE","","",101,null],[13,"Other","","",101,null],[4,"TeamRepositoryOrderField","","",null,null],[13,"CREATED_AT","","",102,null],[13,"NAME","","",102,null],[13,"PERMISSION","","",102,null],[13,"PUSHED_AT","","",102,null],[13,"STARGAZERS","","",102,null],[13,"UPDATED_AT","","",102,null],[13,"Other","","",102,null],[4,"TeamRole","","",null,null],[13,"ADMIN","","",103,null],[13,"MEMBER","","",103,null],[13,"Other","","",103,null],[4,"TopicSuggestionDeclineReason","","",null,null],[13,"NOT_RELEVANT","","",104,null],[13,"PERSONAL_PREFERENCE","","",104,null],[13,"TOO_GENERAL","","",104,null],[13,"TOO_SPECIFIC","","",104,null],[13,"Other","","",104,null],[17,"QUERY","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",55,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",55,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",56,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",56,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",57,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",57,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",58,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",58,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",59,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",60,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",60,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",61,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",61,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",62,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",62,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",63,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",63,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",64,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",64,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",65,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",65,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",66,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",66,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",67,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",67,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",68,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",69,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",69,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",70,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",70,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",71,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",71,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",72,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",73,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",73,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",74,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",74,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",75,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",75,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",76,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",76,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",77,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",77,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",78,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",78,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",79,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",79,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",80,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",80,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",81,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",81,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",82,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",82,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",83,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",83,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",84,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",84,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",85,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",86,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",86,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",87,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",87,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",88,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",88,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",89,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",89,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",90,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",90,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",91,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",91,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",92,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",92,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",93,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",93,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",94,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",94,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",95,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",95,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",96,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",96,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",97,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",97,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",98,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",98,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",99,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",99,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",100,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",100,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",101,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",101,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",102,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",102,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",103,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",103,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",104,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",104,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"AcceptTopicSuggestionInput"],[3,"AddCommentInput"],[3,"AddProjectCardInput"],[3,"AddProjectColumnInput"],[3,"AddPullRequestReviewCommentInput"],[3,"AddPullRequestReviewInput"],[3,"AddReactionInput"],[3,"AddStarInput"],[3,"CommitAuthor"],[3,"CreateProjectInput"],[3,"DeclineTopicSuggestionInput"],[3,"DeleteProjectCardInput"],[3,"DeleteProjectColumnInput"],[3,"DeleteProjectInput"],[3,"DeletePullRequestReviewInput"],[3,"DismissPullRequestReviewInput"],[3,"DraftPullRequestReviewComment"],[3,"GistOrder"],[3,"IssueOrder"],[3,"LanguageOrder"],[3,"LockLockableInput"],[3,"MilestoneOrder"],[3,"MoveProjectCardInput"],[3,"MoveProjectColumnInput"],[3,"ProjectOrder"],[3,"ReactionOrder"],[3,"RefOrder"],[3,"ReleaseOrder"],[3,"RemoveOutsideCollaboratorInput"],[3,"RemoveReactionInput"],[3,"RemoveStarInput"],[3,"RepositoryOrder"],[3,"RequestReviewsInput"],[3,"StarOrder"],[3,"SubmitPullRequestReviewInput"],[3,"TeamMemberOrder"],[3,"TeamOrder"],[3,"TeamRepositoryOrder"],[3,"UpdateProjectCardInput"],[3,"UpdateProjectColumnInput"],[3,"UpdateProjectInput"],[3,"UpdatePullRequestReviewCommentInput"],[3,"UpdatePullRequestReviewInput"],[3,"UpdateSubscriptionInput"],[3,"UpdateTopicsInput"],[3,"RustRepoViewRepositoryStargazers"],[3,"RustRepoViewRepositoryIssuesNodesComments"],[3,"RustRepoViewRepositoryIssuesNodes"],[3,"RustRepoViewRepositoryIssues"],[3,"RustRepoViewRepositoryPullRequestsNodesCommits"],[3,"RustRepoViewRepositoryPullRequestsNodes"],[3,"RustRepoViewRepositoryPullRequests"],[3,"RustRepoViewRepository"],[3,"Variables"],[3,"ResponseData"],[4,"CollaboratorAffiliation"],[4,"CommentAuthorAssociation"],[4,"CommentCannotUpdateReason"],[4,"DefaultRepositoryPermissionField"],[4,"DeploymentState"],[4,"DeploymentStatusState"],[4,"GistOrderField"],[4,"GistPrivacy"],[4,"GitSignatureState"],[4,"IssueOrderField"],[4,"IssuePubSubTopic"],[4,"IssueState"],[4,"LanguageOrderField"],[4,"LockReason"],[4,"MergeableState"],[4,"MilestoneOrderField"],[4,"MilestoneState"],[4,"OrderDirection"],[4,"OrganizationInvitationRole"],[4,"OrganizationInvitationType"],[4,"ProjectCardState"],[4,"ProjectOrderField"],[4,"ProjectState"],[4,"PullRequestPubSubTopic"],[4,"PullRequestReviewEvent"],[4,"PullRequestReviewState"],[4,"PullRequestState"],[4,"ReactionContent"],[4,"ReactionOrderField"],[4,"RefOrderField"],[4,"ReleaseOrderField"],[4,"RepositoryAffiliation"],[4,"RepositoryCollaboratorAffiliation"],[4,"RepositoryContributionType"],[4,"RepositoryLockReason"],[4,"RepositoryOrderField"],[4,"RepositoryPermission"],[4,"RepositoryPrivacy"],[4,"SearchType"],[4,"StarOrderField"],[4,"StatusState"],[4,"SubscriptionState"],[4,"TeamMemberOrderField"],[4,"TeamMemberRole"],[4,"TeamMembershipType"],[4,"TeamOrderField"],[4,"TeamPrivacy"],[4,"TeamRepositoryOrderField"],[4,"TeamRole"],[4,"TopicSuggestionDeclineReason"]]};
searchIndex["heck"] = {"doc":"heck is a case conversion library.","items":[[8,"CamelCase","heck","This trait defines a camel case conversion.",null,null],[10,"to_camel_case","","Convert this type to camel case.",0,null],[8,"KebabCase","","This trait defines a kebab case conversion.",null,null],[10,"to_kebab_case","","Convert this type to kebab case.",1,null],[8,"MixedCase","","This trait defines a mixed case conversion.",null,null],[10,"to_mixed_case","","Convert this type to mixed case.",2,null],[8,"ShoutySnakeCase","","This trait defines a shouty snake case conversion.",null,null],[10,"to_shouty_snake_case","","Convert this type to shouty snake case.",3,null],[8,"ShoutySnekCase","","Oh heck, ShoutySnekCase is an alias for ShoutySnakeCase. See ShoutySnakeCase for more documentation.",null,null],[10,"TO_SHOUTY_SNEK_CASE","","CONVERT THIS TYPE TO SNEK CASE.",4,null],[8,"SnakeCase","","This trait defines a camel case conversion.",null,null],[10,"to_snake_case","","Convert this type to snake case.",5,null],[8,"SnekCase","","Oh heck, SnekCase is an alias for SnakeCase. See SnakeCase for more documentation.",null,null],[10,"to_snek_case","","Convert this type to snek case.",6,null],[8,"TitleCase","","This trait defines a title case conversion.",null,null],[10,"to_title_case","","Convert this type to title case.",7,null]],"paths":[[8,"CamelCase"],[8,"KebabCase"],[8,"MixedCase"],[8,"ShoutySnakeCase"],[8,"ShoutySnekCase"],[8,"SnakeCase"],[8,"SnekCase"],[8,"TitleCase"]]};
searchIndex["http"] = {"doc":"A general purpose library of common HTTP types","items":[[3,"Error","http","A generic \"error\" for HTTP connections",null,null],[3,"Extensions","","A type map of protocol extensions.",null,null],[3,"HeaderMap","","A set of HTTP headers",null,null],[0,"header","","HTTP header types",null,null],[3,"HeaderMap","http::header","A set of HTTP headers",null,null],[3,"Iter","","`HeaderMap` entry iterator.",null,null],[3,"Keys","","An iterator over `HeaderMap` keys.",null,null],[3,"Values","","`HeaderMap` value iterator.",null,null],[3,"Drain","","A drain iterator for `HeaderMap`.",null,null],[3,"GetAll","","A view to all values stored in a single entry.",null,null],[3,"VacantEntry","","A view into a single empty location in a `HeaderMap`.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `HeaderMap`.",null,null],[3,"ValueIter","","An iterator of all values associated with a single header name.",null,null],[3,"ValueIterMut","","A mutable iterator of all values associated with a single header name.",null,null],[3,"ValueDrain","","An drain iterator of all values associated with a single header name.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HeaderMap`.",null,null],[3,"HeaderName","","Represents an HTTP header field name",null,null],[3,"InvalidHeaderName","","A possible error when converting a `HeaderName` from another type.",null,null],[3,"InvalidHeaderNameBytes","","A possible error when converting a `HeaderName` from another type.",null,null],[3,"HeaderValue","","Represents an HTTP header field value.",null,null],[3,"InvalidHeaderValue","","A possible error when converting a `HeaderValue` from a string or byte slice.",null,null],[3,"InvalidHeaderValueBytes","","A possible error when converting a `HeaderValue` from a string or byte slice.",null,null],[3,"ToStrError","","A possible error when converting a `HeaderValue` to a string representation.",null,null],[4,"Entry","","A view into a single location in a `HeaderMap`, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied entry",0,null],[13,"Vacant","","A vacant entry",0,null],[11,"clone","http","",1,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"fmt","http::header","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","http","Create an empty `HeaderMap`.",1,{"o":{"n":"self"}}],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",1,{"i":[{"n":"usize"}],"o":{"n":"headermap"}}],[11,"len","","Returns the number of headers stored in the map.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"keys_len","","Returns the number of keys stored in the map.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",1,{"i":[{"n":"self"}]}],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",1,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",1,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"get","","Returns a reference to the value associated with the key.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get_all","","Returns a view of all values associated with a key.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"getall"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"bool"}}],[11,"iter","","An iterator visiting all key-value pairs.",1,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",1,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"keys","","An iterator visiting all keys.",1,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","An iterator visiting all values.",1,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"values_mut","","An iterator visiting all values mutably.",1,{"i":[{"n":"self"}],"o":{"n":"valuesmut"}}],[11,"drain","","Clears the map, returning all entries as an iterator.",1,{"i":[{"n":"self"}],"o":{"n":"drain"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["entry","invalidheadername"],"n":"result"}}],[11,"insert","","Inserts a key-value pair into the map.",1,{"i":[{"n":"self"},{"n":"k"},{"n":"t"}],"o":{"n":"option"}}],[11,"append","","Inserts a key-value pair into the map.",1,{"i":[{"n":"self"},{"n":"k"},{"n":"t"}],"o":{"n":"bool"}}],[11,"remove","","Removes a key from the map, returning the value associated with the key.",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitary order. The map cannot be used after calling this.",1,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"from_iter","","",1,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","Extend a `HeaderMap` with the contents of another `HeaderMap`.",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"extend","","",1,{"i":[{"n":"self"},{"n":"i"}]}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"headermap"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",1,{"o":{"n":"self"}}],[11,"index","","",1,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"t"}}],[11,"next","http::header","",2,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty.",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"t"}}],[11,"key","","Returns a reference to the entry's key",0,{"i":[{"n":"self"}],"o":{"n":"headername"}}],[11,"key","","Returns a reference to the entry's key",8,{"i":[{"n":"self"}],"o":{"n":"headername"}}],[11,"into_key","","Take ownership of the key",8,{"i":[{"n":"self"}],"o":{"n":"headername"}}],[11,"insert","","Insert the value into the entry.",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"insert_entry","","Insert the value into the entry.",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"occupiedentry"}}],[11,"iter","","Returns an iterator visiting all values associated with the entry.",7,{"i":[{"n":"self"}],"o":{"n":"valueiter"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"into_iter","","",7,{"i":[{"n":"self"}],"o":{"n":"valueiter"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next_back","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",3,{"i":[{"n":"self"}]}],[11,"key","","Returns a reference to the entry's key.",9,{"i":[{"n":"self"}],"o":{"n":"headername"}}],[11,"get","","Get a reference to the first value in the entry.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Get a mutable reference to the first value in the entry.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_mut","","Converts the `OccupiedEntry` into a mutable reference to the first value.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"insert","","Sets the value of the entry.",9,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"insert_mult","","Sets the value of the entry.",9,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"valuedrain"}}],[11,"append","","Insert the value into the entry.",9,{"i":[{"n":"self"},{"n":"t"}]}],[11,"remove","","Remove the entry from the map.",9,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"remove_entry","","Remove the entry from the map.",9,null],[11,"remove_entry_mult","","Remove the entry from the map.",9,null],[11,"iter","","Returns an iterator visiting all values associated with the entry.",9,{"i":[{"n":"self"}],"o":{"n":"valueiter"}}],[11,"iter_mut","","Returns an iterator mutably visiting all values associated with the entry.",9,{"i":[{"n":"self"}],"o":{"n":"valueitermut"}}],[11,"into_iter","","",9,{"i":[{"n":"self"}],"o":{"n":"valueitermut"}}],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"drop","","",12,{"i":[{"n":"self"}]}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"headername"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"headername"}],"o":{"n":"bool"}}],[11,"ne","","",13,{"i":[{"n":"self"},{"n":"headername"}],"o":{"n":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_bytes","","Converts a slice of bytes to an HTTP header name.",13,null],[11,"from_lowercase","","Converts a slice of bytes to an HTTP header name.",13,null],[11,"from_static","","Converts a static string to a HTTP header name.",13,{"i":[{"n":"str"}],"o":{"n":"headername"}}],[11,"as_str","","Returns a `str` representation of the header.",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","",13,{"i":[{"n":"str"}],"o":{"g":["headername","invalidheadername"],"n":"result"}}],[11,"as_ref","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_ref","","",13,null],[11,"borrow","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",13,{"i":[{"n":"headername"}],"o":{"n":"headername"}}],[11,"try_from","","",13,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"try_from","","",13,null],[11,"try_from","","",13,{"i":[{"n":"bytes"}],"o":{"n":"result"}}],[11,"eq","","",13,{"i":[{"n":"self"},{"n":"headername"}],"o":{"n":"bool"}}],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",13,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","Performs a case-insensitive comparison of the string against the header name",13,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",14,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",15,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"headervalue"}}],[11,"hash","","",16,null],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_static","","Convert a static string to a `HeaderValue`.",16,{"i":[{"n":"str"}],"o":{"n":"headervalue"}}],[11,"from_str","","Attempt to convert a string to a `HeaderValue`.",16,{"i":[{"n":"str"}],"o":{"g":["headervalue","invalidheadervalue"],"n":"result"}}],[11,"from_name","","Converts a HeaderName into a HeaderValue",16,{"i":[{"n":"headername"}],"o":{"n":"headervalue"}}],[11,"from_bytes","","Attempt to convert a byte slice to a `HeaderValue`.",16,null],[11,"from_shared","","Attempt to convert a `Bytes` buffer to a `HeaderValue`.",16,{"i":[{"n":"bytes"}],"o":{"g":["headervalue","invalidheadervaluebytes"],"n":"result"}}],[11,"from_shared_unchecked","","Convert a `Bytes` directly into a `HeaderValue` without validating.",16,{"i":[{"n":"bytes"}],"o":{"n":"headervalue"}}],[11,"to_str","","Yields a `&str` slice if the `HeaderValue` only contains visible ASCII chars.",16,{"i":[{"n":"self"}],"o":{"g":["str","tostrerror"],"n":"result"}}],[11,"len","","Returns the length of `self`.",16,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the `HeaderValue` has a length of zero bytes.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_bytes","","Converts a `HeaderValue` to a byte slice.",16,null],[11,"set_sensitive","","Mark that the header value represents sensitive information.",16,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"is_sensitive","","Returns `true` if the value represents sensitive data.",16,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_ref","","",16,null],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"headername"}],"o":{"n":"headervalue"}}],[11,"from","","",16,{"i":[{"n":"u16"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"u16"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"i16"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"i16"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"u32"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"u32"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"i32"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"i32"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"u64"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"u64"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"i64"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"i64"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"usize"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"usize"}],"o":{"n":"result"}}],[11,"from","","",16,{"i":[{"n":"isize"}],"o":{"n":"headervalue"}}],[11,"try_from","","",16,{"i":[{"n":"isize"}],"o":{"n":"result"}}],[11,"from_str","","",16,{"i":[{"n":"str"}],"o":{"g":["headervalue"],"n":"result"}}],[11,"try_from","","",16,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"try_from","","",16,null],[11,"try_from","","",16,{"i":[{"n":"bytes"}],"o":{"n":"result"}}],[11,"try_from","","",16,{"i":[{"n":"headername"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",17,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",18,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",19,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"headervalue"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"headervalue"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"ordering"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",16,null],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",16,null],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["ordering"],"n":"option"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["ordering"],"n":"option"}}],[17,"ACCEPT","","Advertises which content types the client is able to understand.",null,null],[17,"ACCEPT_CHARSET","","Advertises which character set the client is able to understand.",null,null],[17,"ACCEPT_ENCODING","","Advertises which content encoding the client is able to understand.",null,null],[17,"ACCEPT_LANGUAGE","","Advertises which languages the client is able to understand.",null,null],[17,"ACCEPT_RANGES","","Marker used by the server to advertise partial request support.",null,null],[17,"ACCESS_CONTROL_ALLOW_CREDENTIALS","","Preflight response indicating if the response to the request can be exposed to the page.",null,null],[17,"ACCESS_CONTROL_ALLOW_HEADERS","","Preflight response indicating permitted HTTP headers.",null,null],[17,"ACCESS_CONTROL_ALLOW_METHODS","","Preflight header response indicating permitted access methods.",null,null],[17,"ACCESS_CONTROL_ALLOW_ORIGIN","","Indicates whether the response can be shared with resources with the given origin.",null,null],[17,"ACCESS_CONTROL_EXPOSE_HEADERS","","Indicates which headers can be exposed as part of the response by listing their names.",null,null],[17,"ACCESS_CONTROL_MAX_AGE","","Indicates how long the results of a preflight request can be cached.",null,null],[17,"ACCESS_CONTROL_REQUEST_HEADERS","","Informs the server which HTTP headers will be used when an actual request is made.",null,null],[17,"ACCESS_CONTROL_REQUEST_METHOD","","Informs the server know which HTTP method will be used when the actual request is made.",null,null],[17,"AGE","","Indicates the time in seconds the object has been in a proxy cache.",null,null],[17,"ALLOW","","Lists the set of methods support by a resource.",null,null],[17,"ALT_SVC","","Advertises the availability of alternate services to clients.",null,null],[17,"AUTHORIZATION","","Contains the credentials to authenticate a user agent with a server.",null,null],[17,"CACHE_CONTROL","","Specifies directives for caching mechanisms in both requests and responses.",null,null],[17,"CONNECTION","","Controls whether or not the network connection stays open after the current transaction finishes.",null,null],[17,"CONTENT_DISPOSITION","","Indicates if the content is expected to be displayed inline.",null,null],[17,"CONTENT_ENCODING","","Used to compress the media-type.",null,null],[17,"CONTENT_LANGUAGE","","Used to describe the languages intended for the audience.",null,null],[17,"CONTENT_LENGTH","","Indicates the size fo the entity-body.",null,null],[17,"CONTENT_LOCATION","","Indicates an alternate location for the returned data.",null,null],[17,"CONTENT_RANGE","","Indicates where in a full body message a partial message belongs.",null,null],[17,"CONTENT_SECURITY_POLICY","","Allows controlling resources the user agent is allowed to load for a given page.",null,null],[17,"CONTENT_SECURITY_POLICY_REPORT_ONLY","","Allows experimenting with policies by monitoring their effects.",null,null],[17,"CONTENT_TYPE","","Used to indicate the media type of the resource.",null,null],[17,"COOKIE","","Contains stored HTTP cookies previously sent by the server with the Set-Cookie header.",null,null],[17,"DNT","","Indicates the client's tracking preference.",null,null],[17,"DATE","","Contains the date and time at which the message was originated.",null,null],[17,"ETAG","","Identifier for a specific version of a resource.",null,null],[17,"EXPECT","","Indicates expectations that need to be fulfilled by the server in order to properly handle the request.",null,null],[17,"EXPIRES","","Contains the date/time after which the response is considered stale.",null,null],[17,"FORWARDED","","Contains information from the client-facing side of proxy servers that is altered or lost when a proxy is involved in the path of the request.",null,null],[17,"FROM","","Contains an Internet email address for a human user who controls the requesting user agent.",null,null],[17,"HOST","","Specifies the domain name of the server and (optionally) the TCP port number on which the server is listening.",null,null],[17,"IF_MATCH","","Makes a request conditional based on the E-Tag.",null,null],[17,"IF_MODIFIED_SINCE","","Makes a request conditional based on the modification date.",null,null],[17,"IF_NONE_MATCH","","Makes a request conditional based on the E-Tag.",null,null],[17,"IF_RANGE","","Makes a request conditional based on range.",null,null],[17,"IF_UNMODIFIED_SINCE","","Makes the request conditional based on the last modification date.",null,null],[17,"LAST_MODIFIED","","Content-Types that are acceptable for the response.",null,null],[17,"LINK","","Allows the server to point an interested client to another resource containing metadata about the requested resource.",null,null],[17,"LOCATION","","Indicates the URL to redirect a page to.",null,null],[17,"MAX_FORWARDS","","Indicates the max number of intermediaries the request should be sent through.",null,null],[17,"ORIGIN","","Indicates where a fetch originates from.",null,null],[17,"PRAGMA","","HTTP/1.0 header usually used for backwards compatibility.",null,null],[17,"PROXY_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a proxy.",null,null],[17,"PROXY_AUTHORIZATION","","Contains the credentials to authenticate a user agent to a proxy server.",null,null],[17,"PUBLIC_KEY_PINS","","Associates a specific cryptographic public key with a certain server.",null,null],[17,"PUBLIC_KEY_PINS_REPORT_ONLY","","Sends reports of pinning violation to the report-uri specified in the header.",null,null],[17,"RANGE","","Indicates the part of a document that the server should return.",null,null],[17,"REFERER","","Contains the address of the previous web page from which a link to the currently requested page was followed.",null,null],[17,"REFERRER_POLICY","","Governs which referrer information should be included with requests made.",null,null],[17,"REFRESH","","Informs the web browser that the current page or frame should be refreshed.",null,null],[17,"RETRY_AFTER","","The Retry-After response HTTP header indicates how long the user agent should wait before making a follow-up request. There are two main cases this header is used:",null,null],[17,"SEC_WEBSOCKET_ACCEPT","","The |Sec-WebSocket-Accept| header field is used in the WebSocket opening handshake. It is sent from the server to the client to confirm that the server is willing to initiate the WebSocket connection.",null,null],[17,"SEC_WEBSOCKET_EXTENSIONS","","The |Sec-WebSocket-Extensions| header field is used in the WebSocket opening handshake. It is initially sent from the client to the server, and then subsequently sent from the server to the client, to agree on a set of protocol-level extensions to use for the duration of the connection.",null,null],[17,"SEC_WEBSOCKET_KEY","","The |Sec-WebSocket-Key| header field is used in the WebSocket opening handshake. It is sent from the client to the server to provide part of the information used by the server to prove that it received a valid WebSocket opening handshake. This helps ensure that the server does not accept connections from non-WebSocket clients (e.g., HTTP clients) that are being abused to send data to unsuspecting WebSocket servers.",null,null],[17,"SEC_WEBSOCKET_PROTOCOL","","The |Sec-WebSocket-Protocol| header field is used in the WebSocket opening handshake. It is sent from the client to the server and back from the server to the client to confirm the subprotocol of the connection.  This enables scripts to both select a subprotocol and be sure that the server agreed to serve that subprotocol.",null,null],[17,"SEC_WEBSOCKET_VERSION","","The |Sec-WebSocket-Version| header field is used in the WebSocket opening handshake.  It is sent from the client to the server to indicate the protocol version of the connection.  This enables servers to correctly interpret the opening handshake and subsequent data being sent from the data, and close the connection if the server cannot interpret that data in a safe manner.",null,null],[17,"SERVER","","Contains information about the software used by the origin server to handle the request.",null,null],[17,"SET_COOKIE","","Used to send cookies from the server to the user agent.",null,null],[17,"STRICT_TRANSPORT_SECURITY","","Tells the client to communicate with HTTPS instead of using HTTP.",null,null],[17,"TE","","Informs the server of transfer encodings willing to be accepted as part of the response.",null,null],[17,"TRAILER","","Allows the sender to include additional fields at the end of chunked messages.",null,null],[17,"TRANSFER_ENCODING","","Specifies the form of encoding used to safely transfer the entity to the client.",null,null],[17,"UPGRADE","","Used as part of the exchange to upgrade the protocol.",null,null],[17,"UPGRADE_INSECURE_REQUESTS","","Sends a signal to the server expressing the client’s preference for an encrypted and authenticated response.",null,null],[17,"USER_AGENT","","Contains a string that allows identifying the requesting client's software.",null,null],[17,"VARY","","Determines how to match future requests with cached responses.",null,null],[17,"VIA","","Added by proxies to track routing.",null,null],[17,"WARNING","","General HTTP header contains information about possible problems with the status of the message.",null,null],[17,"WWW_AUTHENTICATE","","Defines the authentication method that should be used to gain access to a resource.",null,null],[17,"X_CONTENT_TYPE_OPTIONS","","Marker used by the server to indicate that the MIME types advertised in the `content-type` headers should not be changed and be followed.",null,null],[17,"X_DNS_PREFETCH_CONTROL","","Controls DNS prefetching.",null,null],[17,"X_FRAME_OPTIONS","","Indicates whether or not a browser should be allowed to render a page in a frame.",null,null],[17,"X_XSS_PROTECTION","","Stop pages from loading when an XSS attack is detected.",null,null],[8,"AsHeaderName","","A marker trait used to identify values that can be used as search keys to a `HeaderMap`.",null,null],[8,"IntoHeaderName","","A marker trait used to identify values that can be used as insert keys to a `HeaderMap`.",null,null],[0,"method","http","The HTTP request method",null,null],[3,"Method","http::method","The Request Method (VERB)",null,null],[3,"InvalidMethod","","A possible error value when converting `Method` from bytes.",null,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"ne","","",20,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[18,"GET","","GET",20,null],[18,"POST","","POST",20,null],[18,"PUT","","PUT",20,null],[18,"DELETE","","DELETE",20,null],[18,"HEAD","","HEAD",20,null],[18,"OPTIONS","","OPTIONS",20,null],[18,"CONNECT","","CONNECT",20,null],[18,"PATCH","","PATCH",20,null],[18,"TRACE","","TRACE",20,null],[11,"from_bytes","","Converts a slice of bytes to an HTTP method.",20,null],[11,"is_safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",20,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_str","","Return a &str representation of the HTTP method",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"as_ref","","",20,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",20,{"o":{"n":"method"}}],[11,"try_from","","",20,null],[11,"try_from","","",20,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"from_str","","",20,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",21,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"request","http","HTTP request types.",null,null],[3,"Request","http::request","Represents an HTTP request.",null,null],[3,"Parts","","Component parts of an HTTP `Request`",null,null],[12,"method","","The request's method",22,null],[12,"uri","","The request's URI",22,null],[12,"version","","The request's version",22,null],[12,"headers","","The request's headers",22,null],[12,"extensions","","The request's extensions",22,null],[3,"Builder","","An HTTP request builder",null,null],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Request`",24,{"o":{"n":"builder"}}],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",24,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"new","","Creates a new blank `Request` with the body",24,{"i":[{"n":"t"}],"o":{"n":"request"}}],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",24,{"i":[{"n":"parts"},{"n":"t"}],"o":{"n":"request"}}],[11,"method","","Returns a reference to the associated HTTP method.",24,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",24,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"uri","","Returns a reference to the associated URI.",24,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"uri_mut","","Returns a mutable reference to the associated URI.",24,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"version","","Returns the associated version.",24,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",24,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",24,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",24,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",24,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",24,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",24,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",24,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_body","","Consumes the request, returning just the body.",24,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the request returning the head and body parts.",24,null],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",24,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"request"}}],[11,"default","","",24,{"o":{"n":"request"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new default instance of `Builder` to construct either a `Head` or a `Request`.",23,{"o":{"n":"builder"}}],[11,"method","","Set the HTTP method for this request.",23,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"builder"}}],[11,"uri","","Set the URI for this request.",23,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"builder"}}],[11,"version","","Set the HTTP version for this request.",23,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"builder"}}],[11,"header","","Appends a header to this request builder.",23,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"builder"}}],[11,"extension","","Adds an extension to this builder",23,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"builder"}}],[11,"body","","\"Consumes\" this builder, using the provided `body` to return a constructed `Request`.",23,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["request"],"n":"result"}}],[11,"default","","",23,{"o":{"n":"builder"}}],[0,"response","http","HTTP response types.",null,null],[3,"Response","http::response","Represents an HTTP response",null,null],[3,"Parts","","Component parts of an HTTP `Response`",null,null],[12,"status","","The response's status",25,null],[12,"version","","The response's version",25,null],[12,"headers","","The response's headers",25,null],[12,"extensions","","The response's extensions",25,null],[3,"Builder","","An HTTP response builder",null,null],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",27,{"o":{"n":"builder"}}],[11,"new","","Creates a new blank `Response` with the body",27,{"i":[{"n":"t"}],"o":{"n":"response"}}],[11,"from_parts","","Creates a new `Response` with the given head and body",27,{"i":[{"n":"parts"},{"n":"t"}],"o":{"n":"response"}}],[11,"status","","Returns the `StatusCode`.",27,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",27,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"version","","Returns a reference to the associated version.",27,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",27,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",27,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",27,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",27,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",27,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_body","","Consumes the response, returning just the body.",27,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the response returning the head and body parts.",27,null],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",27,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"response"}}],[11,"default","","",27,{"o":{"n":"response"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new default instance of `Builder` to construct either a `Head` or a `Response`.",26,{"o":{"n":"builder"}}],[11,"status","","Set the HTTP status for this response.",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"builder"}}],[11,"version","","Set the HTTP version for this response.",26,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"builder"}}],[11,"header","","Appends a header to this response builder.",26,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"builder"}}],[11,"extension","","Adds an extension to this builder",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"builder"}}],[11,"body","","\"Consumes\" this builder, using the provided `body` to return a constructed `Response`.",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["response"],"n":"result"}}],[11,"default","","",26,{"o":{"n":"builder"}}],[0,"status","http","HTTP status codes",null,null],[3,"StatusCode","http::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[3,"InvalidStatusCode","","A possible error value when converting a `StatusCode` from a `u16` or `&str`",null,null],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"ne","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"le","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"gt","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"ge","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"cmp","","",28,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"ordering"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_u16","","Converts a u16 to a status code.",28,{"i":[{"n":"u16"}],"o":{"g":["statuscode","invalidstatuscode"],"n":"result"}}],[11,"from_bytes","","Converts a &[u8] to a status code",28,null],[11,"as_u16","","Returns the `u16` corresponding to this `StatusCode`.",28,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"as_str","","Returns a &str representation of the `StatusCode`",28,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",28,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_informational","","Check if status is within 100-199.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_success","","Check if status is within 200-299.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_redirection","","Check if status is within 300-399.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_client_error","","Check if status is within 400-499.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_server_error","","Check if status is within 500-599.",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",28,{"o":{"n":"statuscode"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bool"}}],[11,"from_str","","",28,{"i":[{"n":"str"}],"o":{"g":["statuscode","invalidstatuscode"],"n":"result"}}],[11,"try_from","","",28,null],[11,"try_from","","",28,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"try_from","","",28,{"i":[{"n":"u16"}],"o":{"n":"result"}}],[18,"CONTINUE","","100 Continue [RFC7231, Section 6.2.1]",28,null],[18,"SWITCHING_PROTOCOLS","","101 Switching Protocols [RFC7231, Section 6.2.2]",28,null],[18,"PROCESSING","","102 Processing [RFC2518]",28,null],[18,"OK","","200 OK [RFC7231, Section 6.3.1]",28,null],[18,"CREATED","","201 Created [RFC7231, Section 6.3.2]",28,null],[18,"ACCEPTED","","202 Accepted [RFC7231, Section 6.3.3]",28,null],[18,"NON_AUTHORITATIVE_INFORMATION","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",28,null],[18,"NO_CONTENT","","204 No Content [RFC7231, Section 6.3.5]",28,null],[18,"RESET_CONTENT","","205 Reset Content [RFC7231, Section 6.3.6]",28,null],[18,"PARTIAL_CONTENT","","206 Partial Content [RFC7233, Section 4.1]",28,null],[18,"MULTI_STATUS","","207 Multi-Status [RFC4918]",28,null],[18,"ALREADY_REPORTED","","208 Already Reported [RFC5842]",28,null],[18,"IM_USED","","226 IM Used [RFC3229]",28,null],[18,"MULTIPLE_CHOICES","","300 Multiple Choices [RFC7231, Section 6.4.1]",28,null],[18,"MOVED_PERMANENTLY","","301 Moved Permanently [RFC7231, Section 6.4.2]",28,null],[18,"FOUND","","302 Found [RFC7231, Section 6.4.3]",28,null],[18,"SEE_OTHER","","303 See Other [RFC7231, Section 6.4.4]",28,null],[18,"NOT_MODIFIED","","304 Not Modified [RFC7232, Section 4.1]",28,null],[18,"USE_PROXY","","305 Use Proxy [RFC7231, Section 6.4.5]",28,null],[18,"TEMPORARY_REDIRECT","","307 Temporary Redirect [RFC7231, Section 6.4.7]",28,null],[18,"PERMANENT_REDIRECT","","308 Permanent Redirect [RFC7238]",28,null],[18,"BAD_REQUEST","","400 Bad Request [RFC7231, Section 6.5.1]",28,null],[18,"UNAUTHORIZED","","401 Unauthorized [RFC7235, Section 3.1]",28,null],[18,"PAYMENT_REQUIRED","","402 Payment Required [RFC7231, Section 6.5.2]",28,null],[18,"FORBIDDEN","","403 Forbidden [RFC7231, Section 6.5.3]",28,null],[18,"NOT_FOUND","","404 Not Found [RFC7231, Section 6.5.4]",28,null],[18,"METHOD_NOT_ALLOWED","","405 Method Not Allowed [RFC7231, Section 6.5.5]",28,null],[18,"NOT_ACCEPTABLE","","406 Not Acceptable [RFC7231, Section 6.5.6]",28,null],[18,"PROXY_AUTHENTICATION_REQUIRED","","407 Proxy Authentication Required [RFC7235, Section 3.2]",28,null],[18,"REQUEST_TIMEOUT","","408 Request Timeout [RFC7231, Section 6.5.7]",28,null],[18,"CONFLICT","","409 Conflict [RFC7231, Section 6.5.8]",28,null],[18,"GONE","","410 Gone [RFC7231, Section 6.5.9]",28,null],[18,"LENGTH_REQUIRED","","411 Length Required [RFC7231, Section 6.5.10]",28,null],[18,"PRECONDITION_FAILED","","412 Precondition Failed [RFC7232, Section 4.2]",28,null],[18,"PAYLOAD_TOO_LARGE","","413 Payload Too Large [RFC7231, Section 6.5.11]",28,null],[18,"URI_TOO_LONG","","414 URI Too Long [RFC7231, Section 6.5.12]",28,null],[18,"UNSUPPORTED_MEDIA_TYPE","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",28,null],[18,"RANGE_NOT_SATISFIABLE","","416 Range Not Satisfiable [RFC7233, Section 4.4]",28,null],[18,"EXPECTATION_FAILED","","417 Expectation Failed [RFC7231, Section 6.5.14]",28,null],[18,"IM_A_TEAPOT","","418 I'm a teapot [curiously not registered by IANA but RFC2324]",28,null],[18,"MISDIRECTED_REQUEST","","421 Misdirected Request RFC7540, Section 9.1.2",28,null],[18,"UNPROCESSABLE_ENTITY","","422 Unprocessable Entity [RFC4918]",28,null],[18,"LOCKED","","423 Locked [RFC4918]",28,null],[18,"FAILED_DEPENDENCY","","424 Failed Dependency [RFC4918]",28,null],[18,"UPGRADE_REQUIRED","","426 Upgrade Required [RFC7231, Section 6.5.15]",28,null],[18,"PRECONDITION_REQUIRED","","428 Precondition Required [RFC6585]",28,null],[18,"TOO_MANY_REQUESTS","","429 Too Many Requests [RFC6585]",28,null],[18,"REQUEST_HEADER_FIELDS_TOO_LARGE","","431 Request Header Fields Too Large [RFC6585]",28,null],[18,"UNAVAILABLE_FOR_LEGAL_REASONS","","451 Unavailable For Legal Reasons [RFC7725]",28,null],[18,"INTERNAL_SERVER_ERROR","","500 Internal Server Error [RFC7231, Section 6.6.1]",28,null],[18,"NOT_IMPLEMENTED","","501 Not Implemented [RFC7231, Section 6.6.2]",28,null],[18,"BAD_GATEWAY","","502 Bad Gateway [RFC7231, Section 6.6.3]",28,null],[18,"SERVICE_UNAVAILABLE","","503 Service Unavailable [RFC7231, Section 6.6.4]",28,null],[18,"GATEWAY_TIMEOUT","","504 Gateway Timeout [RFC7231, Section 6.6.5]",28,null],[18,"HTTP_VERSION_NOT_SUPPORTED","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",28,null],[18,"VARIANT_ALSO_NEGOTIATES","","506 Variant Also Negotiates [RFC2295]",28,null],[18,"INSUFFICIENT_STORAGE","","507 Insufficient Storage [RFC4918]",28,null],[18,"LOOP_DETECTED","","508 Loop Detected [RFC5842]",28,null],[18,"NOT_EXTENDED","","510 Not Extended [RFC2774]",28,null],[18,"NETWORK_AUTHENTICATION_REQUIRED","","511 Network Authentication Required [RFC6585]",28,null],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",29,{"i":[{"n":"self"}],"o":{"n":"str"}}],[0,"version","http","HTTP version",null,null],[3,"Version","http::version","Represents a version of the HTTP spec.",null,null],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"le","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"gt","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"ge","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"bool"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"cmp","","",30,{"i":[{"n":"self"},{"n":"version"}],"o":{"n":"ordering"}}],[11,"hash","","",30,null],[18,"HTTP_09","","`HTTP/0.9`",30,null],[18,"HTTP_10","","`HTTP/1.0`",30,null],[18,"HTTP_11","","`HTTP/1.1`",30,null],[18,"HTTP_2","","`HTTP/2.0`",30,null],[11,"default","","",30,{"o":{"n":"version"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"uri","http","URI component of request and response lines",null,null],[3,"Authority","http::uri","Represents the authority component of a URI.",null,null],[3,"PathAndQuery","","Represents the path component of a URI",null,null],[3,"Scheme","","Represents the scheme component of a URI",null,null],[3,"Uri","","The URI component of a request.",null,null],[3,"Parts","","The various parts of a URI.",null,null],[12,"scheme","","The scheme component of a URI",31,null],[12,"authority","","The authority component of a URI",31,null],[12,"path_and_query","","The origin-form component of a URI",31,null],[3,"InvalidUri","","An error resulting from a failed attempt to construct a URI.",null,null],[3,"InvalidUriBytes","","An error resulting from a failed attempt to construct a URI.",null,null],[3,"InvalidUriParts","","An error resulting from a failed attempt to construct a URI.",null,null],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"authority"}}],[11,"from_shared","","Attempt to convert an `Authority` from `Bytes`.",32,{"i":[{"n":"bytes"}],"o":{"g":["invaliduribytes"],"n":"result"}}],[11,"from_static","","Attempt to convert an `Authority` from a static string.",32,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"host","","Get the host of this `Authority`.",32,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"port","","Get the port of this `Authority`.",32,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"as_str","","Return a str representation of the authority",32,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_bytes","","Converts this `Authority` back to a sequence of bytes",32,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"as_ref","","",32,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"authority"}],"o":{"n":"bool"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",32,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",32,{"i":[{"n":"self"},{"n":"authority"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",32,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",32,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",32,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["ordering"],"n":"option"}}],[11,"hash","","",32,{"i":[{"n":"self"},{"n":"h"}]}],[11,"from_str","","",32,{"i":[{"n":"str"}],"o":{"g":["invaliduri"],"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"pathandquery"}}],[11,"from_shared","","Attempt to convert a `PathAndQuery` from `Bytes`.",33,{"i":[{"n":"bytes"}],"o":{"g":["invaliduribytes"],"n":"result"}}],[11,"from_static","","Convert a `PathAndQuery` from a static string.",33,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"path","","Returns the path component",33,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"query","","Returns the query string component",33,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"as_str","","Returns the path and query as a string component.",33,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_bytes","","Converts this `PathAndQuery` back to a sequence of bytes",33,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"from_str","","",33,{"i":[{"n":"str"}],"o":{"g":["invaliduri"],"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"pathandquery"}],"o":{"n":"bool"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",33,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",33,{"i":[{"n":"self"},{"n":"pathandquery"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",33,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["ordering"],"n":"option"}}],[11,"partial_cmp","","",33,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["ordering"],"n":"option"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"scheme"}}],[18,"HTTP","","HTTP protocol scheme",34,null],[18,"HTTPS","","HTTP protocol over TLS.",34,null],[11,"from_shared","","Attempt to convert a `Scheme` from `Bytes`",34,{"i":[{"n":"bytes"}],"o":{"g":["invaliduribytes"],"n":"result"}}],[11,"as_str","","Return a str representation of the scheme",34,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_bytes","","Converts this `Scheme` back to a sequence of bytes",34,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"from_str","","",34,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",34,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"scheme"}],"o":{"n":"bool"}}],[11,"eq","","",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"hash","","",34,{"i":[{"n":"self"},{"n":"h"}]}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",31,{"o":{"n":"parts"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from_parts","","Attempt to convert a `Uri` from `Parts`",35,{"i":[{"n":"parts"}],"o":{"g":["uri","invaliduriparts"],"n":"result"}}],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",35,{"i":[{"n":"bytes"}],"o":{"g":["uri","invaliduribytes"],"n":"result"}}],[11,"into_parts","","Convert a `Uri` into `Parts`.",35,{"i":[{"n":"self"}],"o":{"n":"parts"}}],[11,"path_and_query","","Returns the path & query components of the Uri",35,{"i":[{"n":"self"}],"o":{"g":["pathandquery"],"n":"option"}}],[11,"path","","Get the path of this `Uri`.",35,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"scheme_part","","Get the scheme of this `Uri`.",35,{"i":[{"n":"self"}],"o":{"g":["scheme"],"n":"option"}}],[11,"authority_part","","Get the authority of this `Uri`.",35,{"i":[{"n":"self"}],"o":{"g":["authority"],"n":"option"}}],[11,"host","","Get the host of this `Uri`.",35,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"port","","Get the port of this `Uri`.",35,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",35,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"try_from","","",35,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"try_from","","",35,{"i":[{"n":"string"}],"o":{"n":"result"}}],[11,"try_from","","",35,{"i":[{"n":"string"}],"o":{"n":"result"}}],[11,"try_from","","",35,{"i":[{"n":"bytes"}],"o":{"n":"result"}}],[11,"try_from","","",35,{"i":[{"n":"parts"}],"o":{"n":"result"}}],[11,"try_from","","",35,{"i":[{"n":"uri"}],"o":{"n":"result"}}],[11,"from","","",31,{"i":[{"n":"uri"}],"o":{"n":"self"}}],[11,"from_str","","",35,{"i":[{"n":"str"}],"o":{"g":["uri","invaliduri"],"n":"result"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"uri"}],"o":{"n":"bool"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",35,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"default","","",35,{"o":{"n":"uri"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",36,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",37,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","","",38,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"hash","","",35,{"i":[{"n":"self"},{"n":"h"}]}],[11,"try_from","","",35,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"try_from","http::method","",20,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"try_from","http::status","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"try_from","http::header","",13,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"try_from","","",16,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"fmt","http","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",39,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from","","",39,{"i":[{"n":"invalidstatuscode"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invalidmethod"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invaliduri"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invaliduribytes"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invaliduriparts"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invalidheadername"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invalidheadernamebytes"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invalidheadervalue"}],"o":{"n":"error"}}],[11,"from","","",39,{"i":[{"n":"invalidheadervaluebytes"}],"o":{"n":"error"}}],[11,"default","","",40,{"o":{"n":"extensions"}}],[11,"new","","Create an empty `Extensions`.",40,{"o":{"n":"extensions"}}],[11,"insert","","Insert a type into this `Extensions`.",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"option"}}],[11,"get","","Get a reference to a type previously inserted on this `Extensions`.",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Get a mutable reference to a type previously inserted on this `Extensions`.",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"remove","","Remove a type from this `Extensions`.",40,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"clear","","Clear the `Extensions` of all inserted extensions.",40,{"i":[{"n":"self"}]}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[6,"Result","","A `Result` typedef to use with the `http::Error` type",null,null],[8,"HttpTryFrom","","Private trait for the `http` crate to have generic methods with fallible conversions.",null,null],[16,"Error","","Associated error with the conversion this implementation represents.",41,null]],"paths":[[4,"Entry"],[3,"HeaderMap"],[3,"Iter"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"GetAll"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"ValueIter"],[3,"ValueIterMut"],[3,"ValueDrain"],[3,"HeaderName"],[3,"InvalidHeaderName"],[3,"InvalidHeaderNameBytes"],[3,"HeaderValue"],[3,"InvalidHeaderValue"],[3,"InvalidHeaderValueBytes"],[3,"ToStrError"],[3,"Method"],[3,"InvalidMethod"],[3,"Parts"],[3,"Builder"],[3,"Request"],[3,"Parts"],[3,"Builder"],[3,"Response"],[3,"StatusCode"],[3,"InvalidStatusCode"],[3,"Version"],[3,"Parts"],[3,"Authority"],[3,"PathAndQuery"],[3,"Scheme"],[3,"Uri"],[3,"InvalidUri"],[3,"InvalidUriBytes"],[3,"InvalidUriParts"],[3,"Error"],[3,"Extensions"],[8,"HttpTryFrom"]]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"response"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"] = {"doc":"Hyper","items":[[3,"Uri","hyper","The Request-URI of a Request's StartLine.",null,null],[3,"Body","","A `Stream` for `Chunk`s used in requests and responses.",null,null],[3,"Chunk","","A piece of a message body.",null,null],[3,"Request","","An HTTP Request",null,null],[3,"Response","","An HTTP Response",null,null],[4,"Method","","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",0,null],[13,"Get","","GET",0,null],[13,"Post","","POST",0,null],[13,"Put","","PUT",0,null],[13,"Delete","","DELETE",0,null],[13,"Head","","HEAD",0,null],[13,"Trace","","TRACE",0,null],[13,"Connect","","CONNECT",0,null],[13,"Patch","","PATCH",0,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",0,null],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",1,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",1,null],[13,"Processing","","102 Processing [RFC2518]",1,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",1,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",1,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",1,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",1,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",1,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",1,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",1,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",1,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",1,null],[13,"ImUsed","","226 IM Used [RFC3229]",1,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",1,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",1,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",1,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",1,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",1,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",1,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",1,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",1,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",1,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",1,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",1,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",1,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",1,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",1,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",1,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",1,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",1,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",1,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",1,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",1,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",1,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",1,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",1,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",1,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",1,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",1,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",1,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",1,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",1,null],[13,"Locked","","423 Locked [RFC4918]",1,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",1,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",1,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",1,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",1,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",1,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",1,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",1,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",1,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",1,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",1,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",1,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",1,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",1,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",1,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",1,null],[13,"NotExtended","","510 Not Extended [RFC2774]",1,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",1,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",1,null],[4,"HttpVersion","","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",2,null],[13,"Http10","","`HTTP/1.0`",2,null],[13,"Http11","","`HTTP/1.1`",2,null],[13,"H2","","`HTTP/2.0` over TLS",2,null],[13,"H2c","","`HTTP/2.0` over cleartext",2,null],[0,"client","","HTTP Client",null,null],[8,"Service","hyper::client","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",3,null],[16,"Response","","Responses given by the service.",3,null],[16,"Error","","Errors produced by the service.",3,null],[16,"Future","","The future response value.",3,null],[10,"call","","Process the request and return the response asynchronously.",3,null],[3,"Response","","An HTTP Response",null,null],[3,"Request","","An HTTP Request",null,null],[3,"HttpConnector","","A connector for the `http` scheme.",null,null],[3,"Client","","A Client to make outgoing HTTP requests.",null,null],[3,"FutureResponse","","A `Future` that will resolve to an HTTP Response.",null,null],[3,"Config","","Configuration for a Client",null,null],[3,"UseDefaultConnector","","Phantom type used to signal that `Config` should create a `HttpConnector`.",null,null],[0,"conn","","Lower-level client connection API.",null,null],[3,"SendRequest","hyper::client::conn","The sender side of an established connection.",null,null],[3,"Connection","","A future that processes all HTTP state for the IO object.",null,null],[3,"Builder","","A builder to configure an HTTP connection.",null,null],[3,"Handshake","","A future setting up HTTP over an IO object.",null,null],[3,"ResponseFuture","","A future returned by `SendRequest::send_request`.",null,null],[3,"Parts","","Deconstructed parts of a `Connection`.",null,null],[12,"io","","The original IO object used in the handshake.",4,null],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",4,null],[5,"handshake","","Returns a `Handshake` future over some IO.",null,{"inputs":[{"name":"t"}],"output":{"generics":["body"],"name":"handshake"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll_ready","","Polls to determine whether this sender can be used yet for a request.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"send_request","","Sends a `Request` on the associated connection.",6,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"responsefuture"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_parts","","Return the inner IO object, and additional information.",7,{"inputs":[{"name":"self"}],"output":{"name":"parts"}}],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new connection builder.",5,{"inputs":[],"output":{"name":"builder"}}],[11,"handshake","","Constructs a connection with the configured options and IO.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"handshake"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","hyper::client","",10,{"inputs":[{"name":"self"}],"output":{"name":"httpconnector"}}],[11,"new","","Construct a new HttpConnector.",10,{"inputs":[{"name":"usize"},{"name":"handle"}],"output":{"name":"httpconnector"}}],[11,"new_with_executor","","Construct a new HttpConnector.",10,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"httpconnector"}}],[11,"enforce_http","","Option to enforce all `Uri`s have the `http` scheme.",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_keepalive","","Set that all sockets have `SO_KEEPALIVE` set with the supplied duration.",10,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","","",10,null],[8,"Connect","","A connector creates an Io to a remote address..",null,null],[16,"Output","","The connected Io Stream.",11,null],[16,"Future","","A Future that will resolve to the connected Stream.",11,null],[10,"connect","","Connect to a remote address.",11,null],[11,"new","","Create a new Client with the default config.",12,{"inputs":[{"name":"handle"}],"output":{"generics":["httpconnector","body"],"name":"client"}}],[11,"configure","","Configure a Client.",12,{"inputs":[],"output":{"generics":["usedefaultconnector","body"],"name":"config"}}],[11,"get","","Send a GET Request using this Client.",12,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"futureresponse"}}],[11,"request","","Send a constructed Request using this Client.",12,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"name":"futureresponse"}}],[11,"call","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usedefaultconnector"}}],[11,"default","","",15,{"inputs":[],"output":{"generics":["usedefaultconnector","body"],"name":"config"}}],[11,"body","","Set the body stream to be used by the `Client`.",15,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"connector","","Set the `Connect` type to be used.",15,{"inputs":[{"name":"self"},{"name":"cc"}],"output":{"name":"config"}}],[11,"keep_alive","","Enable or disable keep-alive mechanics.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"keep_alive_timeout","","Set an optional timeout for idle sockets being kept-alive.",15,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"config"}}],[11,"http1_writev","","Set whether HTTP/1 connections should try to use vectored writes, or always flatten into a single buffer.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"retry_canceled_requests","","Set whether to retry requests that get disrupted before ever starting to write.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"set_host","","Set whether to automatically add the `Host` header to requests.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"build","","Construct the Client with this configuration.",15,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"client"}}],[11,"executor","","Construct a Client with this configuration and an executor.",15,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"client"}}],[11,"build","","Construct the Client with this configuration.",15,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["httpconnector"],"name":"client"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[0,"error","hyper","Error and Result module.",null,null],[3,"UriError","hyper::error","An error parsing a `Uri`.",null,null],[3,"Canceled","","A pending item was dropped before ever being processed.",null,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",16,null],[13,"Uri","","An invalid `Uri`, such as `exam ple.domain`.",16,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",16,null],[13,"Header","","An invalid `Header`.",16,null],[13,"TooLarge","","A message head is too large to be reasonable.",16,null],[13,"Incomplete","","A message reached EOF, but is not complete.",16,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",16,null],[13,"Timeout","","A timeout occurred waiting for an IO event.",16,null],[13,"Upgrade","","A protocol upgrade was encountered, but not yet supported in hyper.",16,null],[13,"Cancel","","A pending item was dropped before ever being processed.",16,null],[13,"Closed","","Indicates a connection is closed.",16,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",16,null],[13,"Utf8","","Parsing a field as string failed",16,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"from","","",16,{"inputs":[{"name":"urierror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","hyper","",0,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["method","error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"method"}}],[0,"header","","Headers container, and common header fields.",null,null],[3,"LanguageTag","hyper::header","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",18,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",18,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",18,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",18,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",18,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",18,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",18,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",19,null],[3,"HttpDate","","A timestamp with HTTP formatting and parsing",null,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",20,null],[12,"quality","","The quality (client or server preference) for the value.",20,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",21,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",22,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",23,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",24,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",25,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",26,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",27,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",28,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",29,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",30,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",31,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",32,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",33,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",34,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input. Note: A compliant client MUST always send a password (which may be the empty string).",34,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",35,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",36,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",37,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266.",null,null],[12,"disposition","","The disposition",38,null],[12,"parameters","","Disposition parameters",38,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",39,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",41,null],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",null,null],[12,"0","","",42,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",43,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",44,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[3,"CookieIter","","Iterator for cookie.",null,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",45,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",46,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",47,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",48,null],[3,"Host","","The `Host` header.",null,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",49,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",50,null],[3,"LastEventId","","`Last-Event-ID` header, defined in RFC3864",null,null],[12,"0","","",51,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",52,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[3,"Origin","","The `Origin` header.",null,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",53,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",54,null],[3,"ProxyAuthorization","","`Proxy-Authorization` header, defined in RFC7235",null,null],[12,"0","","",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",56,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",57,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",57,null],[3,"Te","","`TE` header, defined in RFC7230",null,null],[12,"0","","",58,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",59,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",60,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",61,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",61,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[3,"Warning","","`Warning` header, defined in RFC7234",null,null],[12,"code","","The 3 digit warn code.",62,null],[12,"agent","","The name or pseudonym of the server adding this header.",62,null],[12,"text","","The warning message describing the error.",62,null],[12,"date","","An optional warning date.",62,null],[3,"Raw","","A raw header value.",null,null],[3,"Formatter","","A formatter used to serialize headers to an output stream.",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",63,null],[13,"Iso_8859_1","","ISO-8859-1",63,null],[13,"Iso_8859_2","","ISO-8859-2",63,null],[13,"Iso_8859_3","","ISO-8859-3",63,null],[13,"Iso_8859_4","","ISO-8859-4",63,null],[13,"Iso_8859_5","","ISO-8859-5",63,null],[13,"Iso_8859_6","","ISO-8859-6",63,null],[13,"Iso_8859_7","","ISO-8859-7",63,null],[13,"Iso_8859_8","","ISO-8859-8",63,null],[13,"Iso_8859_9","","ISO-8859-9",63,null],[13,"Iso_8859_10","","ISO-8859-10",63,null],[13,"Shift_Jis","","Shift_JIS",63,null],[13,"Euc_Jp","","EUC-JP",63,null],[13,"Iso_2022_Kr","","ISO-2022-KR",63,null],[13,"Euc_Kr","","EUC-KR",63,null],[13,"Iso_2022_Jp","","ISO-2022-JP",63,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",63,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",63,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",63,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",63,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",63,null],[13,"Gb2312","","GB2312",63,null],[13,"Big5","","Big5",63,null],[13,"Koi8_R","","KOI8-R",63,null],[13,"Ext","","An arbitrary charset specified as a string",63,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",64,null],[13,"Brotli","","The `br` encoding.",64,null],[13,"Gzip","","The `gzip` encoding.",64,null],[13,"Deflate","","The `deflate` encoding.",64,null],[13,"Compress","","The `compress` encoding.",64,null],[13,"Identity","","The `identity` encoding.",64,null],[13,"Trailers","","The `trailers` encoding.",64,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",64,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",65,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",65,null],[13,"Unregistered","","The given range unit is not registered at IANA.",65,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",66,null],[13,"Null","","A hidden origin",66,null],[13,"Value","","Allow one particular origin",66,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",67,null],[13,"NoStore","","\"no-store\"",67,null],[13,"NoTransform","","\"no-transform\"",67,null],[13,"OnlyIfCached","","\"only-if-cached\"",67,null],[13,"MaxAge","","\"max-age=delta\"",67,null],[13,"MaxStale","","\"max-stale=delta\"",67,null],[13,"MinFresh","","\"min-fresh=delta\"",67,null],[13,"MustRevalidate","","\"must-revalidate\"",67,null],[13,"Public","","\"public\"",67,null],[13,"Private","","\"private\"",67,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",67,null],[13,"SMaxAge","","\"s-maxage=delta\"",67,null],[13,"Extension","","Extension directives. Optionally include an argument.",67,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",68,null],[13,"Close","","The `close` connection value.",68,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",68,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body.",null,null],[13,"Inline","","Inline implies default processing",69,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",69,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",69,null],[4,"DispositionParam","","A parameter to the disposition type.",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",70,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",70,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",71,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",71,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",71,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",71,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",71,null],[12,"resp","","other-range-resp",71,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",72,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",73,null],[13,"Items","","Only the listed items are a match",73,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",74,null],[13,"Items","","Only the listed items are a match",74,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",75,null],[13,"Date","","The date when the client retrieved the resource",75,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",76,null],[13,"Appendix","","appendix.",76,null],[13,"Bookmark","","bookmark.",76,null],[13,"Chapter","","chapter.",76,null],[13,"Contents","","contents.",76,null],[13,"Copyright","","copyright.",76,null],[13,"Current","","current.",76,null],[13,"DescribedBy","","describedby.",76,null],[13,"Edit","","edit.",76,null],[13,"EditMedia","","edit-media.",76,null],[13,"Enclosure","","enclosure.",76,null],[13,"First","","first.",76,null],[13,"Glossary","","glossary.",76,null],[13,"Help","","help.",76,null],[13,"Hub","","hub.",76,null],[13,"Index","","index.",76,null],[13,"Last","","last.",76,null],[13,"LatestVersion","","latest-version.",76,null],[13,"License","","license.",76,null],[13,"Next","","next.",76,null],[13,"NextArchive","","next-archive.",76,null],[13,"Payment","","payment.",76,null],[13,"Prev","","prev.",76,null],[13,"PredecessorVersion","","predecessor-version.",76,null],[13,"Previous","","previous.",76,null],[13,"PrevArchive","","prev-archive.",76,null],[13,"Related","","related.",76,null],[13,"Replies","","replies.",76,null],[13,"Section","","section.",76,null],[13,"RelationTypeSelf","","self.",76,null],[13,"Service","","service.",76,null],[13,"Start","","start.",76,null],[13,"Stylesheet","","stylesheet.",76,null],[13,"Subsection","","subsection.",76,null],[13,"SuccessorVersion","","successor-version.",76,null],[13,"Up","","up.",76,null],[13,"VersionHistory","","versionHistory.",76,null],[13,"Via","","via.",76,null],[13,"WorkingCopy","","working-copy.",76,null],[13,"WorkingCopyOf","","working-copy-of.",76,null],[13,"ExtRelType","","ext-rel-type.",76,null],[4,"MediaDesc","","A Media Descriptors Enum based on: [https://www.w3.org/TR/html401/types.html#h-6.13][url]",null,null],[13,"Screen","","screen.",77,null],[13,"Tty","","tty.",77,null],[13,"Tv","","tv.",77,null],[13,"Projection","","projection.",77,null],[13,"Handheld","","handheld.",77,null],[13,"Print","","print.",77,null],[13,"Braille","","braille.",77,null],[13,"Aural","","aural.",77,null],[13,"All","","all.",77,null],[13,"Extension","","Unrecognized media descriptor extension.",77,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",78,null],[13,"Ext","","Every value other than `no-cache`.",78,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",79,null],[13,"ReturnRepresentation","","\"return=representation\"",79,null],[13,"ReturnMinimal","","\"return=minimal\"",79,null],[13,"HandlingStrict","","\"handling=strict\"",79,null],[13,"HandlingLenient","","\"handling=lenient\"",79,null],[13,"Wait","","\"wait=delta\"",79,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",80,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,null],[13,"Last","","Get last x bytes (\"-x\")",81,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",82,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,null],[13,"SameOrigin","","`same-origin`",82,null],[13,"Origin","","`origin`",82,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,null],[13,"UnsafeUrl","","`unsafe-url`",82,null],[13,"StrictOrigin","","`strict-origin`",82,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,null],[4,"RetryAfter","","The `Retry-After` header.",null,null],[13,"Delay","","Retry after this duration has elapsed",83,null],[13,"DateTime","","Retry after the given DateTime",83,null],[4,"ProtocolName","","A protocol name used to identify a specific protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",84,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",84,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",84,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",84,null],[13,"Unregistered","","Any other protocol name not known to hyper",84,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",85,null],[13,"Items","","Only the listed items are a match",85,null],[5,"qitem","","Convenience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float or integer.",null,{"inputs":[{"name":"t"}],"output":{"name":"quality"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"from_str","","",65,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"star","","A constructor to easily create `Accept: */*`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",25,{"inputs":[],"output":{"name":"accept"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",86,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",86,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowcredentials"],"name":"result"}}],[11,"fmt_header","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",26,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolalloworigin"],"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,{"inputs":[{"name":"raw"}],"output":{"generics":["authorization"],"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",34,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"generics":["basic"],"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",35,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",35,{"inputs":[{"name":"str"}],"output":{"generics":["bearer"],"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",36,{"inputs":[{"name":"raw"}],"output":{"generics":["cachecontrol"],"name":"result"}}],[11,"fmt_header","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",67,{"inputs":[{"name":"str"}],"output":{"generics":["cachedirective","option"],"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"generics":["connectionoption"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",37,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",37,{"inputs":[],"output":{"name":"connection"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,{"inputs":[{"name":"raw"}],"output":{"generics":["contentdisposition"],"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlength"],"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"contentlocation"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",71,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text","","A constructor  to easily create a `Content-Type: text/plain` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text_utf8","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"xml","","A constructor  to easily create a `Content-Type: text/xml` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"octet_stream","","A constructor  to easily create a `Content-Type: application/octet-stream` header.",44,{"inputs":[],"output":{"name":"contenttype"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"new","","Creates a new `Cookie` header.",87,{"inputs":[],"output":{"name":"cookie"}}],[11,"set","","Sets a name and value for the `Cookie`.",87,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"append","","Append a name and value for the `Cookie`.",87,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"get","","Get a value for the name, if it exists.",87,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Iterate cookies.",87,{"inputs":[{"name":"self"}],"output":{"name":"cookieiter"}}],[11,"header_name","","",87,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",87,{"inputs":[{"name":"raw"}],"output":{"generics":["cookie"],"name":"result"}}],[11,"fmt_header","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",72,{"inputs":[{"name":"raw"}],"output":{"generics":["expect"],"name":"result"}}],[11,"fmt_header","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a `Host` header, providing the hostname and optional port.",89,{"inputs":[{"name":"h"},{"name":"p"}],"output":{"name":"host"}}],[11,"hostname","","Get the hostname, such as example.domain.",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"port","","Get the optional port number.",89,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"header_name","","",89,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",89,{"inputs":[{"name":"raw"}],"output":{"generics":["host"],"name":"result"}}],[11,"fmt_header","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",89,{"inputs":[{"name":"str"}],"output":{"generics":["host"],"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"header_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",73,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,{"inputs":[{"name":"raw"}],"output":{"generics":["ifrange"],"name":"result"}}],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"lasteventid"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",90,{"inputs":[{"generics":["linkvalue"],"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",90,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",90,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":null}],[11,"new","","Create `LinkValue` from URI-Reference.",91,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",91,{"inputs":[{"name":"self"}],"output":{"generics":["mime"],"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",91,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",91,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",91,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",91,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",91,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",91,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"header_name","","",90,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",90,{"inputs":[{"name":"raw"}],"output":{"generics":["link"],"name":"result"}}],[11,"fmt_header","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",90,{"inputs":[{"name":"str"}],"output":{"generics":["link"],"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",77,{"inputs":[{"name":"str"}],"output":{"generics":["mediadesc"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",76,{"inputs":[{"name":"str"}],"output":{"generics":["relationtype"],"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",92,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",92,null],[11,"header_name","","",92,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",92,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Origin` header.",93,{"inputs":[{"name":"s"},{"name":"h"},{"generics":["u16"],"name":"option"}],"output":{"name":"origin"}}],[11,"null","","Creates a `Null` `Origin` header.",93,{"inputs":[],"output":{"name":"origin"}}],[11,"is_null","","Checks if `Origin` is `Null`.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scheme","","The scheme, such as http or https.",93,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","The host, such as `Host { hostname: \"hyper.rs\".to_owned(), port: None}`.",93,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"header_name","","",93,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",93,{"inputs":[{"name":"raw"}],"output":{"generics":["origin"],"name":"result"}}],[11,"fmt_header","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",93,{"inputs":[{"name":"str"}],"output":{"generics":["origin"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,{"inputs":[{"name":"raw"}],"output":{"generics":["pragma"],"name":"result"}}],[11,"fmt_header","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,{"inputs":[{"name":"raw"}],"output":{"generics":["prefer"],"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"generics":["preference","option"],"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,{"inputs":[{"name":"raw"}],"output":{"generics":["preferenceapplied"],"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"proxyauthorization"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,{"inputs":[{"name":"raw"}],"output":{"generics":["proxyauthorization"],"name":"result"}}],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_satisfiable_range","","Given the full length of the entity, attempt to normalize the byte range into an satisfiable end-inclusive (from, to) range.",81,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"generics":["range"],"name":"result"}}],[11,"from_str","","",81,{"inputs":[{"name":"str"}],"output":{"generics":["byterangespec"],"name":"result"}}],[11,"header_name","","",80,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",80,{"inputs":[{"name":"raw"}],"output":{"generics":["range"],"name":"result"}}],[11,"fmt_header","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",94,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",94,null],[11,"header_name","","",94,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",94,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,{"inputs":[{"name":"raw"}],"output":{"generics":["referrerpolicy"],"name":"result"}}],[11,"fmt_header","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"retryafter"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"header_name","","",83,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",83,{"inputs":[{"name":"raw"}],"output":{"generics":["retryafter"],"name":"result"}}],[11,"fmt_header","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",95,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",95,null],[11,"header_name","","",95,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",95,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,{"inputs":[{"name":"raw"}],"output":{"generics":["setcookie"],"name":"result"}}],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",57,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",57,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"generics":["stricttransportsecurity"],"name":"result"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,{"inputs":[{"name":"raw"}],"output":{"generics":["stricttransportsecurity"],"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"te"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",59,{"inputs":[],"output":{"name":"transferencoding"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",60,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"from_str","","",84,{"inputs":[{"name":"str"}],"output":{"generics":["protocolname"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Protocol with the given name and version",61,{"inputs":[{"name":"protocolname"},{"generics":["string"],"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",61,{"inputs":[{"name":"str"}],"output":{"generics":["protocol"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"new","","Creates a new $id",96,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",96,null],[11,"header_name","","",96,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",96,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"header_name","","",85,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",85,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[11,"fmt_header","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"warning"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",62,{"inputs":[{"name":"raw"}],"output":{"generics":["warning"],"name":"result"}}],[11,"fmt_header","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",62,{"inputs":[{"name":"str"}],"output":{"generics":["warning"],"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the amount of lines.",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"one","","Returns the line if there is only 1.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterate the lines of raw bytes.",97,{"inputs":[{"name":"self"}],"output":{"name":"rawlines"}}],[11,"push","","Append a line to this `Raw` header value.",97,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,null],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",97,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"name":"string"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",97,{"inputs":[{"name":"str"}],"output":{"name":"raw"}}],[11,"from","","",97,null],[11,"from","","",97,{"inputs":[{"name":"bytes"}],"output":{"name":"raw"}}],[11,"index","","",97,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",63,{"inputs":[{"name":"str"}],"output":{"generics":["charset"],"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",64,{"inputs":[{"name":"str"}],"output":{"generics":["encoding"],"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",19,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["entitytag"],"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"from_str","","",98,{"inputs":[{"name":"str"}],"output":{"generics":["httpdate"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",98,{"inputs":[{"name":"systemtime"}],"output":{"name":"httpdate"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"quality"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",20,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"generics":["qualityitem"],"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",100,null],[12,"language_tag","","The human language details of the `value`, if available.",100,null],[12,"value","","The parameter value, as expressed in octets.",100,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,{"inputs":[{"name":"raw"}],"output":{"generics":["vec"],"name":"result"}}],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"generics":["extendedvalue"],"name":"result"}}],[5,"http_percent_encode","","Percent encode a sequence of bytes with a character set defined in [https://tools.ietf.org/html/rfc5987#section-3.2][url]",null,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",102,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",102,{"inputs":[{"name":"raw"}],"output":{"name":"result"}}],[10,"fmt_header","","Format a header to outgoing stream.",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_line","","Format one 'line' of a header.",103,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",104,{"inputs":[],"output":{"name":"headers"}}],[11,"with_capacity","","Creates a new `Headers` struct with space reserved for `len` headers.",104,{"inputs":[{"name":"usize"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",104,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the header fields.",104,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",104,{"inputs":[{"name":"self"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["raw"],"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",104,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"append_raw","","Append a value to raw value of this header.",104,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":null}],[11,"remove_raw","","Remove a header by name.",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",106,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",106,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"raw","","Access the raw value of the header.",106,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",104,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",104,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",104,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"empty","hyper","Return an empty body stream",107,{"inputs":[],"output":{"name":"body"}}],[11,"pair","","Return a body stream with an associated sender half",107,null],[11,"is_empty","","Returns if this body was constructed via `Body::empty()`.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"body"}}],[11,"poll","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",107,{"inputs":[{"generics":["result"],"name":"receiver"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"chunk"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"bytes"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"body"}}],[11,"from","","",107,null],[11,"from","","",107,{"inputs":[{"name":"cow"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"string"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"name":"str"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"body"}}],[11,"from","","",107,{"inputs":[{"generics":["body"],"name":"option"}],"output":{"name":"body"}}],[11,"from","","",108,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"chunk"}}],[11,"from","","",108,null],[11,"from","","",108,{"inputs":[{"name":"string"}],"output":{"name":"chunk"}}],[11,"from","","",108,{"inputs":[{"name":"str"}],"output":{"name":"chunk"}}],[11,"from","","",108,{"inputs":[{"name":"bytes"}],"output":{"name":"chunk"}}],[11,"deref","","",108,null],[11,"as_ref","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"chunk"}}],[11,"into_iter","","",108,null],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"new","","Construct a new Request.",109,{"inputs":[{"name":"method"},{"name":"uri"}],"output":{"name":"request"}}],[11,"uri","","Read the Request Uri.",109,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"version","","Read the Request Version.",109,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"headers","","Read the Request headers.",109,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",109,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"body_ref","","Read the Request body.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"body_mut","","Get a mutable reference to the Request body.",109,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"path","","The target path of this Request.",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"query","","The query string of this Request.",109,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_method","","Set the Method of this request.",109,{"inputs":[{"name":"self"},{"name":"method"}],"output":null}],[11,"headers_mut","","Get a mutable reference to the Request headers.",109,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"set_uri","","Set the `Uri` of this request.",109,{"inputs":[{"name":"self"},{"name":"uri"}],"output":null}],[11,"set_version","","Set the `HttpVersion` of this request.",109,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":null}],[11,"set_body","","Set the body of the request.",109,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"set_proxy","","Set that the URI should use the absolute form.",109,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"deconstruct","","Deconstruct this Request into its pieces.",109,null],[11,"body","","Take the Request body.",109,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a default response",110,{"inputs":[],"output":{"name":"response"}}],[11,"version","","Get the HTTP version of this response.",110,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"headers","","Get the headers from the response.",110,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"headers_mut","","Get a mutable reference to the headers.",110,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"status","","Get the status from the server.",110,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"set_status","","Set the `StatusCode` for this response.",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":null}],[11,"with_status","","Set the status and move the Response.",110,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"self"}}],[11,"with_header","","Set a header and move the Response.",110,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"self"}}],[11,"with_headers","","Set the headers and move the Response.",110,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"self"}}],[11,"set_body","","Set the body.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"with_body","","Set the body and move the Response.",110,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"body_ref","","Read the body.",110,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"body","","Take the `Body` of this response.",110,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"response"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"server","","HTTP Server",null,null],[8,"NewService","hyper::server","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",111,null],[16,"Response","","Responses given by the service",111,null],[16,"Error","","Errors produced by the service",111,null],[16,"Instance","","The `Service` value created by this factory",111,null],[10,"new_service","","Create and return a new service value.",111,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[8,"Service","","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",3,null],[16,"Response","","Responses given by the service.",3,null],[16,"Error","","Errors produced by the service.",3,null],[16,"Future","","The future response value.",3,null],[10,"call","","Process the request and return the response asynchronously.",3,null],[3,"Response","","An HTTP Response",null,null],[3,"Request","","An HTTP Request",null,null],[3,"Http","","A configuration of the HTTP protocol.",null,null],[3,"Server","","An instance of a server created through `Http::bind`.",null,null],[3,"Serve","","A stream mapping incoming IOs to new services.",null,null],[3,"AddrIncoming","","A stream of connections from binding to an address.",null,null],[5,"const_service","","Create a `NewService` by sharing references of `service.",null,{"inputs":[{"name":"s"}],"output":{"name":"constservice"}}],[5,"service_fn","","Create a `Service` from a function.",null,{"inputs":[{"name":"f"}],"output":{"name":"servicefn"}}],[0,"conn","","Lower-level Server connection API.",null,null],[3,"Connection","hyper::server::conn","A future binding a connection with a Service.",null,null],[3,"Parts","","Deconstructed parts of a `Connection`.",null,null],[12,"io","","The original IO object used in the handshake.",112,null],[12,"read_buf","","A buffer of bytes that have been read but not processed as HTTP.",112,null],[12,"service","","The `Service` used to serve this connection.",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"disable_keep_alive","","Disables keep-alive for this connection.",113,{"inputs":[{"name":"self"}],"output":null}],[11,"into_parts","","Return the inner IO object, and additional information.",113,{"inputs":[{"name":"self"}],"output":{"name":"parts"}}],[11,"poll_without_shutdown","","Poll the connection for completion, but without calling `shutdown` on the underlying IO.",113,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind_connection","hyper::server","Use this `Http` instance to create a new server task which handles the connection `io` provided.",114,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"i"},{"name":"socketaddr"},{"name":"s"}],"output":null}],[11,"bind_transport","","",114,null],[11,"from","hyper","",109,{"inputs":[{"generics":["__protorequest","body"],"name":"message"}],"output":{"name":"request"}}],[11,"into","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["__protoresponse"],"name":"message"}}],[11,"fmt","hyper::server","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of the HTTP protocol, ready to spawn a server or start accepting connections.",114,{"inputs":[],"output":{"name":"http"}}],[11,"keep_alive","","Enables or disables HTTP keep-alive.",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"max_buf_size","","Set the maximum buffer size for the connection.",114,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pipeline","","Aggregates flushes to better support pipelined responses.",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"sleep_on_errors","","Swallow connection accept errors. Instead of passing up IO errors when the server is under heavy load the errors will be ignored. Some connection accept errors (like \"connection reset\") can be ignored, some (like \"too many files open\") may consume 100% CPU and a timout of 10ms is used in that case.",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"bind","","Bind the provided `addr` and return a server ready to handle connections.",114,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"s"}],"output":{"generics":["server"],"name":"result"}}],[11,"serve_addr_handle","","Bind the provided `addr` and return a server with a shared `Core`.",114,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"handle"},{"name":"s"}],"output":{"generics":["serve"],"name":"result"}}],[11,"serve_incoming","","Bind the provided stream of incoming IO objects with a `NewService`.",114,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":{"name":"serve"}}],[11,"serve_connection","","Bind a connection together with a Service.",114,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":{"name":"connection"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"http"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local address that this server is bound to.",117,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"handle","","Returns a handle to the underlying event loop that this server will be running on.",117,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_timeout","","Configure the amount of time this server will wait for a \"graceful shutdown\".",117,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"run","","Execute this server infinitely.",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"run_until","","Execute this server until the given future, `shutdown_signal`, resolves.",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"run_threads","","Run the server on multiple threads.",117,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"incoming_ref","","Get a reference to the incoming stream.",115,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"poll","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"local_addr","","Get the local address bound to this listener.",116,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","hyper","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"try_from","","Try to convert a `u16` into a `StatusCode`.",1,{"inputs":[{"name":"u16"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"as_u16","","Get the `u16` code from this `StatusCode`.",1,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",1,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_informational","","Check if this `StatusCode` is within 100-199.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if this `StatusCode` is within 200-299.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if this `StatusCode` is within 300-399.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if this `StatusCode` is within 400-499.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if this `StatusCode` is within 500-599.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if this `StatusCode` is not within 100-599.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"statuscode"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"hash","","",118,null],[11,"path","","Get the path of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"scheme","","Get the scheme of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"authority","","Get the authority of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","Get the host of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Get the port of this `Uri`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",118,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_absolute","","Returns whether this URI is in `absolute-form`.",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",118,{"inputs":[{"name":"str"}],"output":{"generics":["uri","urierror"],"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"as_ref","","",118,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"uri"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","hyper::error","",119,{"inputs":[{"name":"self"}],"output":{"name":"urierror"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","hyper","",2,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["httpversion","error"],"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"httpversion"}}],[14,"header","","",null,null],[11,"clone","hyper::header","",18,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["languagetag","error"],"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",18,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",18,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}]],"paths":[[4,"Method"],[4,"StatusCode"],[4,"HttpVersion"],[8,"Service"],[3,"Parts"],[3,"Builder"],[3,"SendRequest"],[3,"Connection"],[3,"Handshake"],[3,"ResponseFuture"],[3,"HttpConnector"],[8,"Connect"],[3,"Client"],[3,"FutureResponse"],[3,"UseDefaultConnector"],[3,"Config"],[4,"Error"],[3,"Canceled"],[3,"LanguageTag"],[3,"EntityTag"],[3,"QualityItem"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentLocation"],[3,"ContentRange"],[3,"ContentType"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastEventId"],[3,"LastModified"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"ProxyAuthorization"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"Te"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"Warning"],[4,"Charset"],[4,"Encoding"],[4,"RangeUnit"],[4,"AccessControlAllowOrigin"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"RelationType"],[4,"MediaDesc"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"RetryAfter"],[4,"ProtocolName"],[4,"Vary"],[3,"AccessControlAllowCredentials"],[3,"Cookie"],[3,"CookieIter"],[3,"Host"],[3,"Link"],[3,"LinkValue"],[3,"Location"],[3,"Origin"],[3,"Referer"],[3,"Server"],[3,"UserAgent"],[3,"Raw"],[3,"HttpDate"],[3,"Quality"],[3,"ExtendedValue"],[8,"Scheme"],[8,"Header"],[3,"Formatter"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"Body"],[3,"Chunk"],[3,"Request"],[3,"Response"],[8,"NewService"],[3,"Parts"],[3,"Connection"],[3,"Http"],[3,"Serve"],[3,"AddrIncoming"],[3,"Server"],[3,"Uri"],[3,"UriError"]]};
searchIndex["hyper_tls"] = {"doc":"hyper-tls","items":[[3,"Error","hyper_tls","An error returned from the TLS implementation.",null,null],[3,"HttpsConnector","","A Connector for the `https` scheme.",null,null],[3,"HttpsConnecting","","A Future representing work to connect to a URL, and a TLS handshake.",null,null],[4,"MaybeHttpsStream","","A stream that might be protected with TLS.",null,null],[13,"Http","","A stream over plain text.",0,null],[13,"Https","","A stream protected with TLS.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"httpsconnector"}}],[11,"new","","Construct a new HttpsConnector.",1,{"inputs":[{"name":"usize"},{"name":"handle"}],"output":{"generics":["error"],"name":"result"}}],[11,"danger_disable_hostname_verification","","Disable hostname verification when connecting.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"from","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","","",1,null],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",0,null],[11,"shutdown","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"openssl_error","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}]],"paths":[[4,"MaybeHttpsStream"],[3,"HttpsConnector"],[3,"HttpsConnecting"],[3,"Error"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string","errors"],"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec"],"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"generics":["string","errors"],"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[7,"PUNYCODE_PREFIX","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["iovec"] = {"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",null,null],[0,"unix","","IoVec extensions for Unix platforms.",null,null],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",null,null],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",null,null],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",null,null],[11,"from_bytes","","",0,null],[11,"from_bytes_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null]],"paths":[[3,"IoVec"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","Write integer to an `io::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"generics":["usize"],"name":"result"}}],[5,"fmt","","Write integer to an `fmt::Write`.",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",null,null]],"paths":[]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","Returns a copy of the contents of the lazy cell.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",35,null],[12,"ipi_spec_dst","","",35,null],[12,"ipi_addr","","",35,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",36,null],[12,"ifa_name","","",36,null],[12,"ifa_flags","","",36,null],[12,"ifa_addr","","",36,null],[12,"ifa_netmask","","",36,null],[12,"ifa_ifu","","",36,null],[12,"ifa_data","","",36,null],[3,"in6_rtmsg","","",null,null],[3,"dirent","","",null,null],[12,"d_ino","","",37,null],[12,"d_off","","",37,null],[12,"d_reclen","","",37,null],[12,"d_type","","",37,null],[12,"d_name","","",37,null],[3,"dirent64","","",null,null],[12,"d_ino","","",38,null],[12,"d_off","","",38,null],[12,"d_reclen","","",38,null],[12,"d_type","","",38,null],[12,"d_name","","",38,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",39,null],[12,"rlim_max","","",39,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",41,null],[12,"pw_passwd","","",41,null],[12,"pw_uid","","",41,null],[12,"pw_gid","","",41,null],[12,"pw_gecos","","",41,null],[12,"pw_dir","","",41,null],[12,"pw_shell","","",41,null],[3,"spwd","","",null,null],[12,"sp_namp","","",42,null],[12,"sp_pwdp","","",42,null],[12,"sp_lstchg","","",42,null],[12,"sp_min","","",42,null],[12,"sp_max","","",42,null],[12,"sp_warn","","",42,null],[12,"sp_inact","","",42,null],[12,"sp_expire","","",42,null],[12,"sp_flag","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",70,null],[12,"version","","",70,null],[12,"reserved","","",70,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",71,null],[12,"ipi6_ifindex","","",71,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",72,null],[12,"aio_lio_opcode","","",72,null],[12,"aio_reqprio","","",72,null],[12,"aio_buf","","",72,null],[12,"aio_nbytes","","",72,null],[12,"aio_sigevent","","",72,null],[12,"aio_offset","","",72,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",73,null],[12,"e_exit","","",73,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",74,null],[12,"tv_usec","","",74,null],[3,"utmpx","","",null,null],[12,"ut_type","","",75,null],[12,"ut_pid","","",75,null],[12,"ut_line","","",75,null],[12,"ut_id","","",75,null],[12,"ut_user","","",75,null],[12,"ut_host","","",75,null],[12,"ut_exit","","",75,null],[12,"ut_session","","",75,null],[12,"ut_tv","","",75,null],[12,"ut_addr_v6","","",75,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",76,null],[12,"sa_mask","","",76,null],[12,"sa_flags","","",76,null],[12,"sa_restorer","","",76,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",77,null],[12,"ss_flags","","",77,null],[12,"ss_size","","",77,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",78,null],[12,"si_errno","","",78,null],[12,"si_code","","",78,null],[12,"_pad","","",78,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",79,null],[12,"gl_pathv","","",79,null],[12,"gl_offs","","",79,null],[12,"gl_flags","","",79,null],[3,"statfs","","",null,null],[12,"f_type","","",80,null],[12,"f_bsize","","",80,null],[12,"f_blocks","","",80,null],[12,"f_bfree","","",80,null],[12,"f_bavail","","",80,null],[12,"f_files","","",80,null],[12,"f_ffree","","",80,null],[12,"f_fsid","","",80,null],[12,"f_namelen","","",80,null],[12,"f_frsize","","",80,null],[3,"msghdr","","",null,null],[12,"msg_name","","",81,null],[12,"msg_namelen","","",81,null],[12,"msg_iov","","",81,null],[12,"msg_iovlen","","",81,null],[12,"msg_control","","",81,null],[12,"msg_controllen","","",81,null],[12,"msg_flags","","",81,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",82,null],[12,"cmsg_level","","",82,null],[12,"cmsg_type","","",82,null],[3,"termios","","",null,null],[12,"c_iflag","","",83,null],[12,"c_oflag","","",83,null],[12,"c_cflag","","",83,null],[12,"c_lflag","","",83,null],[12,"c_line","","",83,null],[12,"c_cc","","",83,null],[12,"c_ispeed","","",83,null],[12,"c_ospeed","","",83,null],[3,"flock","","",null,null],[12,"l_type","","",84,null],[12,"l_whence","","",84,null],[12,"l_start","","",84,null],[12,"l_len","","",84,null],[12,"l_pid","","",84,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",85,null],[12,"ordblks","","",85,null],[12,"smblks","","",85,null],[12,"hblks","","",85,null],[12,"hblkhd","","",85,null],[12,"usmblks","","",85,null],[12,"fsmblks","","",85,null],[12,"uordblks","","",85,null],[12,"fordblks","","",85,null],[12,"keepcost","","",85,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",86,null],[12,"nlmsg_type","","",86,null],[12,"nlmsg_flags","","",86,null],[12,"nlmsg_seq","","",86,null],[12,"nlmsg_pid","","",86,null],[3,"nlmsgerr","","",null,null],[12,"error","","",87,null],[12,"msg","","",87,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",88,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",89,null],[12,"nm_block_nr","","",89,null],[12,"nm_frame_size","","",89,null],[12,"nm_frame_nr","","",89,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",90,null],[12,"nm_len","","",90,null],[12,"nm_group","","",90,null],[12,"nm_pid","","",90,null],[12,"nm_uid","","",90,null],[12,"nm_gid","","",90,null],[3,"nlattr","","",null,null],[12,"nla_len","","",91,null],[12,"nla_type","","",91,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",92,null],[12,"rt_dst","","",92,null],[12,"rt_gateway","","",92,null],[12,"rt_genmask","","",92,null],[12,"rt_flags","","",92,null],[12,"rt_pad2","","",92,null],[12,"rt_pad3","","",92,null],[12,"rt_tos","","",92,null],[12,"rt_class","","",92,null],[12,"rt_pad4","","",92,null],[12,"rt_metric","","",92,null],[12,"rt_dev","","",92,null],[12,"rt_mtu","","",92,null],[12,"rt_window","","",92,null],[12,"rt_irtt","","",92,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",93,null],[12,"loads","","",93,null],[12,"totalram","","",93,null],[12,"freeram","","",93,null],[12,"sharedram","","",93,null],[12,"bufferram","","",93,null],[12,"totalswap","","",93,null],[12,"freeswap","","",93,null],[12,"procs","","",93,null],[12,"pad","","",93,null],[12,"totalhigh","","",93,null],[12,"freehigh","","",93,null],[12,"mem_unit","","",93,null],[12,"_f","","",93,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",94,null],[12,"msg_stime","","",94,null],[12,"msg_rtime","","",94,null],[12,"msg_ctime","","",94,null],[12,"msg_qnum","","",94,null],[12,"msg_qbytes","","",94,null],[12,"msg_lspid","","",94,null],[12,"msg_lrpid","","",94,null],[3,"stat","","",null,null],[12,"st_dev","","",95,null],[12,"st_ino","","",95,null],[12,"st_nlink","","",95,null],[12,"st_mode","","",95,null],[12,"st_uid","","",95,null],[12,"st_gid","","",95,null],[12,"st_rdev","","",95,null],[12,"st_size","","",95,null],[12,"st_blksize","","",95,null],[12,"st_blocks","","",95,null],[12,"st_atime","","",95,null],[12,"st_atime_nsec","","",95,null],[12,"st_mtime","","",95,null],[12,"st_mtime_nsec","","",95,null],[12,"st_ctime","","",95,null],[12,"st_ctime_nsec","","",95,null],[3,"stat64","","",null,null],[12,"st_dev","","",96,null],[12,"st_ino","","",96,null],[12,"st_nlink","","",96,null],[12,"st_mode","","",96,null],[12,"st_uid","","",96,null],[12,"st_gid","","",96,null],[12,"st_rdev","","",96,null],[12,"st_size","","",96,null],[12,"st_blksize","","",96,null],[12,"st_blocks","","",96,null],[12,"st_atime","","",96,null],[12,"st_atime_nsec","","",96,null],[12,"st_mtime","","",96,null],[12,"st_mtime_nsec","","",96,null],[12,"st_ctime","","",96,null],[12,"st_ctime_nsec","","",96,null],[3,"statfs64","","",null,null],[12,"f_type","","",97,null],[12,"f_bsize","","",97,null],[12,"f_blocks","","",97,null],[12,"f_bfree","","",97,null],[12,"f_bavail","","",97,null],[12,"f_files","","",97,null],[12,"f_ffree","","",97,null],[12,"f_fsid","","",97,null],[12,"f_namelen","","",97,null],[12,"f_frsize","","",97,null],[12,"f_flags","","",97,null],[12,"f_spare","","",97,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",98,null],[12,"f_frsize","","",98,null],[12,"f_blocks","","",98,null],[12,"f_bfree","","",98,null],[12,"f_bavail","","",98,null],[12,"f_files","","",98,null],[12,"f_ffree","","",98,null],[12,"f_favail","","",98,null],[12,"f_fsid","","",98,null],[12,"f_flag","","",98,null],[12,"f_namemax","","",98,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",99,null],[12,"exponent","","",99,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",100,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",101,null],[12,"swd","","",101,null],[12,"ftw","","",101,null],[12,"fop","","",101,null],[12,"rip","","",101,null],[12,"rdp","","",101,null],[12,"mxcsr","","",101,null],[12,"mxcr_mask","","",101,null],[12,"_st","","",101,null],[12,"_xmm","","",101,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",102,null],[12,"swd","","",102,null],[12,"ftw","","",102,null],[12,"fop","","",102,null],[12,"rip","","",102,null],[12,"rdp","","",102,null],[12,"mxcsr","","",102,null],[12,"mxcr_mask","","",102,null],[12,"st_space","","",102,null],[12,"xmm_space","","",102,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",103,null],[12,"r14","","",103,null],[12,"r13","","",103,null],[12,"r12","","",103,null],[12,"rbp","","",103,null],[12,"rbx","","",103,null],[12,"r11","","",103,null],[12,"r10","","",103,null],[12,"r9","","",103,null],[12,"r8","","",103,null],[12,"rax","","",103,null],[12,"rcx","","",103,null],[12,"rdx","","",103,null],[12,"rsi","","",103,null],[12,"rdi","","",103,null],[12,"orig_rax","","",103,null],[12,"rip","","",103,null],[12,"cs","","",103,null],[12,"eflags","","",103,null],[12,"rsp","","",103,null],[12,"ss","","",103,null],[12,"fs_base","","",103,null],[12,"gs_base","","",103,null],[12,"ds","","",103,null],[12,"es","","",103,null],[12,"fs","","",103,null],[12,"gs","","",103,null],[3,"user","","",null,null],[12,"regs","","",104,null],[12,"u_fpvalid","","",104,null],[12,"i387","","",104,null],[12,"u_tsize","","",104,null],[12,"u_dsize","","",104,null],[12,"u_ssize","","",104,null],[12,"start_code","","",104,null],[12,"start_stack","","",104,null],[12,"signal","","",104,null],[12,"u_ar0","","",104,null],[12,"u_fpstate","","",104,null],[12,"magic","","",104,null],[12,"u_comm","","",104,null],[12,"u_debugreg","","",104,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",105,null],[12,"fpregs","","",105,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",106,null],[12,"uc_link","","",106,null],[12,"uc_stack","","",106,null],[12,"uc_mcontext","","",106,null],[12,"uc_sigmask","","",106,null],[3,"ipc_perm","","",null,null],[12,"__key","","",107,null],[12,"uid","","",107,null],[12,"gid","","",107,null],[12,"cuid","","",107,null],[12,"cgid","","",107,null],[12,"mode","","",107,null],[12,"__seq","","",107,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",108,null],[12,"shm_segsz","","",108,null],[12,"shm_atime","","",108,null],[12,"shm_dtime","","",108,null],[12,"shm_ctime","","",108,null],[12,"shm_cpid","","",108,null],[12,"shm_lpid","","",108,null],[12,"shm_nattch","","",108,null],[3,"termios2","","",null,null],[12,"c_iflag","","",109,null],[12,"c_oflag","","",109,null],[12,"c_cflag","","",109,null],[12,"c_lflag","","",109,null],[12,"c_line","","",109,null],[12,"c_cc","","",109,null],[12,"c_ispeed","","",109,null],[12,"c_ospeed","","",109,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",110,null],[12,"f_frsize","","",110,null],[12,"f_blocks","","",110,null],[12,"f_bfree","","",110,null],[12,"f_bavail","","",110,null],[12,"f_files","","",110,null],[12,"f_ffree","","",110,null],[12,"f_favail","","",110,null],[12,"f_fsid","","",110,null],[12,"f_flag","","",110,null],[12,"f_namemax","","",110,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"IPOPT_COPIED","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"IPOPT_CLASS","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"IPOPT_NUMBER","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"IPTOS_TOS","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"IPTOS_PREC","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"RT_TOS","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[5,"RT_ADDRCLASS","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"RT_LOCALADDR","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"bool"}}],[5,"NLA_ALIGN","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"mallinfo"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nlmsghdr"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"nlmsgerr"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"nl_pktinfo"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_req"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_hdr"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"nlattr"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"rtentry"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawn_file_actions_t"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawnattr_t"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"genlmsghdr"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"in6_pktinfo"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"in_pktinfo"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"in6_rtmsg"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["libflate"] = {"doc":"A Rust implementation of DEFLATE algorithm and related formats (ZLIB, GZIP).","items":[[0,"deflate","libflate","The encoder and decoder of the DEFLATE format and algorithm.",null,null],[3,"Decoder","libflate::deflate","DEFLATE decoder.",null,null],[3,"EncodeOptions","","Options for a DEFLATE encoder.",null,null],[3,"Encoder","","DEFLATE encoder.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",0,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"encodeoptions"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"encodeoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"encodeoptions"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Makes a default instance.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",1,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"no_compression","","Disables LZ77 compression.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new encoder instance.",2,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_options","","Makes a new encoder instance with specified options.",2,{"inputs":[{"name":"w"},{"name":"encodeoptions"}],"output":{"name":"self"}}],[11,"finish","","Flushes internal buffer and returns the inner stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"finish"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps the `Encoder`, returning the inner stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"complete","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[17,"DEFAULT_BLOCK_SIZE","","The default size of a DEFLATE block.",null,null],[0,"finish","libflate","`Finish` and related types.",null,null],[3,"Finish","libflate::finish","`Finish` is a type that represents a value which may have an error occurred during the computation.",null,null],[3,"AutoFinish","","A wrapper struct that completes the processing of the underlying instance when drops.",null,null],[3,"AutoFinishUnchecked","","A wrapper struct that completes the processing of the underlying instance when drops.",null,null],[8,"Complete","","This trait allows to complete an I/O related processing.",null,null],[10,"complete","","Completes the current processing and returns the result.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"finish"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"finish"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"finish"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","Makes a new instance.",4,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"unwrap","","Unwraps the instance.",4,null],[11,"into_result","","Converts from `Finish<T, E>` to `Result<T, E>`.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_result","","Converts from `Finish<T, E>` to `Result<&T, &E>`.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `AutoFinish` instance.",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Unwraps this `AutoFinish` instance, returning the underlying instance.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",5,null],[11,"deref_mut","","",5,null],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `AutoFinishUnchecked` instance.",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Unwraps this `AutoFinishUnchecked` instance, returning the underlying instance.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"gzip","libflate","The encoder and decoder of the GZIP format.",null,null],[3,"HeaderBuilder","libflate::gzip","GZIP header builder.",null,null],[3,"Header","","GZIP Header.",null,null],[3,"ExtraField","","Extra field of a GZIP header.",null,null],[12,"id","","ID of the extra field.",7,null],[12,"data","","Data of the extra field.",7,null],[3,"EncodeOptions","","Options for a GZIP encoder.",null,null],[3,"Encoder","","GZIP encoder.",null,null],[3,"Decoder","","GZIP decoder.",null,null],[3,"MultiDecoder","","A decoder that decodes all members in a GZIP stream.",null,null],[4,"CompressionLevel","","Compression levels defined by the GZIP format.",null,null],[13,"Fastest","","Compressor used fastest algorithm.",8,null],[13,"Slowest","","Compressor used maximum compression, slowest algorithm.",8,null],[13,"Unknown","","No information about compression method.",8,null],[4,"Os","","OS type.",null,null],[13,"Fat","","FAT filesystem (MS-DOS, OS/2, NT/Win32)",9,null],[13,"Amiga","","Amiga",9,null],[13,"Vms","","VMS (or OpenVMS)",9,null],[13,"Unix","","Unix",9,null],[13,"VmCms","","VM/CMS",9,null],[13,"AtariTos","","Atari TOS",9,null],[13,"Hpfs","","HPFS filesystem (OS/2, NT)",9,null],[13,"Macintosh","","Macintosh",9,null],[13,"ZSystem","","Z-System",9,null],[13,"CpM","","CP/M",9,null],[13,"Tops20","","TOPS-20",9,null],[13,"Ntfs","","NTFS filesystem (NT)",9,null],[13,"Qdos","","QDOS",9,null],[13,"AcornRiscos","","Acorn RISCOS",9,null],[13,"Unknown","","Unknown",9,null],[13,"Undefined","","Undefined value in RFC-1952",9,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"from","","",8,{"inputs":[{"name":"compressionlevel"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"headerbuilder"}}],[11,"new","","Makes a new builder instance.",10,{"inputs":[],"output":{"name":"self"}}],[11,"modification_time","","Sets the modification time (UNIX timestamp).",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"os","","Sets the OS type.",10,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"self"}}],[11,"text","","Indicates the encoding data is a ASCII text.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"verify","","Specifies toe verify header bytes using CRC-16.",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"extra_field","","Sets the extra field.",10,{"inputs":[{"name":"self"},{"name":"extrafield"}],"output":{"name":"self"}}],[11,"filename","","Sets the file name.",10,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"self"}}],[11,"comment","","Sets the comment.",10,{"inputs":[{"name":"self"},{"name":"cstring"}],"output":{"name":"self"}}],[11,"finish","","Returns the result header.",10,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"modification_time","","Returns the modification time (UNIX timestamp).",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"compression_level","","Returns the compression level.",11,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"os","","Returns the OS type.",11,{"inputs":[{"name":"self"}],"output":{"name":"os"}}],[11,"is_text","","Returns `true` if the stream is probably ASCII text, `false` otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_verified","","Returns `true` if the header bytes is verified by CRC-16, `false` otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"extra_field","","Returns the extra field.",11,{"inputs":[{"name":"self"}],"output":{"generics":["extrafield"],"name":"option"}}],[11,"filename","","Returns the file name.",11,{"inputs":[{"name":"self"}],"output":{"generics":["cstring"],"name":"option"}}],[11,"comment","","Returns the comment.",11,{"inputs":[{"name":"self"}],"output":{"generics":["cstring"],"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"extrafield"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"extrafield"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"extrafield"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"os"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Makes a default instance.",12,{"inputs":[],"output":{"name":"self"}}],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",12,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"no_compression","","Disables LZ77 compression.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"header","","Sets the GZIP header which will be written to the output stream.",12,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"self"}}],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Makes a new encoder instance.",13,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"with_options","","Makes a new encoder instance with specified options.",13,{"inputs":[{"name":"w"},{"name":"encodeoptions"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the GZIP stream.",13,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"finish","","Writes the GZIP trailer and returns the inner stream.",13,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"finish"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",13,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",13,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps the `Encoder`, returning the inner stream.",13,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"complete","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",14,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the GZIP stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",14,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",15,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the current member in the GZIP stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `MultiDecoder`, returning the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",15,null],[0,"lz77","libflate","The interface and implementations of LZ77 compression algorithm.",null,null],[3,"DefaultLz77Encoder","libflate::lz77","A `Lz77Encode` implementation used by default.",null,null],[3,"NoCompressionLz77Encoder","","A no compression implementation of `LZ77Encode` trait.",null,null],[4,"Code","","A LZ77 encoded data.",null,null],[13,"Literal","","Literal byte.",16,null],[13,"Pointer","","Backward pointer to shared data.",16,null],[12,"length","libflate::lz77::Code","Length of the shared data. The values must be limited to `MAX_LENGTH`.",16,null],[12,"backward_distance","","Distance between current position and start position of the shared data. The values must be limited to `MAX_DISTANCE`.",16,null],[4,"CompressionLevel","libflate::lz77","Compression level.",null,null],[13,"None","","No compression.",17,null],[13,"Fast","","Best speed.",17,null],[13,"Balance","","Balanced between speed and size.",17,null],[13,"Best","","Best compression.",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new encoder instance.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_window_size","","Makes a new encoder instance with specified window size.",18,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"encode","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"window_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[17,"MAX_LENGTH","","Maximum length of sharable bytes in a pointer.",null,null],[17,"MAX_DISTANCE","","Maximum backward distance of a pointer.",null,null],[17,"MAX_WINDOW_SIZE","","Maximum size of a sliding window.",null,null],[8,"Sink","","The `Sink` trait represents a consumer of LZ77 encoded data.",null,null],[10,"consume","","Consumes a LZ77 encoded `Code`.",19,{"inputs":[{"name":"self"},{"name":"code"}],"output":null}],[8,"Lz77Encode","","The `LZ77Encode` trait defines the interface of LZ77 encoding algorithm.",null,null],[10,"encode","","Encodes a buffer and writes result LZ77 codes to `sink`.",20,null],[10,"flush","","Flushes the encoder, ensuring that all intermediately buffered codes are consumed by `sink`.",20,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"compression_level","","Returns the compression level of the encoder.",20,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"window_size","","Returns the window size of the encoder.",20,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"nocompressionlz77encoder"}}],[11,"new","","Makes a new encoder instance.",21,{"inputs":[],"output":{"name":"self"}}],[11,"encode","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"compression_level","","",21,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[0,"non_blocking","libflate","Implementations that can handle non-blocking I/O.",null,null],[0,"deflate","libflate::non_blocking","The decoder of the DEFLATE format and algorithm.",null,null],[3,"Decoder","libflate::non_blocking::deflate","DEFLATE decoder which supports non-blocking I/O.",null,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",22,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",22,null],[0,"gzip","libflate::non_blocking","The encoder and decoder of the GZIP format.",null,null],[3,"Decoder","libflate::non_blocking::gzip","GZIP decoder which supports non-blocking I/O.",null,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",23,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"header","","Returns the header of the GZIP stream.",23,{"inputs":[{"name":"self"}],"output":{"generics":["header"],"name":"result"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",23,null],[0,"zlib","libflate::non_blocking","The encoder and decoder of the ZLIB format.",null,null],[3,"Decoder","libflate::non_blocking::zlib","ZLIB decoder which supports non-blocking I/O.",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",24,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"header","","Returns the header of the ZLIB stream.",24,{"inputs":[{"name":"self"}],"output":{"generics":["header"],"name":"result"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",24,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",24,null],[0,"zlib","libflate","The encoder and decoder of the ZLIB format.",null,null],[3,"Header","libflate::zlib","ZLIB header.",null,null],[3,"Decoder","","ZLIB decoder.",null,null],[3,"EncodeOptions","","Options for a ZLIB encoder.",null,null],[3,"Encoder","","ZLIB encoder.",null,null],[4,"CompressionLevel","","Compression levels defined by the ZLIB format.",null,null],[13,"Fastest","","Compressor used fastest algorithm.",25,null],[13,"Fast","","Compressor used fast algorithm.",25,null],[13,"Default","","Compressor used default algorithm.",25,null],[13,"Slowest","","Compressor used maximum compression, slowest algorithm.",25,null],[4,"Lz77WindowSize","","LZ77 Window sizes defined by the ZLIB format.",null,null],[13,"B256","","256 bytes",26,null],[13,"B512","","512 btyes",26,null],[13,"KB1","","1 kilobyte",26,null],[13,"KB2","","2 kilobytes",26,null],[13,"KB4","","4 kitobytes",26,null],[13,"KB8","","8 kitobytes",26,null],[13,"KB16","","16 kitobytes",26,null],[13,"KB32","","32 kitobytes",26,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"ordering"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"compressionlevel"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"from","","",25,{"inputs":[{"name":"compressionlevel"}],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"lz77windowsize"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"lz77windowsize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"lz77windowsize"}],"output":{"name":"ordering"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"lz77windowsize"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"from_u16","","Converts from `u16` to Lz77WindowSize`.",26,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"to_u16","","Converts from `Lz77WindowSize` to `u16`.",26,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"window_size","","Returns the LZ77 window size stored in the header.",27,{"inputs":[{"name":"self"}],"output":{"name":"lz77windowsize"}}],[11,"compression_level","","Returns the compression level stored in the header.",27,{"inputs":[{"name":"self"}],"output":{"name":"compressionlevel"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new decoder instance.",28,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the ZLIB stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `Decoder`, returning the underlying reader.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Makes a default instance.",29,{"inputs":[],"output":{"name":"self"}}],[11,"with_lz77","","Specifies the LZ77 encoder used to compress input data.",29,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"no_compression","","Disables LZ77 compression.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"block_size","","Specifies the hint of the size of a DEFLATE block.",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fixed_huffman_codes","","Specifies to compress with fixed huffman codes.",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new encoder instance.",30,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"with_options","","Makes a new encoder instance with specified options.",30,{"inputs":[{"name":"w"},{"name":"encodeoptions"}],"output":{"name":"result"}}],[11,"header","","Returns the header of the ZLIB stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"finish","","Writes the ZLIB trailer and returns the inner stream.",30,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"finish"}}],[11,"as_inner_ref","","Returns the immutable reference to the inner stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"as_inner_mut","","Returns the mutable reference to the inner stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps the `Encoder`, returning the inner stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"complete","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"Decoder"],[3,"EncodeOptions"],[3,"Encoder"],[8,"Complete"],[3,"Finish"],[3,"AutoFinish"],[3,"AutoFinishUnchecked"],[3,"ExtraField"],[4,"CompressionLevel"],[4,"Os"],[3,"HeaderBuilder"],[3,"Header"],[3,"EncodeOptions"],[3,"Encoder"],[3,"Decoder"],[3,"MultiDecoder"],[4,"Code"],[4,"CompressionLevel"],[3,"DefaultLz77Encoder"],[8,"Sink"],[8,"Lz77Encode"],[3,"NoCompressionLz77Encoder"],[3,"Decoder"],[3,"Decoder"],[3,"Decoder"],[4,"CompressionLevel"],[4,"Lz77WindowSize"],[3,"Header"],[3,"Decoder"],[3,"EncodeOptions"],[3,"Encoder"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","Check if an expression matches a refutable pattern.",null,null],[14,"assert_matches","","Assert that an expression matches a refutable pattern.",null,null],[14,"debug_assert_matches","","Assert that an expression matches a refutable pattern using debug assertions.",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","A parsed mime or media type.",null,null],[3,"Name","","A section of a `Mime`.",null,null],[3,"FromStrError","","An error when parsing a `Mime` from a string.",null,null],[3,"Params","","An iterator over the parameters of a MIME.",null,null],[17,"STAR","","",null,null],[17,"TEXT","","text",null,null],[17,"IMAGE","","image",null,null],[17,"AUDIO","","audio",null,null],[17,"VIDEO","","video",null,null],[17,"APPLICATION","","application",null,null],[17,"MULTIPART","","multipart",null,null],[17,"MESSAGE","","message",null,null],[17,"MODEL","","model",null,null],[17,"FONT","","font",null,null],[17,"PLAIN","","plain",null,null],[17,"HTML","","html",null,null],[17,"XML","","xml",null,null],[17,"JAVASCRIPT","","javascript",null,null],[17,"CSS","","css",null,null],[17,"CSV","","csv",null,null],[17,"EVENT_STREAM","","event-stream",null,null],[17,"JSON","","json",null,null],[17,"WWW_FORM_URLENCODED","","x-www-form-urlencoded",null,null],[17,"MSGPACK","","msgpack",null,null],[17,"OCTET_STREAM","","octet-stream",null,null],[17,"FORM_DATA","","form-data",null,null],[17,"PNG","","png",null,null],[17,"GIF","","gif",null,null],[17,"BMP","","bmp",null,null],[17,"JPEG","","jpeg",null,null],[17,"BASIC","","basic",null,null],[17,"MPEG","","mpeg",null,null],[17,"MP4","","mp4",null,null],[17,"OGG","","ogg",null,null],[17,"CHARSET","","charset",null,null],[17,"BOUNDARY","","boundary",null,null],[17,"UTF_8","","utf-8",null,null],[17,"STAR_STAR","","`*/*`",null,null],[17,"TEXT_STAR","","`text/*`",null,null],[17,"TEXT_PLAIN","","`text/plain`",null,null],[17,"TEXT_PLAIN_UTF_8","","`text/plain; charset=utf-8`",null,null],[17,"TEXT_HTML","","`text/html`",null,null],[17,"TEXT_HTML_UTF_8","","`text/html; charset=utf-8`",null,null],[17,"TEXT_CSS","","`text/css`",null,null],[17,"TEXT_JAVASCRIPT","","`text/javascript`",null,null],[17,"TEXT_XML","","`text/xml`",null,null],[17,"TEXT_EVENT_STREAM","","`text/event-stream`",null,null],[17,"TEXT_CSV","","`text/csv`",null,null],[17,"TEXT_CSV_UTF_8","","`text/csv; charset=utf-8`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES","","`text/tab-separated-values`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES_UTF_8","","`text/tab-separated-values; charset=utf-8`",null,null],[17,"IMAGE_STAR","","`image/*`",null,null],[17,"IMAGE_JPEG","","`image/jpeg`",null,null],[17,"IMAGE_GIF","","`image/gif`",null,null],[17,"IMAGE_PNG","","`image/png`",null,null],[17,"IMAGE_BMP","","`image/bmp`",null,null],[17,"APPLICATION_JSON","","`application/json`",null,null],[17,"APPLICATION_JAVASCRIPT","","`application/javascript`",null,null],[17,"APPLICATION_JAVASCRIPT_UTF_8","","`application/javascript; charset=utf-8`",null,null],[17,"APPLICATION_WWW_FORM_URLENCODED","","`application/x-www-form-urlencoded`",null,null],[17,"APPLICATION_OCTET_STREAM","","`application/octet-stream`",null,null],[17,"APPLICATION_MSGPACK","","`application/msgpack`",null,null],[17,"MULTIPART_FORM_DATA","","`multipart/form-data`",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"type_","","Get the top level media type for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",0,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","Get the value of this `Name` as a string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null]],"paths":[[3,"Mime"],[3,"Name"],[3,"FromStrError"],[3,"Params"]]};
searchIndex["mime_guess"] = {"doc":"Guessing of MIME types by file extension.","items":[[3,"Mime","mime_guess","A parsed mime or media type.",null,null],[5,"guess_mime_type","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"name":"mime"}}],[5,"guess_mime_type_opt","","Guess the MIME type of `path` by its extension (as defined by `Path::extension()`).",null,{"inputs":[{"name":"p"}],"output":{"generics":["mime"],"name":"option"}}],[5,"get_mime_type","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"name":"mime"}}],[5,"get_mime_type_opt","","Get the MIME type associated with a file extension.",null,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"option"}}],[5,"get_mime_type_str","","Get the MIME type string associated with a file extension. Case-insensitive.",null,{"inputs":[{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"get_mime_extensions","","Get a list of known extensions for a given `Mime`.",null,{"inputs":[{"name":"mime"}],"output":{"name":"option"}}],[5,"get_mime_extensions_str","","Get a list of known extensions for a MIME type string.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"get_extensions","","Get the extensions for a given top-level and sub-level of a MIME type (`{toplevel}/{sublevel}`).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"octet_stream","","Get the MIME type for `application/octet-stream` (generic binary stream)",null,{"inputs":[],"output":{"name":"mime"}}],[11,"type_","","Get the top level media type for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",0,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",0,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Mime"]]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",null,null],[3,"Registration","","Handle to a user space `Poll` registration.",null,null],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",null,null],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",null,null],[3,"Ready","","A set of readiness event kinds",null,null],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",null,null],[12,"0","","",0,null],[3,"Events","","A collection of readiness events.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"empty","","Return a `PollOpt` representing no set options.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if `self` is a superset of `other`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","Adds all options represented by `other` into `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ordering"}}],[11,"empty","","Returns the empty `Ready` set.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"readable","","Returns a `Ready` representing readable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"writable","","Returns a `Ready` representing writable readiness.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,{"inputs":[],"output":{"name":"ready"}}],[11,"is_empty","","Returns true if `Ready` is the empty set",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_readable","","Returns true if the value includes readable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","Returns true if the value includes writable readiness",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"remove","","Removes all options represented by `other` from `self`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"contains","","Returns true if `self` is a superset of `other`.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,{"inputs":[{"name":"usize"}],"output":{"name":"ready"}}],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ready"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"setreadiness"}}],[11,"new","","Return a new `Poll` handle.",4,{"inputs":[],"output":{"generics":["poll"],"name":"result"}}],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","Wait for readiness events",4,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["duration"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",4,{"inputs":[{"name":"self"},{"name":"events"},{"generics":["duration"],"name":"option"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,{"inputs":[{"name":"usize"}],"output":{"name":"events"}}],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the `Event` values.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"clear","","Clearing all `Event` values from container explicitly.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,null],[11,"register","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",6,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readiness","","Returns the registration's current readiness.",3,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"set_readiness","","Set the registration's readiness",3,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"unixready"}],"output":{"name":"ready"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[0,"net","","Networking primitives",null,null],[3,"TcpListener","mio::net","A structure representing a socket server",null,null],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,{"inputs":[{"name":"tcpstream"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,null],[11,"read_bufs","","Read in a list of buffers all at once.",7,null],[11,"write_bufs","","Write a list of buffers all at once.",7,null],[11,"read","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",7,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,{"inputs":[{"name":"tcplistener"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",8,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"register","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",8,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",7,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"into_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",8,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"bind","","Creates a UDP socket from the given address.",9,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,{"inputs":[{"name":"udpsocket"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the socket address that this socket was created from.",9,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,null],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"register","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",9,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[0,"event","mio","Readiness event types and utilities.",null,null],[3,"Events","mio::event","A collection of readiness events.",null,null],[3,"Iter","","[`Events`] iterator.",null,null],[3,"Event","","An readiness event returned by [`Poll::poll`].",null,null],[8,"Evented","","A value that may be registered with `Poll`",null,null],[10,"register","","Register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[0,"unix","mio","Unix only extensions",null,null],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",null,null],[12,"0","","",11,null],[3,"UnixReady","","Unix specific extensions to `Ready`",null,null],[11,"clone","mio::event","",12,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,{"inputs":[{"name":"ready"},{"name":"token"}],"output":{"name":"event"}}],[11,"readiness","","Returns the event's readiness.",12,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"token","","Returns the event's token.",12,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[11,"fmt","mio::unix","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",11,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unixready"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"ordering"}}],[11,"error","","Returns a `Ready` representing error readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,{"inputs":[],"output":{"name":"unixready"}}],[11,"is_error","","Returns true if the value includes error readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hup","","Returns true if the value includes HUP readiness",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",14,{"inputs":[{"name":"ready"}],"output":{"name":"unixready"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"bitor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitxor","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"bitand","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"sub","","",14,{"inputs":[{"name":"self"},{"name":"unixready"}],"output":{"name":"unixready"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["native_tls"] = {"doc":"An abstraction over platform-specific TLS implementations.","items":[[3,"Error","native_tls","An error returned from the TLS implementation.",null,null],[3,"Pkcs12","","A PKCS #12 archive.",null,null],[3,"Certificate","","An X509 certificate.",null,null],[3,"MidHandshakeTlsStream","","A TLS stream which has been interrupted midway through the handshake process.",null,null],[3,"TlsConnectorBuilder","","A builder for `TlsConnector`s.",null,null],[3,"TlsConnector","","A builder for client-side TLS connections.",null,null],[3,"TlsAcceptorBuilder","","A builder for `TlsAcceptor`s.",null,null],[3,"TlsAcceptor","","A builder for server-side TLS connections.",null,null],[3,"TlsStream","","A stream managing a TLS session.",null,null],[4,"HandshakeError","","An error returned from `ClientBuilder::handshake`.",null,null],[13,"Failure","","A fatal error.",0,null],[13,"Interrupted","","A stream interrupted midway through the handshake process due to a `WouldBlock` error.",0,null],[4,"Protocol","","SSL/TLS protocol versions.",null,null],[13,"Sslv3","","The SSL 3.0 protocol.",1,null],[13,"Tlsv10","","The TLS 1.0 protocol.",1,null],[13,"Tlsv11","","The TLS 1.1 protocol.",1,null],[13,"Tlsv12","","The TLS 1.2 protocol.",1,null],[0,"backend","","TLS backend-specific functionality.",null,null],[0,"openssl","native_tls::backend","OpenSSL-specific functionality.",null,null],[8,"TlsConnectorBuilderExt","native_tls::backend::openssl","OpenSSL-specific extensions to `TlsConnectorBuilder`.",null,null],[10,"from_openssl","","Initialize `TlsAcceptorBuilderExt` from an `SslAcceptorBuilder`.",2,{"inputs":[{"name":"sslconnectorbuilder"}],"output":{"name":"self"}}],[10,"builder","","Returns a shared reference to the inner `SslConnectorBuilder`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[10,"builder_mut","","Returns a mutable reference to the inner `SslConnectorBuilder`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[8,"TlsAcceptorBuilderExt","","OpenSSL-specific extensions to `TlsAcceptorBuilder`.",null,null],[10,"from_openssl","","Initialize `TlsAcceptorBuilderExt` from an `SslAcceptorBuilder`.",3,{"inputs":[{"name":"sslacceptorbuilder"}],"output":{"name":"self"}}],[10,"builder","","Returns a shared reference to the inner `SslAcceptorBuilder`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[10,"builder_mut","","Returns a mutable reference to the inner `SslAcceptorBuilder`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[8,"TlsStreamExt","","OpenSSL-specific extensions to `TlsStream`.",null,null],[10,"raw_stream","","Returns a shared reference to the OpenSSL `SslStream`.",4,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[10,"raw_stream_mut","","Returns a mutable reference to the OpenSSL `SslStream`.",4,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[8,"ErrorExt","","OpenSSL-specific extensions to `Error`",null,null],[10,"openssl_error","","Extract the underlying OpenSSL error for inspection.",5,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"from_openssl","native_tls","",6,{"inputs":[{"name":"sslconnectorbuilder"}],"output":{"name":"tlsconnectorbuilder"}}],[11,"builder","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[11,"builder_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[11,"from_openssl","","",7,{"inputs":[{"name":"sslacceptorbuilder"}],"output":{"name":"tlsacceptorbuilder"}}],[11,"builder","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[11,"builder_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[11,"raw_stream","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"raw_stream_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"openssl_error","","",9,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[6,"Result","","A typedef of the result-type returned by many methods.",null,null],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"from_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",10,null],[11,"from_der","","Parses a DER-formatted X509 certificate.",11,null],[11,"from_pem","","Parses a PEM-formatted X509 certificate. If the PEM file contains more than one certificate the last one is used and the others are ignored.",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"handshake","","Restarts the handshake process.",12,{"inputs":[{"name":"self"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"identity","","Sets the identity to be used for client certificate authentication.",6,{"inputs":[{"name":"self"},{"name":"pkcs12"}],"output":{"generics":["tlsconnectorbuilder"],"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the connector will support.",6,null],[11,"add_root_certificate","","Adds a certificate to the set of roots that the connector will trust.",6,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"generics":["tlsconnectorbuilder"],"name":"result"}}],[11,"build","","Consumes the builder, returning a `TlsConnector`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["tlsconnector"],"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tlsconnector"}}],[11,"builder","","Returns a new builder for a `TlsConnector`.",13,{"inputs":[],"output":{"generics":["tlsconnectorbuilder"],"name":"result"}}],[11,"connect","","Initiates a TLS handshake.",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect`, but does not validate the server's domain name against its certificate.",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the acceptor will support.",7,null],[11,"build","","Consumes the builder, returning a `TlsAcceptor`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["tlsacceptor"],"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"tlsacceptor"}}],[11,"builder","","Returns a new builder for a `TlsAcceptor`.",14,{"inputs":[{"name":"pkcs12"}],"output":{"generics":["tlsacceptorbuilder"],"name":"result"}}],[11,"accept","","Initiates a TLS handshake.",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["tlsstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"buffered_read_size","","Returns the number of bytes that can be read without resulting in any network calls.",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"shutdown","","Shuts down the TLS session.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"HandshakeError"],[4,"Protocol"],[8,"TlsConnectorBuilderExt"],[8,"TlsAcceptorBuilderExt"],[8,"TlsStreamExt"],[8,"ErrorExt"],[3,"TlsConnectorBuilder"],[3,"TlsAcceptorBuilder"],[3,"TlsStream"],[3,"Error"],[3,"Pkcs12"],[3,"Certificate"],[3,"MidHandshakeTlsStream"],[3,"TlsConnector"],[3,"TlsAcceptor"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpbuilder"],"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"self"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"generics":["udpbuilder"],"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ipv4addr"],"name":"result"}}],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["openssl"] = {"doc":"","items":[[5,"init","openssl","",null,null],[0,"aes","","Low level AES IGE functionality",null,null],[3,"KeyError","openssl::aes","Provides Error handling for parsing keys.",null,null],[3,"AesKey","","The key used to encrypt or decrypt cipher blocks.",null,null],[5,"aes_ige","","Performs AES IGE encryption or decryption",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_encrypt","","Prepares a key for encryption.",1,null],[11,"new_decrypt","","Prepares a key for decryption.",1,null],[0,"asn1","openssl","Defines the format of certificiates",null,null],[3,"Asn1GeneralizedTime","openssl::asn1","Non-UTC representation of time",null,null],[3,"Asn1GeneralizedTimeRef","","Reference to a [`Asn1GeneralizedTime`]",null,null],[3,"Asn1Time","","Time storage and comparison",null,null],[3,"Asn1TimeRef","","Reference to an [`Asn1Time`]",null,null],[3,"Asn1String","","Primary ASN.1 type used by OpenSSL",null,null],[3,"Asn1StringRef","","Reference to [`Asn1String`]",null,null],[3,"Asn1Integer","","Numeric representation",null,null],[3,"Asn1IntegerRef","","Reference to [`Asn1Integer`]",null,null],[3,"Asn1BitString","","Sequence of bytes",null,null],[3,"Asn1BitStringRef","","Reference to [`Asn1BitString`]",null,null],[3,"Asn1Object","","Object Identifier",null,null],[3,"Asn1ObjectRef","","Reference to [`Asn1Object`]",null,null],[11,"from_ptr","","",2,null],[11,"as_ptr","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","",4,null],[11,"as_ptr","","",4,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"borrow","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"days_from_now","","Creates a new time on specified interval in days from now",4,{"inputs":[{"name":"u32"}],"output":{"generics":["asn1time","errorstack"],"name":"result"}}],[11,"from_ptr","","",6,null],[11,"as_ptr","","",6,null],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"borrow","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"as_utf8","","Converts the ASN.1 underlying format to UTF8",7,{"inputs":[{"name":"self"}],"output":{"generics":["opensslstring","errorstack"],"name":"result"}}],[11,"as_slice","","Return the string as an array of bytes",7,null],[11,"len","","Return the length of the Asn1String (number of bytes)",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ptr","","",8,null],[11,"as_ptr","","",8,null],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"borrow","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"get","","Returns value of ASN.1 integer, or -1 if there is an error, and 0 if the integer is Null.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"set","","Sets the ASN.1 value to the value of a signed 32-bit integer, for larger numbers see [`bn`].",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"from_ptr","","",10,null],[11,"as_ptr","","",10,null],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"deref_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"borrow","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"as_slice","","Returns the Asn1BitString as a slice",11,null],[11,"len","","Length of Asn1BitString in number of bytes.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ptr","","",12,null],[11,"as_ptr","","",12,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"borrow","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"nid","","Returns the NID associated with this OID.",13,{"inputs":[{"name":"self"}],"output":{"name":"nid"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bn","openssl","BigNum implementation",null,null],[3,"MsbOption","openssl::bn","Options for the most significant bits of a randomly generated `BigNum`.",null,null],[3,"BigNumContext","","Temporary storage for BigNums on the secure heap",null,null],[3,"BigNumContextRef","","Reference to [`BigNumContext`]",null,null],[3,"BigNum","","Dynamically sized large number impelementation",null,null],[3,"BigNumRef","","Reference to a [`BigNum`]",null,null],[17,"MSB_MAYBE_ZERO","","The most significant bit of the number may be 0.",null,null],[17,"MSB_ONE","","The most significant bit of the number must be 1.",null,null],[17,"TWO_MSB_ONE","","The most significant two bits of the number must be 1.",null,null],[11,"from_ptr","","",14,null],[11,"as_ptr","","",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"borrow","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"new","","Returns a new `BigNumContext`.",14,{"inputs":[],"output":{"generics":["bignumcontext","errorstack"],"name":"result"}}],[11,"from_ptr","","",15,null],[11,"as_ptr","","",15,null],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"deref_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"borrow","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"clear","","Erases the memory used by this `BigNum`, resetting its value to 0.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"add_word","","Adds a `u32` to `self`.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"sub_word","","Subtracts a `u32` from `self`.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mul_word","","Multiplies a `u32` by `self`.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"div_word","","Divides `self` by a `u32`, returning the remainder.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u64","errorstack"],"name":"result"}}],[11,"mod_word","","Returns the result of `self` modulo `w`.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u64","errorstack"],"name":"result"}}],[11,"rand_range","","Places a cryptographically-secure pseudo-random nonnegative number less than `self` in `rnd`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"pseudo_rand_range","","The cryptographically weak counterpart to `rand_in_range`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_bit","","Sets bit `n`. Equivalent to `self |= (1 << n)`.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"clear_bit","","Clears bit `n`, setting it to 0. Equivalent to `self &= ~(1 << n)`.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"is_bit_set","","Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"mask_bits","","Truncates `self` to the lowest `n` bits.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"lshift1","","Places `a << 1` in `self`.  Equivalent to `self * 2`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"rshift1","","Places `a >> 1` in `self`. Equivalent to `self / 2`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"checked_add","","Places `a + b` in `self`.  [`core::ops::Add`] is also implemented for `BigNumRef`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"checked_sub","","Places `a - b` in `self`. [`core::ops::Sub`] is also implemented for `BigNumRef`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"lshift","","Places `a << n` in `self`.  Equivalent to `a * 2 ^ n`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"rshift","","Places `a >> n` in `self`. Equivalent to `a / 2 ^ n`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"to_owned","","Creates a new BigNum with the same value.",16,{"inputs":[{"name":"self"}],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"set_negative","","Sets the sign of `self`.  Pass true to set `self` to a negative.  False sets `self` positive.",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ucmp","","Compare the absolute values of `self` and `oth`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"ordering"}}],[11,"is_negative","","Returns `true` if `self` is negative.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"num_bits","","Returns the number of significant bits in `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"num_bytes","","Returns the size of `self` in bytes. Implemented natively.",16,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"rand","","Generates a cryptographically strong pseudo-random `BigNum`, placing it in `self`.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"msboption"},{"name":"bool"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"pseudo_rand","","The cryptographically weak counterpart to `rand`.  Not suitable for key generation.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"msboption"},{"name":"bool"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"generate_prime","","Generates a prime number, placing it in `self`.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"},{"generics":["bignumref"],"name":"option"},{"generics":["bignumref"],"name":"option"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"checked_mul","","Places the result of `a * b` in `self`. [`core::ops::Mul`] is also implemented for `BigNumRef`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"checked_div","","Places the result of `a / b` in `self`. The remainder is discarded. [`core::ops::Div`] is also implemented for `BigNumRef`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"checked_rem","","Places the result of `a % b` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"div_rem","","Places the result of `a / b` in `self` and `a % b` in `rem`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"sqr","","Places the result of `a²` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"nnmod","","Places the result of `a mod m` in `self`.  As opposed to `div_rem` the result is non-negative.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mod_add","","Places the result of `(a + b) mod m` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mod_sub","","Places the result of `(a - b) mod m` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mod_mul","","Places the result of `(a * b) mod m` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mod_sqr","","Places the result of `a² mod m` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"exp","","Places the result of `a^p` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mod_exp","","Places the result of `a^p mod m` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mod_inverse","","Places the inverse of `a` modulo `n` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"gcd","","Places the greatest common denominator of `a` and `b` in `self`.",16,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"is_prime","","Checks whether `self` is prime.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bignumcontextref"}],"output":{"generics":["bool","errorstack"],"name":"result"}}],[11,"is_prime_fasttest","","Checks whether `self` is prime with optional trial division.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bignumcontextref"},{"name":"bool"}],"output":{"generics":["bool","errorstack"],"name":"result"}}],[11,"to_vec","","Returns a big-endian byte vector representation of the absolute value of `self`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_dec_str","","Returns a decimal string representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["opensslstring","errorstack"],"name":"result"}}],[11,"to_hex_str","","Returns a hexadecimal string representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["opensslstring","errorstack"],"name":"result"}}],[11,"to_asn1_integer","","Returns an `Asn1Integer` containing the value of `self`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["asn1integer","errorstack"],"name":"result"}}],[11,"new","","Creates a new `BigNum` with the value 0.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"from_u32","","Creates a new `BigNum` with the given value.",15,{"inputs":[{"name":"u32"}],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"from_dec_str","","Creates a `BigNum` from a decimal string.",15,{"inputs":[{"name":"str"}],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"from_hex_str","","Creates a `BigNum` from a hexadecimal string.",15,{"inputs":[{"name":"str"}],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc2409_prime_768","","Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in the order of magnitude of `2 ^ 768`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled Oakley group id 1.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc2409_prime_1024","","Returns a constant used in IKE as defined in [`RFC 2409`].  This prime number is in the order of magnitude of `2 ^ 1024`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled Oakly group 2.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc3526_prime_1536","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 1536`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 5.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc3526_prime_2048","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 2048`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 14.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc3526_prime_3072","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 3072`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 15.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc3526_prime_4096","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 4096`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 16.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc3526_prime_6144","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 6144`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 17.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"get_rfc3526_prime_8192","","Returns a constant used in IKE as defined in [`RFC 3526`].  The prime is in the order of magnitude of `2 ^ 8192`.  This number is used during calculated key exchanges such as Diffie-Hellman.  This number is labeled MODP group 18.",15,{"inputs":[],"output":{"generics":["bignum","errorstack"],"name":"result"}}],[11,"from_slice","","Creates a new `BigNum` from an unsigned, big-endian encoded number of arbitrary length.",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"neg","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bignum"}}],[0,"cms","openssl","SMIME implementation using CMS",null,null],[3,"CmsContentInfo","openssl::cms","High level CMS wrapper",null,null],[3,"CmsContentInfoRef","","Reference to [`CMSContentInfo`]",null,null],[11,"from_ptr","","",17,null],[11,"as_ptr","","",17,null],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cmscontentinforef"}}],[11,"deref_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cmscontentinforef"}}],[11,"borrow","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cmscontentinforef"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cmscontentinforef"}}],[11,"decrypt","","Given the sender's private key, `pkey` and the recipient's certificiate, `cert`, decrypt the data in `self`.",18,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"x509"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"smime_read_cms","","Parses a smime formatted `vec` of bytes into a `CmsContentInfo`.",17,null],[0,"conf","openssl","Interface for processing OpenSSL configuration files.",null,null],[3,"ConfMethod","openssl::conf","",null,null],[3,"Conf","","",null,null],[3,"ConfRef","","",null,null],[11,"default","","Retrieve handle to the default OpenSSL configuration file processing function.",19,{"inputs":[],"output":{"name":"confmethod"}}],[11,"from_ptr","","Construct from raw pointer.",19,null],[11,"as_ptr","","Convert to raw pointer.",19,null],[11,"from_ptr","","",20,null],[11,"as_ptr","","",20,null],[11,"drop","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"borrow","","",20,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"new","","Create a configuration parser.",20,{"inputs":[{"name":"confmethod"}],"output":{"generics":["conf","errorstack"],"name":"result"}}],[0,"dh","openssl","",null,null],[3,"Dh","openssl::dh","",null,null],[3,"DhRef","","",null,null],[11,"from_ptr","","",21,null],[11,"as_ptr","","",21,null],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"borrow","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"to_pem","","Serializes this value to PEM.",22,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"to_der","","Serializes this value to DER.",22,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"from_params","","",21,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"generics":["dh","errorstack"],"name":"result"}}],[11,"from_pem","","Deserializes a value from PEM-formatted data.",21,null],[11,"from_der","","Deserializes a value from DER-formatted data.",21,null],[0,"dsa","openssl","Digital Signatures",null,null],[3,"Dsa","openssl::dsa","Object representing DSA keys.",null,null],[3,"DsaRef","","Reference to [`Dsa`].",null,null],[11,"from_ptr","","",23,null],[11,"as_ptr","","",23,null],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"borrow","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",24,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",24,null],[11,"public_key_to_pem","","Serializes a public key to PEM.",24,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"private_key_to_der","","Serializes the private key to DER.",24,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",24,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"size","","Returns the maximum size of the signature output by `self` in bytes.  Returns None if the keys are uninitialized.",24,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"p","","Returns the DSA prime parameter of `self`.",24,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"q","","Returns the DSA sub-prime parameter of `self`.",24,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"g","","Returns the DSA base parameter of `self`.",24,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"has_public_key","","Returns whether the DSA includes a public key, used to confirm the authenticity of the message.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_private_key","","Returns whether the DSA includes a private key, used to prove the authenticity of a message.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate","","Generate a DSA key pair.",23,{"inputs":[{"name":"u32"}],"output":{"generics":["dsa","errorstack"],"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",23,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",23,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",23,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",23,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",23,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",23,null],[11,"private_key_from_pem_cb","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ec","openssl","Elliptic Curve",null,null],[3,"PointConversionForm","openssl::ec","Compressed or Uncompressed conversion",null,null],[3,"Asn1Flag","","Named Curve or Explicit",null,null],[3,"EcGroup","","Describes the curve",null,null],[3,"EcGroupRef","","Reference to [`EcGroup`]",null,null],[3,"EcPoint","","Represents a point on the curve",null,null],[3,"EcPointRef","","Reference to [`EcPoint`]",null,null],[3,"EcKey","","Public and optional Private key on the given curve",null,null],[3,"EcKeyRef","","Reference to [`EcKey`]",null,null],[3,"EcKeyBuilder","","Builder pattern for key generation",null,null],[3,"EcKeyBuilderRef","","Reference to [`EcKeyBuilder`]",null,null],[17,"POINT_CONVERSION_COMPRESSED","","Compressed conversion from point value (Default)",null,null],[17,"POINT_CONVERSION_UNCOMPRESSED","","Uncompressed conversion from point value (Binary curve default)",null,null],[17,"POINT_CONVERSION_HYBRID","","Performs both compressed and uncompressed conversions",null,null],[17,"EXPLICIT_CURVE","","Curve defined using polynomial parameters",null,null],[17,"NAMED_CURVE","","Standard Curves",null,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"pointconversionform"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"asn1flag"}}],[11,"from_ptr","","",27,null],[11,"as_ptr","","",27,null],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"borrow","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"from_curve_name","","Returns the group of a standard named curve.",27,{"inputs":[{"name":"nid"}],"output":{"generics":["ecgroup","errorstack"],"name":"result"}}],[11,"components_gfp","","Places the components of a curve over a prime field in the provided `BigNum`s. The components make up the formula `y^2 mod p = x^3 + ax + b mod p`.",28,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"components_gf2m","","Places the components of a curve over a binary field in the provided `BigNum`s. The components make up the formula `y^2 + xy = x^3 + ax^2 + b`.",28,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"degree","","Returns the degree of the curve.",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"order","","Places the order of the curve in the provided `BigNum`.",28,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_asn1_flag","","Sets the flag determining if the group corresponds to a named curve or must be explicitly parameterized.",28,{"inputs":[{"name":"self"},{"name":"asn1flag"}],"output":null}],[11,"from_ptr","","",29,null],[11,"as_ptr","","",29,null],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"borrow","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"add","","Computes `a + b`, storing the result in `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"ecpointref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mul","","Computes `q * m`, storing the result in `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mul_generator","","Computes `generator * n`, storing the result ing `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"mul_full","","Computes `generator * n + q * m`, storing the result in `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"ecpointref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"invert","","Inverts `self`.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"to_bytes","","Serializes the point to a binary representation.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"pointconversionform"},{"name":"bignumcontextref"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"eq","","Determines if this point is equal to another.",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"bignumcontextref"}],"output":{"generics":["bool","errorstack"],"name":"result"}}],[11,"affine_coordinates_gfp","","Place affine coordinates of a curve over a prime field in the provided `x` and `y` `BigNum`s",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"affine_coordinates_gf2m","","Place affine coordinates of a curve over a binary field in the provided `x` and `y` `BigNum`s",30,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"new","","Creates a new point on the specified curve.",29,{"inputs":[{"name":"ecgroupref"}],"output":{"generics":["ecpoint","errorstack"],"name":"result"}}],[11,"from_bytes","","Creates point from a binary representation",29,null],[11,"from_ptr","","",31,null],[11,"as_ptr","","",31,null],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"borrow","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",32,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",32,null],[11,"private_key_to_der","","Serializes the private key to DER.",32,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"group","","Return [`EcGroup`] of the `EcKey`",32,{"inputs":[{"name":"self"}],"output":{"generics":["ecgroupref"],"name":"option"}}],[11,"public_key","","Return [`EcPoint`] associated with the public key",32,{"inputs":[{"name":"self"}],"output":{"generics":["ecpointref"],"name":"option"}}],[11,"private_key","","Return [`EcPoint`] associated with the private key",32,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"check_key","","Checks the key for validity.",32,{"inputs":[{"name":"self"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"to_owned","","Create a copy of the `EcKey` to allow modification",32,{"inputs":[{"name":"self"}],"output":{"generics":["eckey","errorstack"],"name":"result"}}],[11,"from_curve_name","","Constructs an `EcKey` corresponding to a known curve.",31,{"inputs":[{"name":"nid"}],"output":{"generics":["eckey","errorstack"],"name":"result"}}],[11,"from_public_key","","Constructs an `EcKey` from the specified group with the associated `EcPoint`, public_key.",31,{"inputs":[{"name":"ecgroupref"},{"name":"ecpointref"}],"output":{"generics":["eckey","errorstack"],"name":"result"}}],[11,"generate","","Generates a new public/private key pair on the specified curve.",31,{"inputs":[{"name":"ecgroupref"}],"output":{"generics":["eckey","errorstack"],"name":"result"}}],[11,"new_by_curve_name","","",31,{"inputs":[{"name":"nid"}],"output":{"generics":["eckey","errorstack"],"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",31,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",31,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",31,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",31,null],[11,"from_ptr","","",33,null],[11,"as_ptr","","",33,null],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"borrow","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"new","","Creates an empty `EcKeyBuilder` to be chained with additonal methods",33,{"inputs":[],"output":{"generics":["eckeybuilder","errorstack"],"name":"result"}}],[11,"build","","Consume the `EcKeyBuilder` and return [`EcKey`]",33,{"inputs":[{"name":"self"}],"output":{"name":"eckey"}}],[11,"set_group","","Set the [`EcGroup`] explicitly",34,{"inputs":[{"name":"self"},{"name":"ecgroupref"}],"output":{"generics":["eckeybuilderref","errorstack"],"name":"result"}}],[11,"set_public_key","","Set public key to given `EcPoint`",34,{"inputs":[{"name":"self"},{"name":"ecpointref"}],"output":{"generics":["eckeybuilderref","errorstack"],"name":"result"}}],[11,"generate_key","","Generate public and private keys.",34,{"inputs":[{"name":"self"}],"output":{"generics":["eckeybuilderref","errorstack"],"name":"result"}}],[11,"set_public_key_affine_coordinates","","Sets the public key based on affine coordinates.",34,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"generics":["eckeybuilderref","errorstack"],"name":"result"}}],[11,"set_private_key","","Sets the private key.",34,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"generics":["eckeybuilderref","errorstack"],"name":"result"}}],[0,"error","openssl","Errors returned by OpenSSL library.",null,null],[3,"ErrorStack","openssl::error","Collection of [`Error`]s from OpenSSL.",null,null],[3,"Error","","An error reported from OpenSSL.",null,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"errorstack"}}],[11,"get","","Returns the contents of the OpenSSL error stack.",35,{"inputs":[],"output":{"name":"errorstack"}}],[11,"errors","","Returns the errors in the stack.",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"get","","Returns the first error on the OpenSSL error stack.",36,{"inputs":[],"output":{"generics":["error"],"name":"option"}}],[11,"code","","Returns the raw OpenSSL error code for this error.",36,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"library","","Returns the name of the library reporting the error, if available.",36,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"function","","Returns the name of the function reporting the error.",36,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"reason","","Returns the reason for the error.",36,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"file","","Returns the name of the source file which encountered the error.",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","Returns the line in the source file which encountered the error.",36,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"data","","Returns additional data describing the error.",36,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"ex_data","openssl","",null,null],[3,"Index","openssl::ex_data","A slot in a type's \"extra data\" structure.",null,null],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from_raw","","",37,{"inputs":[{"name":"c_int"}],"output":{"name":"index"}}],[11,"as_raw","","",37,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"hash","openssl","",null,null],[3,"MessageDigest","openssl::hash","",null,null],[3,"Hasher","","Provides message digest (hash) computation.",null,null],[3,"DigestBytes","","The resulting bytes of a digest.",null,null],[5,"hash","","",null,null],[5,"hash2","","Computes the hash of the `data` with the hash `t`.",null,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"messagedigest"}}],[11,"md5","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha1","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha224","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha256","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha384","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha512","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"ripemd160","","",38,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"as_ptr","","",38,null],[11,"new","","Creates a new `Hasher` with the specified hash type.",39,{"inputs":[{"name":"messagedigest"}],"output":{"generics":["hasher","errorstack"],"name":"result"}}],[11,"update","","Feeds data into the hasher.",39,null],[11,"finish","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"finish2","","Returns the hash of the data written and resets the hasher.",39,{"inputs":[{"name":"self"}],"output":{"generics":["digestbytes","errorstack"],"name":"result"}}],[11,"write","","",39,null],[11,"flush","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"hasher"}}],[11,"drop","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"digestbytes"}}],[11,"deref","","",40,null],[11,"deref_mut","","",40,null],[11,"as_ref","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"memcmp","openssl","Utilities to safely compare cryptographic values.",null,null],[5,"eq","openssl::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",null,null],[0,"nid","openssl","A collection of numerical identifiers for OpenSSL objects.",null,null],[3,"Nid","openssl::nid","A numerical identifier for an OpenSSL object.",null,null],[17,"UNDEF","","",null,null],[17,"ITU_T","","",null,null],[17,"CCITT","","",null,null],[17,"ISO","","",null,null],[17,"JOINT_ISO_ITU_T","","",null,null],[17,"JOINT_ISO_CCITT","","",null,null],[17,"MEMBER_BODY","","",null,null],[17,"IDENTIFIED_ORGANIZATION","","",null,null],[17,"HMAC_MD5","","",null,null],[17,"HMAC_SHA1","","",null,null],[17,"CERTICOM_ARC","","",null,null],[17,"INTERNATIONAL_ORGANIZATIONS","","",null,null],[17,"WAP","","",null,null],[17,"WAP_WSG","","",null,null],[17,"SELECTED_ATTRIBUTE_TYPES","","",null,null],[17,"CLEARANCE","","",null,null],[17,"ISO_US","","",null,null],[17,"X9_57","","",null,null],[17,"X9CM","","",null,null],[17,"DSA","","",null,null],[17,"DSAWITHSHA1","","",null,null],[17,"ANSI_X9_62","","",null,null],[17,"X9_62_PRIME_FIELD","","",null,null],[17,"X9_62_CHARACTERISTIC_TWO_FIELD","","",null,null],[17,"X9_62_ID_CHARACTERISTIC_TWO_BASIS","","",null,null],[17,"X9_62_ONBASIS","","",null,null],[17,"X9_62_TPBASIS","","",null,null],[17,"X9_62_PPBASIS","","",null,null],[17,"X9_62_ID_ECPUBLICKEY","","",null,null],[17,"X9_62_C2PNB163V1","","",null,null],[17,"X9_62_C2PNB163V2","","",null,null],[17,"X9_62_C2PNB163V3","","",null,null],[17,"X9_62_C2PNB176V1","","",null,null],[17,"X9_62_C2TNB191V1","","",null,null],[17,"X9_62_C2TNB191V2","","",null,null],[17,"X9_62_C2TNB191V3","","",null,null],[17,"X9_62_C2ONB191V4","","",null,null],[17,"X9_62_C2ONB191V5","","",null,null],[17,"X9_62_C2PNB208W1","","",null,null],[17,"X9_62_C2TNB239V1","","",null,null],[17,"X9_62_C2TNB239V2","","",null,null],[17,"X9_62_C2TNB239V3","","",null,null],[17,"X9_62_C2ONB239V4","","",null,null],[17,"X9_62_C2ONB239V5","","",null,null],[17,"X9_62_C2PNB272W1","","",null,null],[17,"X9_62_C2PNB304W1","","",null,null],[17,"X9_62_C2TNB359V1","","",null,null],[17,"X9_62_C2PNB368W1","","",null,null],[17,"X9_62_C2TNB431R1","","",null,null],[17,"X9_62_PRIME192V1","","",null,null],[17,"X9_62_PRIME192V2","","",null,null],[17,"X9_62_PRIME192V3","","",null,null],[17,"X9_62_PRIME239V1","","",null,null],[17,"X9_62_PRIME239V2","","",null,null],[17,"X9_62_PRIME239V3","","",null,null],[17,"X9_62_PRIME256V1","","",null,null],[17,"ECDSA_WITH_SHA1","","",null,null],[17,"ECDSA_WITH_RECOMMENDED","","",null,null],[17,"ECDSA_WITH_SPECIFIED","","",null,null],[17,"ECDSA_WITH_SHA224","","",null,null],[17,"ECDSA_WITH_SHA256","","",null,null],[17,"ECDSA_WITH_SHA384","","",null,null],[17,"ECDSA_WITH_SHA512","","",null,null],[17,"SECP112R1","","",null,null],[17,"SECP112R2","","",null,null],[17,"SECP128R1","","",null,null],[17,"SECP128R2","","",null,null],[17,"SECP160K1","","",null,null],[17,"SECP160R1","","",null,null],[17,"SECP160R2","","",null,null],[17,"SECP192K1","","",null,null],[17,"SECP224K1","","",null,null],[17,"SECP224R1","","",null,null],[17,"SECP256K1","","",null,null],[17,"SECP384R1","","",null,null],[17,"SECP521R1","","",null,null],[17,"SECT113R1","","",null,null],[17,"SECT113R2","","",null,null],[17,"SECT131R1","","",null,null],[17,"SECT131R2","","",null,null],[17,"SECT163K1","","",null,null],[17,"SECT163R1","","",null,null],[17,"SECT163R2","","",null,null],[17,"SECT193R1","","",null,null],[17,"SECT193R2","","",null,null],[17,"SECT233K1","","",null,null],[17,"SECT233R1","","",null,null],[17,"SECT239K1","","",null,null],[17,"SECT283K1","","",null,null],[17,"SECT283R1","","",null,null],[17,"SECT409K1","","",null,null],[17,"SECT409R1","","",null,null],[17,"SECT571K1","","",null,null],[17,"SECT571R1","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS1","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS3","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS4","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS5","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS6","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS7","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS8","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS9","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS10","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS11","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS12","","",null,null],[17,"CAST5_CBC","","",null,null],[17,"CAST5_ECB","","",null,null],[17,"CAST5_CFB64","","",null,null],[17,"CAST5_OFB64","","",null,null],[17,"PBEWITHMD5ANDCAST5_CBC","","",null,null],[17,"ID_PASSWORDBASEDMAC","","",null,null],[17,"ID_DHBASEDMAC","","",null,null],[17,"RSADSI","","",null,null],[17,"PKCS","","",null,null],[17,"PKCS1","","",null,null],[17,"RSAENCRYPTION","","",null,null],[17,"MD2WITHRSAENCRYPTION","","",null,null],[17,"MD4WITHRSAENCRYPTION","","",null,null],[17,"MD5WITHRSAENCRYPTION","","",null,null],[17,"SHA1WITHRSAENCRYPTION","","",null,null],[17,"RSAESOAEP","","",null,null],[17,"MGF1","","",null,null],[17,"RSASSAPSS","","",null,null],[17,"SHA256WITHRSAENCRYPTION","","",null,null],[17,"SHA384WITHRSAENCRYPTION","","",null,null],[17,"SHA512WITHRSAENCRYPTION","","",null,null],[17,"SHA224WITHRSAENCRYPTION","","",null,null],[17,"PKCS3","","",null,null],[17,"DHKEYAGREEMENT","","",null,null],[17,"PKCS5","","",null,null],[17,"PBEWITHMD2ANDDES_CBC","","",null,null],[17,"PBEWITHMD5ANDDES_CBC","","",null,null],[17,"PBEWITHMD2ANDRC2_CBC","","",null,null],[17,"PBEWITHMD5ANDRC2_CBC","","",null,null],[17,"PBEWITHSHA1ANDDES_CBC","","",null,null],[17,"PBEWITHSHA1ANDRC2_CBC","","",null,null],[17,"ID_PBKDF2","","",null,null],[17,"PBES2","","",null,null],[17,"PBMAC1","","",null,null],[17,"PKCS7","","",null,null],[17,"PKCS7_DATA","","",null,null],[17,"PKCS7_SIGNED","","",null,null],[17,"PKCS7_ENVELOPED","","",null,null],[17,"PKCS7_SIGNEDANDENVELOPED","","",null,null],[17,"PKCS7_DIGEST","","",null,null],[17,"PKCS7_ENCRYPTED","","",null,null],[17,"PKCS9","","",null,null],[17,"PKCS9_EMAILADDRESS","","",null,null],[17,"PKCS9_UNSTRUCTUREDNAME","","",null,null],[17,"PKCS9_CONTENTTYPE","","",null,null],[17,"PKCS9_MESSAGEDIGEST","","",null,null],[17,"PKCS9_SIGNINGTIME","","",null,null],[17,"PKCS9_COUNTERSIGNATURE","","",null,null],[17,"PKCS9_CHALLENGEPASSWORD","","",null,null],[17,"PKCS9_UNSTRUCTUREDADDRESS","","",null,null],[17,"PKCS9_EXTCERTATTRIBUTES","","",null,null],[17,"EXT_REQ","","",null,null],[17,"SMIMECAPABILITIES","","",null,null],[17,"SMIME","","",null,null],[17,"ID_SMIME_MOD","","",null,null],[17,"ID_SMIME_CT","","",null,null],[17,"ID_SMIME_AA","","",null,null],[17,"ID_SMIME_ALG","","",null,null],[17,"ID_SMIME_CD","","",null,null],[17,"ID_SMIME_SPQ","","",null,null],[17,"ID_SMIME_CTI","","",null,null],[17,"ID_SMIME_MOD_CMS","","",null,null],[17,"ID_SMIME_MOD_ESS","","",null,null],[17,"ID_SMIME_MOD_OID","","",null,null],[17,"ID_SMIME_MOD_MSG_V3","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_88","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_97","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_88","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_97","","",null,null],[17,"ID_SMIME_CT_RECEIPT","","",null,null],[17,"ID_SMIME_CT_AUTHDATA","","",null,null],[17,"ID_SMIME_CT_PUBLISHCERT","","",null,null],[17,"ID_SMIME_CT_TSTINFO","","",null,null],[17,"ID_SMIME_CT_TDTINFO","","",null,null],[17,"ID_SMIME_CT_CONTENTINFO","","",null,null],[17,"ID_SMIME_CT_DVCSREQUESTDATA","","",null,null],[17,"ID_SMIME_CT_DVCSRESPONSEDATA","","",null,null],[17,"ID_SMIME_CT_COMPRESSEDDATA","","",null,null],[17,"ID_CT_ASCIITEXTWITHCRLF","","",null,null],[17,"ID_SMIME_AA_RECEIPTREQUEST","","",null,null],[17,"ID_SMIME_AA_SECURITYLABEL","","",null,null],[17,"ID_SMIME_AA_MLEXPANDHISTORY","","",null,null],[17,"ID_SMIME_AA_CONTENTHINT","","",null,null],[17,"ID_SMIME_AA_MSGSIGDIGEST","","",null,null],[17,"ID_SMIME_AA_ENCAPCONTENTTYPE","","",null,null],[17,"ID_SMIME_AA_CONTENTIDENTIFIER","","",null,null],[17,"ID_SMIME_AA_MACVALUE","","",null,null],[17,"ID_SMIME_AA_EQUIVALENTLABELS","","",null,null],[17,"ID_SMIME_AA_CONTENTREFERENCE","","",null,null],[17,"ID_SMIME_AA_ENCRYPKEYPREF","","",null,null],[17,"ID_SMIME_AA_SIGNINGCERTIFICATE","","",null,null],[17,"ID_SMIME_AA_SMIMEENCRYPTCERTS","","",null,null],[17,"ID_SMIME_AA_TIMESTAMPTOKEN","","",null,null],[17,"ID_SMIME_AA_ETS_SIGPOLICYID","","",null,null],[17,"ID_SMIME_AA_ETS_COMMITMENTTYPE","","",null,null],[17,"ID_SMIME_AA_ETS_SIGNERLOCATION","","",null,null],[17,"ID_SMIME_AA_ETS_SIGNERATTR","","",null,null],[17,"ID_SMIME_AA_ETS_OTHERSIGCERT","","",null,null],[17,"ID_SMIME_AA_ETS_CONTENTTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_CERTIFICATEREFS","","",null,null],[17,"ID_SMIME_AA_ETS_REVOCATIONREFS","","",null,null],[17,"ID_SMIME_AA_ETS_CERTVALUES","","",null,null],[17,"ID_SMIME_AA_ETS_REVOCATIONVALUES","","",null,null],[17,"ID_SMIME_AA_ETS_ESCTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_CERTCRLTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_ARCHIVETIMESTAMP","","",null,null],[17,"ID_SMIME_AA_SIGNATURETYPE","","",null,null],[17,"ID_SMIME_AA_DVCS_DVC","","",null,null],[17,"ID_SMIME_ALG_ESDHWITH3DES","","",null,null],[17,"ID_SMIME_ALG_ESDHWITHRC2","","",null,null],[17,"ID_SMIME_ALG_3DESWRAP","","",null,null],[17,"ID_SMIME_ALG_RC2WRAP","","",null,null],[17,"ID_SMIME_ALG_ESDH","","",null,null],[17,"ID_SMIME_ALG_CMS3DESWRAP","","",null,null],[17,"ID_SMIME_ALG_CMSRC2WRAP","","",null,null],[17,"ID_ALG_PWRI_KEK","","",null,null],[17,"ID_SMIME_CD_LDAP","","",null,null],[17,"ID_SMIME_SPQ_ETS_SQT_URI","","",null,null],[17,"ID_SMIME_SPQ_ETS_SQT_UNOTICE","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFORIGIN","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFRECEIPT","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFDELIVERY","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFSENDER","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFAPPROVAL","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFCREATION","","",null,null],[17,"FRIENDLYNAME","","",null,null],[17,"LOCALKEYID","","",null,null],[17,"MS_CSP_NAME","","",null,null],[17,"LOCALKEYSET","","",null,null],[17,"X509CERTIFICATE","","",null,null],[17,"SDSICERTIFICATE","","",null,null],[17,"X509CRL","","",null,null],[17,"PBE_WITHSHA1AND128BITRC4","","",null,null],[17,"PBE_WITHSHA1AND40BITRC4","","",null,null],[17,"PBE_WITHSHA1AND3_KEY_TRIPLEDES_CBC","","",null,null],[17,"PBE_WITHSHA1AND2_KEY_TRIPLEDES_CBC","","",null,null],[17,"PBE_WITHSHA1AND128BITRC2_CBC","","",null,null],[17,"PBE_WITHSHA1AND40BITRC2_CBC","","",null,null],[17,"KEYBAG","","",null,null],[17,"PKCS8SHROUDEDKEYBAG","","",null,null],[17,"CERTBAG","","",null,null],[17,"CRLBAG","","",null,null],[17,"SECRETBAG","","",null,null],[17,"SAFECONTENTSBAG","","",null,null],[17,"MD2","","",null,null],[17,"MD4","","",null,null],[17,"MD5","","",null,null],[17,"MD5_SHA1","","",null,null],[17,"HMACWITHMD5","","",null,null],[17,"HMACWITHSHA1","","",null,null],[17,"HMACWITHSHA224","","",null,null],[17,"HMACWITHSHA256","","",null,null],[17,"HMACWITHSHA384","","",null,null],[17,"HMACWITHSHA512","","",null,null],[17,"RC2_CBC","","",null,null],[17,"RC2_ECB","","",null,null],[17,"RC2_CFB64","","",null,null],[17,"RC2_OFB64","","",null,null],[17,"RC2_40_CBC","","",null,null],[17,"RC2_64_CBC","","",null,null],[17,"RC4","","",null,null],[17,"RC4_40","","",null,null],[17,"DES_EDE3_CBC","","",null,null],[17,"RC5_CBC","","",null,null],[17,"RC5_ECB","","",null,null],[17,"RC5_CFB64","","",null,null],[17,"RC5_OFB64","","",null,null],[17,"MS_EXT_REQ","","",null,null],[17,"MS_CODE_IND","","",null,null],[17,"MS_CODE_COM","","",null,null],[17,"MS_CTL_SIGN","","",null,null],[17,"MS_SGC","","",null,null],[17,"MS_EFS","","",null,null],[17,"MS_SMARTCARD_LOGIN","","",null,null],[17,"MS_UPN","","",null,null],[17,"IDEA_CBC","","",null,null],[17,"IDEA_ECB","","",null,null],[17,"IDEA_CFB64","","",null,null],[17,"IDEA_OFB64","","",null,null],[17,"BF_CBC","","",null,null],[17,"BF_ECB","","",null,null],[17,"BF_CFB64","","",null,null],[17,"BF_OFB64","","",null,null],[17,"ID_PKIX","","",null,null],[17,"ID_PKIX_MOD","","",null,null],[17,"ID_PE","","",null,null],[17,"ID_QT","","",null,null],[17,"ID_KP","","",null,null],[17,"ID_IT","","",null,null],[17,"ID_PKIP","","",null,null],[17,"ID_ALG","","",null,null],[17,"ID_CMC","","",null,null],[17,"ID_ON","","",null,null],[17,"ID_PDA","","",null,null],[17,"ID_ACA","","",null,null],[17,"ID_QCS","","",null,null],[17,"ID_CCT","","",null,null],[17,"ID_PPL","","",null,null],[17,"ID_AD","","",null,null],[17,"ID_PKIX1_EXPLICIT_88","","",null,null],[17,"ID_PKIX1_IMPLICIT_88","","",null,null],[17,"ID_PKIX1_EXPLICIT_93","","",null,null],[17,"ID_PKIX1_IMPLICIT_93","","",null,null],[17,"ID_MOD_CRMF","","",null,null],[17,"ID_MOD_CMC","","",null,null],[17,"ID_MOD_KEA_PROFILE_88","","",null,null],[17,"ID_MOD_KEA_PROFILE_93","","",null,null],[17,"ID_MOD_CMP","","",null,null],[17,"ID_MOD_QUALIFIED_CERT_88","","",null,null],[17,"ID_MOD_QUALIFIED_CERT_93","","",null,null],[17,"ID_MOD_ATTRIBUTE_CERT","","",null,null],[17,"ID_MOD_TIMESTAMP_PROTOCOL","","",null,null],[17,"ID_MOD_OCSP","","",null,null],[17,"ID_MOD_DVCS","","",null,null],[17,"ID_MOD_CMP2000","","",null,null],[17,"INFO_ACCESS","","",null,null],[17,"BIOMETRICINFO","","",null,null],[17,"QCSTATEMENTS","","",null,null],[17,"AC_AUDITENTITY","","",null,null],[17,"AC_TARGETING","","",null,null],[17,"AACONTROLS","","",null,null],[17,"SBGP_IPADDRBLOCK","","",null,null],[17,"SBGP_AUTONOMOUSSYSNUM","","",null,null],[17,"SBGP_ROUTERIDENTIFIER","","",null,null],[17,"AC_PROXYING","","",null,null],[17,"SINFO_ACCESS","","",null,null],[17,"PROXYCERTINFO","","",null,null],[17,"ID_QT_CPS","","",null,null],[17,"ID_QT_UNOTICE","","",null,null],[17,"TEXTNOTICE","","",null,null],[17,"SERVER_AUTH","","",null,null],[17,"CLIENT_AUTH","","",null,null],[17,"CODE_SIGN","","",null,null],[17,"EMAIL_PROTECT","","",null,null],[17,"IPSECENDSYSTEM","","",null,null],[17,"IPSECTUNNEL","","",null,null],[17,"IPSECUSER","","",null,null],[17,"TIME_STAMP","","",null,null],[17,"OCSP_SIGN","","",null,null],[17,"DVCS","","",null,null],[17,"ID_IT_CAPROTENCCERT","","",null,null],[17,"ID_IT_SIGNKEYPAIRTYPES","","",null,null],[17,"ID_IT_ENCKEYPAIRTYPES","","",null,null],[17,"ID_IT_PREFERREDSYMMALG","","",null,null],[17,"ID_IT_CAKEYUPDATEINFO","","",null,null],[17,"ID_IT_CURRENTCRL","","",null,null],[17,"ID_IT_UNSUPPORTEDOIDS","","",null,null],[17,"ID_IT_SUBSCRIPTIONREQUEST","","",null,null],[17,"ID_IT_SUBSCRIPTIONRESPONSE","","",null,null],[17,"ID_IT_KEYPAIRPARAMREQ","","",null,null],[17,"ID_IT_KEYPAIRPARAMREP","","",null,null],[17,"ID_IT_REVPASSPHRASE","","",null,null],[17,"ID_IT_IMPLICITCONFIRM","","",null,null],[17,"ID_IT_CONFIRMWAITTIME","","",null,null],[17,"ID_IT_ORIGPKIMESSAGE","","",null,null],[17,"ID_IT_SUPPLANGTAGS","","",null,null],[17,"ID_REGCTRL","","",null,null],[17,"ID_REGINFO","","",null,null],[17,"ID_REGCTRL_REGTOKEN","","",null,null],[17,"ID_REGCTRL_AUTHENTICATOR","","",null,null],[17,"ID_REGCTRL_PKIPUBLICATIONINFO","","",null,null],[17,"ID_REGCTRL_PKIARCHIVEOPTIONS","","",null,null],[17,"ID_REGCTRL_OLDCERTID","","",null,null],[17,"ID_REGCTRL_PROTOCOLENCRKEY","","",null,null],[17,"ID_REGINFO_UTF8PAIRS","","",null,null],[17,"ID_REGINFO_CERTREQ","","",null,null],[17,"ID_ALG_DES40","","",null,null],[17,"ID_ALG_NOSIGNATURE","","",null,null],[17,"ID_ALG_DH_SIG_HMAC_SHA1","","",null,null],[17,"ID_ALG_DH_POP","","",null,null],[17,"ID_CMC_STATUSINFO","","",null,null],[17,"ID_CMC_IDENTIFICATION","","",null,null],[17,"ID_CMC_IDENTITYPROOF","","",null,null],[17,"ID_CMC_DATARETURN","","",null,null],[17,"ID_CMC_TRANSACTIONID","","",null,null],[17,"ID_CMC_SENDERNONCE","","",null,null],[17,"ID_CMC_RECIPIENTNONCE","","",null,null],[17,"ID_CMC_ADDEXTENSIONS","","",null,null],[17,"ID_CMC_ENCRYPTEDPOP","","",null,null],[17,"ID_CMC_DECRYPTEDPOP","","",null,null],[17,"ID_CMC_LRAPOPWITNESS","","",null,null],[17,"ID_CMC_GETCERT","","",null,null],[17,"ID_CMC_GETCRL","","",null,null],[17,"ID_CMC_REVOKEREQUEST","","",null,null],[17,"ID_CMC_REGINFO","","",null,null],[17,"ID_CMC_RESPONSEINFO","","",null,null],[17,"ID_CMC_QUERYPENDING","","",null,null],[17,"ID_CMC_POPLINKRANDOM","","",null,null],[17,"ID_CMC_POPLINKWITNESS","","",null,null],[17,"ID_CMC_CONFIRMCERTACCEPTANCE","","",null,null],[17,"ID_ON_PERSONALDATA","","",null,null],[17,"ID_ON_PERMANENTIDENTIFIER","","",null,null],[17,"ID_PDA_DATEOFBIRTH","","",null,null],[17,"ID_PDA_PLACEOFBIRTH","","",null,null],[17,"ID_PDA_GENDER","","",null,null],[17,"ID_PDA_COUNTRYOFCITIZENSHIP","","",null,null],[17,"ID_PDA_COUNTRYOFRESIDENCE","","",null,null],[17,"ID_ACA_AUTHENTICATIONINFO","","",null,null],[17,"ID_ACA_ACCESSIDENTITY","","",null,null],[17,"ID_ACA_CHARGINGIDENTITY","","",null,null],[17,"ID_ACA_GROUP","","",null,null],[17,"ID_ACA_ROLE","","",null,null],[17,"ID_ACA_ENCATTRS","","",null,null],[17,"ID_QCS_PKIXQCSYNTAX_V1","","",null,null],[17,"ID_CCT_CRS","","",null,null],[17,"ID_CCT_PKIDATA","","",null,null],[17,"ID_CCT_PKIRESPONSE","","",null,null],[17,"ID_PPL_ANYLANGUAGE","","",null,null],[17,"ID_PPL_INHERITALL","","",null,null],[17,"INDEPENDENT","","",null,null],[17,"AD_OCSP","","",null,null],[17,"AD_CA_ISSUERS","","",null,null],[17,"AD_TIMESTAMPING","","",null,null],[17,"AD_DVCS","","",null,null],[17,"CAREPOSITORY","","",null,null],[17,"ID_PKIX_OCSP_BASIC","","",null,null],[17,"ID_PKIX_OCSP_NONCE","","",null,null],[17,"ID_PKIX_OCSP_CRLID","","",null,null],[17,"ID_PKIX_OCSP_ACCEPTABLERESPONSES","","",null,null],[17,"ID_PKIX_OCSP_NOCHECK","","",null,null],[17,"ID_PKIX_OCSP_ARCHIVECUTOFF","","",null,null],[17,"ID_PKIX_OCSP_SERVICELOCATOR","","",null,null],[17,"ID_PKIX_OCSP_EXTENDEDSTATUS","","",null,null],[17,"ID_PKIX_OCSP_VALID","","",null,null],[17,"ID_PKIX_OCSP_PATH","","",null,null],[17,"ID_PKIX_OCSP_TRUSTROOT","","",null,null],[17,"ALGORITHM","","",null,null],[17,"MD5WITHRSA","","",null,null],[17,"DES_ECB","","",null,null],[17,"DES_CBC","","",null,null],[17,"DES_OFB64","","",null,null],[17,"DES_CFB64","","",null,null],[17,"RSASIGNATURE","","",null,null],[17,"DSA_2","","",null,null],[17,"DSAWITHSHA","","",null,null],[17,"SHAWITHRSAENCRYPTION","","",null,null],[17,"DES_EDE_ECB","","",null,null],[17,"DES_EDE3_ECB","","",null,null],[17,"DES_EDE_CBC","","",null,null],[17,"DES_EDE_CFB64","","",null,null],[17,"DES_EDE3_CFB64","","",null,null],[17,"DES_EDE_OFB64","","",null,null],[17,"DES_EDE3_OFB64","","",null,null],[17,"DESX_CBC","","",null,null],[17,"SHA","","",null,null],[17,"SHA1","","",null,null],[17,"DSAWITHSHA1_2","","",null,null],[17,"SHA1WITHRSA","","",null,null],[17,"RIPEMD160","","",null,null],[17,"RIPEMD160WITHRSA","","",null,null],[17,"SXNET","","",null,null],[17,"X500","","",null,null],[17,"X509","","",null,null],[17,"COMMONNAME","","",null,null],[17,"SURNAME","","",null,null],[17,"SERIALNUMBER","","",null,null],[17,"COUNTRYNAME","","",null,null],[17,"LOCALITYNAME","","",null,null],[17,"STATEORPROVINCENAME","","",null,null],[17,"STREETADDRESS","","",null,null],[17,"ORGANIZATIONNAME","","",null,null],[17,"ORGANIZATIONALUNITNAME","","",null,null],[17,"TITLE","","",null,null],[17,"DESCRIPTION","","",null,null],[17,"SEARCHGUIDE","","",null,null],[17,"BUSINESSCATEGORY","","",null,null],[17,"POSTALADDRESS","","",null,null],[17,"POSTALCODE","","",null,null],[17,"POSTOFFICEBOX","","",null,null],[17,"PHYSICALDELIVERYOFFICENAME","","",null,null],[17,"TELEPHONENUMBER","","",null,null],[17,"TELEXNUMBER","","",null,null],[17,"TELETEXTERMINALIDENTIFIER","","",null,null],[17,"FACSIMILETELEPHONENUMBER","","",null,null],[17,"X121ADDRESS","","",null,null],[17,"INTERNATIONALISDNNUMBER","","",null,null],[17,"REGISTEREDADDRESS","","",null,null],[17,"DESTINATIONINDICATOR","","",null,null],[17,"PREFERREDDELIVERYMETHOD","","",null,null],[17,"PRESENTATIONADDRESS","","",null,null],[17,"SUPPORTEDAPPLICATIONCONTEXT","","",null,null],[17,"MEMBER","","",null,null],[17,"OWNER","","",null,null],[17,"ROLEOCCUPANT","","",null,null],[17,"SEEALSO","","",null,null],[17,"USERPASSWORD","","",null,null],[17,"USERCERTIFICATE","","",null,null],[17,"CACERTIFICATE","","",null,null],[17,"AUTHORITYREVOCATIONLIST","","",null,null],[17,"CERTIFICATEREVOCATIONLIST","","",null,null],[17,"CROSSCERTIFICATEPAIR","","",null,null],[17,"NAME","","",null,null],[17,"GIVENNAME","","",null,null],[17,"INITIALS","","",null,null],[17,"GENERATIONQUALIFIER","","",null,null],[17,"X500UNIQUEIDENTIFIER","","",null,null],[17,"DNQUALIFIER","","",null,null],[17,"ENHANCEDSEARCHGUIDE","","",null,null],[17,"PROTOCOLINFORMATION","","",null,null],[17,"DISTINGUISHEDNAME","","",null,null],[17,"UNIQUEMEMBER","","",null,null],[17,"HOUSEIDENTIFIER","","",null,null],[17,"SUPPORTEDALGORITHMS","","",null,null],[17,"DELTAREVOCATIONLIST","","",null,null],[17,"DMDNAME","","",null,null],[17,"PSEUDONYM","","",null,null],[17,"ROLE","","",null,null],[17,"X500ALGORITHMS","","",null,null],[17,"RSA","","",null,null],[17,"MDC2WITHRSA","","",null,null],[17,"MDC2","","",null,null],[17,"ID_CE","","",null,null],[17,"SUBJECT_DIRECTORY_ATTRIBUTES","","",null,null],[17,"SUBJECT_KEY_IDENTIFIER","","",null,null],[17,"KEY_USAGE","","",null,null],[17,"PRIVATE_KEY_USAGE_PERIOD","","",null,null],[17,"SUBJECT_ALT_NAME","","",null,null],[17,"ISSUER_ALT_NAME","","",null,null],[17,"BASIC_CONSTRAINTS","","",null,null],[17,"CRL_NUMBER","","",null,null],[17,"CRL_REASON","","",null,null],[17,"INVALIDITY_DATE","","",null,null],[17,"DELTA_CRL","","",null,null],[17,"ISSUING_DISTRIBUTION_POINT","","",null,null],[17,"CERTIFICATE_ISSUER","","",null,null],[17,"NAME_CONSTRAINTS","","",null,null],[17,"CRL_DISTRIBUTION_POINTS","","",null,null],[17,"CERTIFICATE_POLICIES","","",null,null],[17,"ANY_POLICY","","",null,null],[17,"POLICY_MAPPINGS","","",null,null],[17,"AUTHORITY_KEY_IDENTIFIER","","",null,null],[17,"POLICY_CONSTRAINTS","","",null,null],[17,"EXT_KEY_USAGE","","",null,null],[17,"FRESHEST_CRL","","",null,null],[17,"INHIBIT_ANY_POLICY","","",null,null],[17,"TARGET_INFORMATION","","",null,null],[17,"NO_REV_AVAIL","","",null,null],[17,"ANYEXTENDEDKEYUSAGE","","",null,null],[17,"NETSCAPE","","",null,null],[17,"NETSCAPE_CERT_EXTENSION","","",null,null],[17,"NETSCAPE_DATA_TYPE","","",null,null],[17,"NETSCAPE_CERT_TYPE","","",null,null],[17,"NETSCAPE_BASE_URL","","",null,null],[17,"NETSCAPE_REVOCATION_URL","","",null,null],[17,"NETSCAPE_CA_REVOCATION_URL","","",null,null],[17,"NETSCAPE_RENEWAL_URL","","",null,null],[17,"NETSCAPE_CA_POLICY_URL","","",null,null],[17,"NETSCAPE_SSL_SERVER_NAME","","",null,null],[17,"NETSCAPE_COMMENT","","",null,null],[17,"NETSCAPE_CERT_SEQUENCE","","",null,null],[17,"NS_SGC","","",null,null],[17,"ORG","","",null,null],[17,"DOD","","",null,null],[17,"IANA","","",null,null],[17,"DIRECTORY","","",null,null],[17,"MANAGEMENT","","",null,null],[17,"EXPERIMENTAL","","",null,null],[17,"PRIVATE","","",null,null],[17,"SECURITY","","",null,null],[17,"SNMPV2","","",null,null],[17,"MAIL","","",null,null],[17,"ENTERPRISES","","",null,null],[17,"DCOBJECT","","",null,null],[17,"MIME_MHS","","",null,null],[17,"MIME_MHS_HEADINGS","","",null,null],[17,"MIME_MHS_BODIES","","",null,null],[17,"ID_HEX_PARTIAL_MESSAGE","","",null,null],[17,"ID_HEX_MULTIPART_MESSAGE","","",null,null],[17,"ZLIB_COMPRESSION","","",null,null],[17,"AES_128_ECB","","",null,null],[17,"AES_128_CBC","","",null,null],[17,"AES_128_OFB128","","",null,null],[17,"AES_128_CFB128","","",null,null],[17,"ID_AES128_WRAP","","",null,null],[17,"AES_128_GCM","","",null,null],[17,"AES_128_CCM","","",null,null],[17,"ID_AES128_WRAP_PAD","","",null,null],[17,"AES_192_ECB","","",null,null],[17,"AES_192_CBC","","",null,null],[17,"AES_192_OFB128","","",null,null],[17,"AES_192_CFB128","","",null,null],[17,"ID_AES192_WRAP","","",null,null],[17,"AES_192_GCM","","",null,null],[17,"AES_192_CCM","","",null,null],[17,"ID_AES192_WRAP_PAD","","",null,null],[17,"AES_256_ECB","","",null,null],[17,"AES_256_CBC","","",null,null],[17,"AES_256_OFB128","","",null,null],[17,"AES_256_CFB128","","",null,null],[17,"ID_AES256_WRAP","","",null,null],[17,"AES_256_GCM","","",null,null],[17,"AES_256_CCM","","",null,null],[17,"ID_AES256_WRAP_PAD","","",null,null],[17,"AES_128_CFB1","","",null,null],[17,"AES_192_CFB1","","",null,null],[17,"AES_256_CFB1","","",null,null],[17,"AES_128_CFB8","","",null,null],[17,"AES_192_CFB8","","",null,null],[17,"AES_256_CFB8","","",null,null],[17,"AES_128_CTR","","",null,null],[17,"AES_192_CTR","","",null,null],[17,"AES_256_CTR","","",null,null],[17,"AES_128_XTS","","",null,null],[17,"AES_256_XTS","","",null,null],[17,"DES_CFB1","","",null,null],[17,"DES_CFB8","","",null,null],[17,"DES_EDE3_CFB1","","",null,null],[17,"DES_EDE3_CFB8","","",null,null],[17,"SHA256","","",null,null],[17,"SHA384","","",null,null],[17,"SHA512","","",null,null],[17,"SHA224","","",null,null],[17,"DSA_WITH_SHA224","","",null,null],[17,"DSA_WITH_SHA256","","",null,null],[17,"HOLD_INSTRUCTION_CODE","","",null,null],[17,"HOLD_INSTRUCTION_NONE","","",null,null],[17,"HOLD_INSTRUCTION_CALL_ISSUER","","",null,null],[17,"HOLD_INSTRUCTION_REJECT","","",null,null],[17,"DATA","","",null,null],[17,"PSS","","",null,null],[17,"UCL","","",null,null],[17,"PILOT","","",null,null],[17,"PILOTATTRIBUTETYPE","","",null,null],[17,"PILOTATTRIBUTESYNTAX","","",null,null],[17,"PILOTOBJECTCLASS","","",null,null],[17,"PILOTGROUPS","","",null,null],[17,"IA5STRINGSYNTAX","","",null,null],[17,"CASEIGNOREIA5STRINGSYNTAX","","",null,null],[17,"PILOTOBJECT","","",null,null],[17,"PILOTPERSON","","",null,null],[17,"ACCOUNT","","",null,null],[17,"DOCUMENT","","",null,null],[17,"ROOM","","",null,null],[17,"DOCUMENTSERIES","","",null,null],[17,"DOMAIN","","",null,null],[17,"RFC822LOCALPART","","",null,null],[17,"DNSDOMAIN","","",null,null],[17,"DOMAINRELATEDOBJECT","","",null,null],[17,"FRIENDLYCOUNTRY","","",null,null],[17,"SIMPLESECURITYOBJECT","","",null,null],[17,"PILOTORGANIZATION","","",null,null],[17,"PILOTDSA","","",null,null],[17,"QUALITYLABELLEDDATA","","",null,null],[17,"USERID","","",null,null],[17,"TEXTENCODEDORADDRESS","","",null,null],[17,"RFC822MAILBOX","","",null,null],[17,"INFO","","",null,null],[17,"FAVOURITEDRINK","","",null,null],[17,"ROOMNUMBER","","",null,null],[17,"PHOTO","","",null,null],[17,"USERCLASS","","",null,null],[17,"HOST","","",null,null],[17,"MANAGER","","",null,null],[17,"DOCUMENTIDENTIFIER","","",null,null],[17,"DOCUMENTTITLE","","",null,null],[17,"DOCUMENTVERSION","","",null,null],[17,"DOCUMENTAUTHOR","","",null,null],[17,"DOCUMENTLOCATION","","",null,null],[17,"HOMETELEPHONENUMBER","","",null,null],[17,"SECRETARY","","",null,null],[17,"OTHERMAILBOX","","",null,null],[17,"LASTMODIFIEDTIME","","",null,null],[17,"LASTMODIFIEDBY","","",null,null],[17,"DOMAINCOMPONENT","","",null,null],[17,"ARECORD","","",null,null],[17,"PILOTATTRIBUTETYPE27","","",null,null],[17,"MXRECORD","","",null,null],[17,"NSRECORD","","",null,null],[17,"SOARECORD","","",null,null],[17,"CNAMERECORD","","",null,null],[17,"ASSOCIATEDDOMAIN","","",null,null],[17,"ASSOCIATEDNAME","","",null,null],[17,"HOMEPOSTALADDRESS","","",null,null],[17,"PERSONALTITLE","","",null,null],[17,"MOBILETELEPHONENUMBER","","",null,null],[17,"PAGERTELEPHONENUMBER","","",null,null],[17,"FRIENDLYCOUNTRYNAME","","",null,null],[17,"ORGANIZATIONALSTATUS","","",null,null],[17,"JANETMAILBOX","","",null,null],[17,"MAILPREFERENCEOPTION","","",null,null],[17,"BUILDINGNAME","","",null,null],[17,"DSAQUALITY","","",null,null],[17,"SINGLELEVELQUALITY","","",null,null],[17,"SUBTREEMINIMUMQUALITY","","",null,null],[17,"SUBTREEMAXIMUMQUALITY","","",null,null],[17,"PERSONALSIGNATURE","","",null,null],[17,"DITREDIRECT","","",null,null],[17,"AUDIO","","",null,null],[17,"DOCUMENTPUBLISHER","","",null,null],[17,"ID_SET","","",null,null],[17,"SET_CTYPE","","",null,null],[17,"SET_MSGEXT","","",null,null],[17,"SET_ATTR","","",null,null],[17,"SET_POLICY","","",null,null],[17,"SET_CERTEXT","","",null,null],[17,"SET_BRAND","","",null,null],[17,"SETCT_PANDATA","","",null,null],[17,"SETCT_PANTOKEN","","",null,null],[17,"SETCT_PANONLY","","",null,null],[17,"SETCT_OIDATA","","",null,null],[17,"SETCT_PI","","",null,null],[17,"SETCT_PIDATA","","",null,null],[17,"SETCT_PIDATAUNSIGNED","","",null,null],[17,"SETCT_HODINPUT","","",null,null],[17,"SETCT_AUTHRESBAGGAGE","","",null,null],[17,"SETCT_AUTHREVREQBAGGAGE","","",null,null],[17,"SETCT_AUTHREVRESBAGGAGE","","",null,null],[17,"SETCT_CAPTOKENSEQ","","",null,null],[17,"SETCT_PINITRESDATA","","",null,null],[17,"SETCT_PI_TBS","","",null,null],[17,"SETCT_PRESDATA","","",null,null],[17,"SETCT_AUTHREQTBS","","",null,null],[17,"SETCT_AUTHRESTBS","","",null,null],[17,"SETCT_AUTHRESTBSX","","",null,null],[17,"SETCT_AUTHTOKENTBS","","",null,null],[17,"SETCT_CAPTOKENDATA","","",null,null],[17,"SETCT_CAPTOKENTBS","","",null,null],[17,"SETCT_ACQCARDCODEMSG","","",null,null],[17,"SETCT_AUTHREVREQTBS","","",null,null],[17,"SETCT_AUTHREVRESDATA","","",null,null],[17,"SETCT_AUTHREVRESTBS","","",null,null],[17,"SETCT_CAPREQTBS","","",null,null],[17,"SETCT_CAPREQTBSX","","",null,null],[17,"SETCT_CAPRESDATA","","",null,null],[17,"SETCT_CAPREVREQTBS","","",null,null],[17,"SETCT_CAPREVREQTBSX","","",null,null],[17,"SETCT_CAPREVRESDATA","","",null,null],[17,"SETCT_CREDREQTBS","","",null,null],[17,"SETCT_CREDREQTBSX","","",null,null],[17,"SETCT_CREDRESDATA","","",null,null],[17,"SETCT_CREDREVREQTBS","","",null,null],[17,"SETCT_CREDREVREQTBSX","","",null,null],[17,"SETCT_CREDREVRESDATA","","",null,null],[17,"SETCT_PCERTREQDATA","","",null,null],[17,"SETCT_PCERTRESTBS","","",null,null],[17,"SETCT_BATCHADMINREQDATA","","",null,null],[17,"SETCT_BATCHADMINRESDATA","","",null,null],[17,"SETCT_CARDCINITRESTBS","","",null,null],[17,"SETCT_MEAQCINITRESTBS","","",null,null],[17,"SETCT_REGFORMRESTBS","","",null,null],[17,"SETCT_CERTREQDATA","","",null,null],[17,"SETCT_CERTREQTBS","","",null,null],[17,"SETCT_CERTRESDATA","","",null,null],[17,"SETCT_CERTINQREQTBS","","",null,null],[17,"SETCT_ERRORTBS","","",null,null],[17,"SETCT_PIDUALSIGNEDTBE","","",null,null],[17,"SETCT_PIUNSIGNEDTBE","","",null,null],[17,"SETCT_AUTHREQTBE","","",null,null],[17,"SETCT_AUTHRESTBE","","",null,null],[17,"SETCT_AUTHRESTBEX","","",null,null],[17,"SETCT_AUTHTOKENTBE","","",null,null],[17,"SETCT_CAPTOKENTBE","","",null,null],[17,"SETCT_CAPTOKENTBEX","","",null,null],[17,"SETCT_ACQCARDCODEMSGTBE","","",null,null],[17,"SETCT_AUTHREVREQTBE","","",null,null],[17,"SETCT_AUTHREVRESTBE","","",null,null],[17,"SETCT_AUTHREVRESTBEB","","",null,null],[17,"SETCT_CAPREQTBE","","",null,null],[17,"SETCT_CAPREQTBEX","","",null,null],[17,"SETCT_CAPRESTBE","","",null,null],[17,"SETCT_CAPREVREQTBE","","",null,null],[17,"SETCT_CAPREVREQTBEX","","",null,null],[17,"SETCT_CAPREVRESTBE","","",null,null],[17,"SETCT_CREDREQTBE","","",null,null],[17,"SETCT_CREDREQTBEX","","",null,null],[17,"SETCT_CREDRESTBE","","",null,null],[17,"SETCT_CREDREVREQTBE","","",null,null],[17,"SETCT_CREDREVREQTBEX","","",null,null],[17,"SETCT_CREDREVRESTBE","","",null,null],[17,"SETCT_BATCHADMINREQTBE","","",null,null],[17,"SETCT_BATCHADMINRESTBE","","",null,null],[17,"SETCT_REGFORMREQTBE","","",null,null],[17,"SETCT_CERTREQTBE","","",null,null],[17,"SETCT_CERTREQTBEX","","",null,null],[17,"SETCT_CERTRESTBE","","",null,null],[17,"SETCT_CRLNOTIFICATIONTBS","","",null,null],[17,"SETCT_CRLNOTIFICATIONRESTBS","","",null,null],[17,"SETCT_BCIDISTRIBUTIONTBS","","",null,null],[17,"SETEXT_GENCRYPT","","",null,null],[17,"SETEXT_MIAUTH","","",null,null],[17,"SETEXT_PINSECURE","","",null,null],[17,"SETEXT_PINANY","","",null,null],[17,"SETEXT_TRACK2","","",null,null],[17,"SETEXT_CV","","",null,null],[17,"SET_POLICY_ROOT","","",null,null],[17,"SETCEXT_HASHEDROOT","","",null,null],[17,"SETCEXT_CERTTYPE","","",null,null],[17,"SETCEXT_MERCHDATA","","",null,null],[17,"SETCEXT_CCERTREQUIRED","","",null,null],[17,"SETCEXT_TUNNELING","","",null,null],[17,"SETCEXT_SETEXT","","",null,null],[17,"SETCEXT_SETQUALF","","",null,null],[17,"SETCEXT_PGWYCAPABILITIES","","",null,null],[17,"SETCEXT_TOKENIDENTIFIER","","",null,null],[17,"SETCEXT_TRACK2DATA","","",null,null],[17,"SETCEXT_TOKENTYPE","","",null,null],[17,"SETCEXT_ISSUERCAPABILITIES","","",null,null],[17,"SETATTR_CERT","","",null,null],[17,"SETATTR_PGWYCAP","","",null,null],[17,"SETATTR_TOKENTYPE","","",null,null],[17,"SETATTR_ISSCAP","","",null,null],[17,"SET_ROOTKEYTHUMB","","",null,null],[17,"SET_ADDPOLICY","","",null,null],[17,"SETATTR_TOKEN_EMV","","",null,null],[17,"SETATTR_TOKEN_B0PRIME","","",null,null],[17,"SETATTR_ISSCAP_CVM","","",null,null],[17,"SETATTR_ISSCAP_T2","","",null,null],[17,"SETATTR_ISSCAP_SIG","","",null,null],[17,"SETATTR_GENCRYPTGRM","","",null,null],[17,"SETATTR_T2ENC","","",null,null],[17,"SETATTR_T2CLEARTXT","","",null,null],[17,"SETATTR_TOKICCSIG","","",null,null],[17,"SETATTR_SECDEVSIG","","",null,null],[17,"SET_BRAND_IATA_ATA","","",null,null],[17,"SET_BRAND_DINERS","","",null,null],[17,"SET_BRAND_AMERICANEXPRESS","","",null,null],[17,"SET_BRAND_JCB","","",null,null],[17,"SET_BRAND_VISA","","",null,null],[17,"SET_BRAND_MASTERCARD","","",null,null],[17,"SET_BRAND_NOVUS","","",null,null],[17,"DES_CDMF","","",null,null],[17,"RSAOAEPENCRYPTIONSET","","",null,null],[17,"IPSEC3","","",null,null],[17,"IPSEC4","","",null,null],[17,"WHIRLPOOL","","",null,null],[17,"CRYPTOPRO","","",null,null],[17,"CRYPTOCOM","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94","","",null,null],[17,"ID_GOSTR3411_94","","",null,null],[17,"ID_HMACGOSTR3411_94","","",null,null],[17,"ID_GOSTR3410_2001","","",null,null],[17,"ID_GOSTR3410_94","","",null,null],[17,"ID_GOST28147_89","","",null,null],[17,"GOST89_CNT","","",null,null],[17,"ID_GOST28147_89_MAC","","",null,null],[17,"ID_GOSTR3411_94_PRF","","",null,null],[17,"ID_GOSTR3410_2001DH","","",null,null],[17,"ID_GOSTR3410_94DH","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_KEYMESHING","","",null,null],[17,"ID_GOST28147_89_NONE_KEYMESHING","","",null,null],[17,"ID_GOSTR3411_94_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3411_94_CRYPTOPROPARAMSET","","",null,null],[17,"ID_GOST28147_89_TESTPARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_D_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_1_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_0_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_RIC_1_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_D_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHA_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHB_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHC_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHA_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHB_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_A","","",null,null],[17,"ID_GOSTR3410_94_ABIS","","",null,null],[17,"ID_GOSTR3410_94_B","","",null,null],[17,"ID_GOSTR3410_94_BBIS","","",null,null],[17,"ID_GOST28147_89_CC","","",null,null],[17,"ID_GOSTR3410_94_CC","","",null,null],[17,"ID_GOSTR3410_2001_CC","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94_CC","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001_CC","","",null,null],[17,"ID_GOSTR3410_2001_PARAMSET_CC","","",null,null],[17,"CAMELLIA_128_CBC","","",null,null],[17,"CAMELLIA_192_CBC","","",null,null],[17,"CAMELLIA_256_CBC","","",null,null],[17,"ID_CAMELLIA128_WRAP","","",null,null],[17,"ID_CAMELLIA192_WRAP","","",null,null],[17,"ID_CAMELLIA256_WRAP","","",null,null],[17,"CAMELLIA_128_ECB","","",null,null],[17,"CAMELLIA_128_OFB128","","",null,null],[17,"CAMELLIA_128_CFB128","","",null,null],[17,"CAMELLIA_192_ECB","","",null,null],[17,"CAMELLIA_192_OFB128","","",null,null],[17,"CAMELLIA_192_CFB128","","",null,null],[17,"CAMELLIA_256_ECB","","",null,null],[17,"CAMELLIA_256_OFB128","","",null,null],[17,"CAMELLIA_256_CFB128","","",null,null],[17,"CAMELLIA_128_CFB1","","",null,null],[17,"CAMELLIA_192_CFB1","","",null,null],[17,"CAMELLIA_256_CFB1","","",null,null],[17,"CAMELLIA_128_CFB8","","",null,null],[17,"CAMELLIA_192_CFB8","","",null,null],[17,"CAMELLIA_256_CFB8","","",null,null],[17,"KISA","","",null,null],[17,"SEED_ECB","","",null,null],[17,"SEED_CBC","","",null,null],[17,"SEED_CFB128","","",null,null],[17,"SEED_OFB128","","",null,null],[17,"HMAC","","",null,null],[17,"CMAC","","",null,null],[17,"RC4_HMAC_MD5","","",null,null],[17,"AES_128_CBC_HMAC_SHA1","","",null,null],[17,"AES_192_CBC_HMAC_SHA1","","",null,null],[17,"AES_256_CBC_HMAC_SHA1","","",null,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"nid"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"from_raw","","Create a `Nid` from an integer representation.",41,{"inputs":[{"name":"c_int"}],"output":{"name":"nid"}}],[11,"as_raw","","Return the integer representation of a `Nid`.",41,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"ocsp","openssl","",null,null],[3,"Flag","openssl::ocsp","",null,null],[3,"OcspResponseStatus","","",null,null],[3,"OcspCertStatus","","",null,null],[3,"OcspRevokedStatus","","",null,null],[3,"Status","","",null,null],[12,"status","","The overall status of the response.",42,null],[12,"reason","","If `status` is `CERT_STATUS_REVOKED`, the reason for the revocation.",42,null],[12,"revocation_time","","If `status` is `CERT_STATUS_REVOKED`, the time at which the certificate was revoked.",42,null],[12,"this_update","","The time that this revocation check was performed.",42,null],[12,"next_update","","The time at which this revocation check expires.",42,null],[3,"OcspBasicResponse","","",null,null],[3,"OcspBasicResponseRef","","",null,null],[3,"OcspCertId","","",null,null],[3,"OcspCertIdRef","","",null,null],[3,"OcspResponse","","",null,null],[3,"OcspResponseRef","","",null,null],[3,"OcspRequest","","",null,null],[3,"OcspRequestRef","","",null,null],[3,"OcspOneReq","","",null,null],[3,"OcspOneReqRef","","",null,null],[17,"FLAG_NO_CERTS","","",null,null],[17,"FLAG_NO_INTERN","","",null,null],[17,"FLAG_NO_CHAIN","","",null,null],[17,"FLAG_NO_VERIFY","","",null,null],[17,"FLAG_NO_EXPLICIT","","",null,null],[17,"FLAG_NO_CA_SIGN","","",null,null],[17,"FLAG_NO_DELEGATED","","",null,null],[17,"FLAG_NO_CHECKS","","",null,null],[17,"FLAG_TRUST_OTHER","","",null,null],[17,"FLAG_RESPID_KEY","","",null,null],[17,"FLAG_NO_TIME","","",null,null],[17,"RESPONSE_STATUS_SUCCESSFUL","","",null,null],[17,"RESPONSE_STATUS_MALFORMED_REQUEST","","",null,null],[17,"RESPONSE_STATUS_INTERNAL_ERROR","","",null,null],[17,"RESPONSE_STATUS_TRY_LATER","","",null,null],[17,"RESPONSE_STATUS_SIG_REQUIRED","","",null,null],[17,"RESPONSE_STATUS_UNAUTHORIZED","","",null,null],[17,"CERT_STATUS_GOOD","","",null,null],[17,"CERT_STATUS_REVOKED","","",null,null],[17,"CERT_STATUS_UNKNOWN","","",null,null],[17,"REVOKED_STATUS_NO_STATUS","","",null,null],[17,"REVOKED_STATUS_UNSPECIFIED","","",null,null],[17,"REVOKED_STATUS_KEY_COMPROMISE","","",null,null],[17,"REVOKED_STATUS_CA_COMPROMISE","","",null,null],[17,"REVOKED_STATUS_AFFILIATION_CHANGED","","",null,null],[17,"REVOKED_STATUS_SUPERSEDED","","",null,null],[17,"REVOKED_STATUS_CESSATION_OF_OPERATION","","",null,null],[17,"REVOKED_STATUS_CERTIFICATE_HOLD","","",null,null],[17,"REVOKED_STATUS_REMOVE_FROM_CRL","","",null,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",43,{"inputs":[],"output":{"name":"flag"}}],[11,"all","","Returns the set containing all flags.",43,{"inputs":[],"output":{"name":"flag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",43,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["flag"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",43,{"inputs":[{"name":"c_ulong"}],"output":{"name":"flag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",43,{"inputs":[{"name":"self"},{"name":"flag"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitor_assign","","Adds the set of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitxor_assign","","Toggles the set of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",43,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",43,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"extend","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"flag"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponsestatus"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"ocspresponsestatus"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"ocspresponsestatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",44,{"inputs":[{"name":"c_int"}],"output":{"name":"ocspresponsestatus"}}],[11,"as_raw","","",44,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertstatus"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"ocspcertstatus"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"ocspcertstatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",45,{"inputs":[{"name":"c_int"}],"output":{"name":"ocspcertstatus"}}],[11,"as_raw","","",45,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ocsprevokedstatus"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"ocsprevokedstatus"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"ocsprevokedstatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",46,{"inputs":[{"name":"c_int"}],"output":{"name":"ocsprevokedstatus"}}],[11,"as_raw","","",46,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"check_validity","","Checks validity of the `this_update` and `next_update` fields.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"generics":["u32"],"name":"option"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"from_ptr","","",47,null],[11,"as_ptr","","",47,null],[11,"drop","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"borrow","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"verify","","Verifies the validity of the response.",48,{"inputs":[{"name":"self"},{"name":"stackref"},{"name":"x509storeref"},{"name":"flag"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"find_status","","Looks up the status for the specified certificate ID.",48,{"inputs":[{"name":"self"},{"name":"ocspcertidref"}],"output":{"generics":["status"],"name":"option"}}],[11,"from_ptr","","",49,null],[11,"as_ptr","","",49,null],[11,"drop","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"borrow","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"as_ref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"from_cert","","Constructs a certificate ID for certificate `subject`.",49,{"inputs":[{"name":"messagedigest"},{"name":"x509ref"},{"name":"x509ref"}],"output":{"generics":["ocspcertid","errorstack"],"name":"result"}}],[11,"from_ptr","","",50,null],[11,"as_ptr","","",50,null],[11,"drop","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"borrow","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"as_ref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"create","","Creates an OCSP response from the status and optional body.",50,{"inputs":[{"name":"ocspresponsestatus"},{"generics":["ocspbasicresponseref"],"name":"option"}],"output":{"generics":["ocspresponse","errorstack"],"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",50,null],[11,"to_der","","Serializes this value to DER.",51,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"status","","Returns the status of the response.",51,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponsestatus"}}],[11,"basic","","Returns the basic response.",51,{"inputs":[{"name":"self"}],"output":{"generics":["ocspbasicresponse","errorstack"],"name":"result"}}],[11,"from_ptr","","",52,null],[11,"as_ptr","","",52,null],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"borrow","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"new","","",52,{"inputs":[],"output":{"generics":["ocsprequest","errorstack"],"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",52,null],[11,"to_der","","Serializes this value to DER.",53,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"add_id","","",53,{"inputs":[{"name":"self"},{"name":"ocspcertid"}],"output":{"generics":["ocsponereqref","errorstack"],"name":"result"}}],[11,"from_ptr","","",54,null],[11,"as_ptr","","",54,null],[11,"drop","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[11,"borrow","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[11,"as_ref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[0,"pkcs12","openssl","PKCS #12 archives.",null,null],[3,"Pkcs12","openssl::pkcs12","",null,null],[3,"Pkcs12Ref","","",null,null],[3,"ParsedPkcs12","","",null,null],[12,"pkey","","",55,null],[12,"cert","","",55,null],[12,"chain","","",55,null],[3,"Pkcs12Builder","","",null,null],[11,"from_ptr","","",56,null],[11,"as_ptr","","",56,null],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"borrow","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"as_ref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"to_der","","Serializes this value to DER.",57,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"parse","","Extracts the contents of the `Pkcs12`.",57,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parsedpkcs12","errorstack"],"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",56,null],[11,"builder","","Creates a new builder for a protected pkcs12 certificate.",56,{"inputs":[],"output":{"name":"pkcs12builder"}}],[11,"key_algorithm","","The encryption algorithm that should be used for the key",58,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"self"}}],[11,"cert_algorithm","","The encryption algorithm that should be used for the cert",58,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"self"}}],[11,"key_iter","","Key iteration count, default is 2048 as of this writing",58,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"mac_iter","","MAC iteration count, default is the same as key_iter.",58,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"ca","","An additional set of certificates to include in the archive beyond the one provided to `build`.",58,{"inputs":[{"name":"self"},{"generics":["x509"],"name":"stack"}],"output":{"name":"self"}}],[11,"build","","Builds the PKCS #12 object",58,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"pkeyref"},{"name":"x509"}],"output":{"generics":["pkcs12","errorstack"],"name":"result"}}],[0,"pkcs5","openssl","",null,null],[3,"KeyIvPair","openssl::pkcs5","",null,null],[12,"key","","",59,null],[12,"iv","","",59,null],[5,"bytes_to_key","","Derives a key and an IV from various parameters.",null,null],[5,"pbkdf2_hmac","","Derives a key from a password and salt using the PBKDF2-HMAC algorithm with a digest function.",null,null],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"keyivpair"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"pkey","openssl","",null,null],[3,"PKey","openssl::pkey","",null,null],[3,"PKeyRef","","",null,null],[3,"PKeyCtx","","",null,null],[3,"PKeyCtxRef","","",null,null],[11,"from_ptr","","",60,null],[11,"as_ptr","","",60,null],[11,"drop","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"borrow","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"as_ref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"rsa","","Returns a copy of the internal RSA key.",61,{"inputs":[{"name":"self"}],"output":{"generics":["rsa","errorstack"],"name":"result"}}],[11,"dsa","","Returns a copy of the internal DSA key.",61,{"inputs":[{"name":"self"}],"output":{"generics":["dsa","errorstack"],"name":"result"}}],[11,"dh","","Returns a copy of the internal DH key.",61,{"inputs":[{"name":"self"}],"output":{"generics":["dh","errorstack"],"name":"result"}}],[11,"ec_key","","Returns a copy of the internal elliptic curve key.",61,{"inputs":[{"name":"self"}],"output":{"generics":["eckey","errorstack"],"name":"result"}}],[11,"public_key_to_pem","","Serializes a public key to PEM.",61,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",61,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",61,null],[11,"private_key_to_der","","Serializes the private key to DER.",61,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",61,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"bits","","Returns the size of the key.",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"public_eq","","Compares the public component of this key with another.",61,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"bool"}}],[11,"from_rsa","","Creates a new `PKey` containing an RSA key.",60,{"inputs":[{"name":"rsa"}],"output":{"generics":["pkey","errorstack"],"name":"result"}}],[11,"from_dsa","","Creates a new `PKey` containing a DSA key.",60,{"inputs":[{"name":"dsa"}],"output":{"generics":["pkey","errorstack"],"name":"result"}}],[11,"from_dh","","Creates a new `PKey` containing a Diffie-Hellman key.",60,{"inputs":[{"name":"dh"}],"output":{"generics":["pkey","errorstack"],"name":"result"}}],[11,"from_ec_key","","Creates a new `PKey` containing an elliptic curve key.",60,{"inputs":[{"name":"eckey"}],"output":{"generics":["pkey","errorstack"],"name":"result"}}],[11,"hmac","","Creates a new `PKey` containing an HMAC key.",60,null],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",60,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",60,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",60,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",60,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",60,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",60,null],[11,"private_key_from_pkcs8_callback","","Deserializes a DER-formatted PKCS#8 private key, using a callback to retrieve the password if the key is encrpyted.",60,null],[11,"private_key_from_pkcs8_passphrase","","Deserializes a DER-formatted PKCS#8 private key, using the supplied password if the key is encrypted.",60,null],[11,"private_key_from_pem_cb","","",60,null],[11,"from_ptr","","",62,null],[11,"as_ptr","","",62,null],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"borrow","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"as_ref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"from_pkey","","",62,{"inputs":[{"name":"pkeyref"}],"output":{"generics":["pkeyctx","errorstack"],"name":"result"}}],[11,"set_rsa_padding","","",63,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"rsa_padding","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["padding","errorstack"],"name":"result"}}],[11,"derive_init","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"derive_set_peer","","",63,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"derive","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[0,"rand","openssl","Utilities for secure random number generation.",null,null],[5,"rand_bytes","openssl::rand","Fill buffer with cryptographically strong pseudo-random bytes.",null,null],[0,"rsa","openssl","",null,null],[3,"Padding","openssl::rsa","Type of encryption padding to use.",null,null],[3,"Rsa","","",null,null],[3,"RsaRef","","",null,null],[17,"NO_PADDING","","",null,null],[17,"PKCS1_PADDING","","",null,null],[17,"PKCS1_OAEP_PADDING","","",null,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"from_raw","","",64,{"inputs":[{"name":"c_int"}],"output":{"name":"padding"}}],[11,"as_raw","","",64,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_ptr","","",65,null],[11,"as_ptr","","",65,null],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"deref_mut","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"borrow","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"as_ref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",66,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",66,null],[11,"public_key_to_pem","","Serializes a public key to PEM.",66,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"private_key_to_der","","Serializes the private key to DER.",66,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",66,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"public_key_to_der_pkcs1","","Serializes the public key to DER-encoded PKCS#1.",66,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"private_decrypt","","Decrypts data using the private key, returning the number of decrypted bytes.",66,null],[11,"private_encrypt","","Encrypts data using the private key, returning the number of encrypted bytes.",66,null],[11,"public_decrypt","","Decrypts data using the public key, returning the number of decrypted bytes.",66,null],[11,"public_encrypt","","Encrypts data using the public key, returning the number of encrypted bytes.",66,null],[11,"n","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"d","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"e","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"p","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"q","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"dp","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"dq","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"qi","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["bignumref"],"name":"option"}}],[11,"from_public_components","","only useful for associating the key material directly with the key, it's safer to use the supplied load and save methods for DER formatted keys.",65,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"generics":["rsa","errorstack"],"name":"result"}}],[11,"from_private_components","","",65,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"generics":["rsa","errorstack"],"name":"result"}}],[11,"generate","","Generates a public/private key pair with the specified size.",65,{"inputs":[{"name":"u32"}],"output":{"generics":["rsa","errorstack"],"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",65,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",65,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",65,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",65,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",65,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",65,null],[11,"public_key_from_der_pkcs1","","Deserializes a public key from DER-encoded PKCS#1 data.",65,null],[11,"private_key_from_pem_cb","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sign","openssl","Message signatures.",null,null],[3,"Signer","openssl::sign","A type which computes cryptographic signatures of data.",null,null],[3,"Verifier","","",null,null],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `Signer`.",67,{"inputs":[{"name":"messagedigest"},{"name":"pkeyref"}],"output":{"generics":["signer","errorstack"],"name":"result"}}],[11,"pkey_ctx","","Returns a shared reference to the `PKeyCtx` associated with the `Signer`.",67,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"pkey_ctx_mut","","Returns a mutable reference to the `PKeyCtx` associated with the `Signer`.",67,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"update","","Feeds more data into the `Signer`.",67,null],[11,"len","","Computes an upper bound on the signature length.",67,{"inputs":[{"name":"self"}],"output":{"generics":["usize","errorstack"],"name":"result"}}],[11,"sign","","Writes the signature into the provided buffer, returning the number of bytes written.",67,null],[11,"sign_to_vec","","Returns the signature.",67,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"finish","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"write","","",67,null],[11,"flush","","",67,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `Verifier`.",68,{"inputs":[{"name":"messagedigest"},{"name":"pkeyref"}],"output":{"generics":["verifier","errorstack"],"name":"result"}}],[11,"pkey_ctx","","Returns a shared reference to the `PKeyCtx` associated with the `Verifier`.",68,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"pkey_ctx_mut","","Returns a mutable reference to the `PKeyCtx` associated with the `Verifier`.",68,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"update","","Feeds more data into the `Verifier`.",68,null],[11,"verify","","Determines if the data fed into the `Verifier` matches the provided signature.",68,null],[11,"finish","","",68,null],[11,"write","","",68,null],[11,"flush","","",68,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"sha","openssl","The SHA family of hashes.",null,null],[3,"Sha1","openssl::sha","An object which calculates a SHA1 hash of some data.",null,null],[3,"Sha224","","An object which calculates a SHA224 hash of some data.",null,null],[3,"Sha256","","An object which calculates a SHA256 hash of some data.",null,null],[3,"Sha384","","An object which calculates a SHA384 hash of some data.",null,null],[3,"Sha512","","An object which calculates a SHA512 hash of some data.",null,null],[5,"sha1","","Computes the SHA1 hash of some data.",null,null],[5,"sha224","","Computes the SHA224 hash of some data.",null,null],[5,"sha256","","Computes the SHA256 hash of some data.",null,null],[5,"sha384","","Computes the SHA384 hash of some data.",null,null],[5,"sha512","","Computes the SHA512 hash of some data.",null,null],[11,"new","","Creates a new hasher.",69,{"inputs":[],"output":{"name":"sha1"}}],[11,"update","","Feeds some data into the hasher.",69,null],[11,"finish","","Returns the hash of the data.",69,null],[11,"new","","Creates a new hasher.",70,{"inputs":[],"output":{"name":"sha224"}}],[11,"update","","Feeds some data into the hasher.",70,null],[11,"finish","","Returns the hash of the data.",70,null],[11,"new","","Creates a new hasher.",71,{"inputs":[],"output":{"name":"sha256"}}],[11,"update","","Feeds some data into the hasher.",71,null],[11,"finish","","Returns the hash of the data.",71,null],[11,"new","","Creates a new hasher.",72,{"inputs":[],"output":{"name":"sha384"}}],[11,"update","","Feeds some data into the hasher.",72,null],[11,"finish","","Returns the hash of the data.",72,null],[11,"new","","Creates a new hasher.",73,{"inputs":[],"output":{"name":"sha512"}}],[11,"update","","Feeds some data into the hasher.",73,null],[11,"finish","","Returns the hash of the data.",73,null],[0,"ssl","openssl","SSL/TLS support.",null,null],[3,"ConnectConfiguration","openssl::ssl","A type which allows for configuration of a client-side TLS session before connection.",null,null],[3,"SslAcceptor","","A type which wraps server-side streams in a TLS session.",null,null],[3,"SslAcceptorBuilder","","A builder for `SslAcceptor`s.",null,null],[3,"SslConnector","","A type which wraps client-side streams in a TLS session.",null,null],[3,"SslConnectorBuilder","","A builder for `SslConnector`s.",null,null],[3,"RetryError","","An error indicating that the operation can be immediately retried.",null,null],[3,"SslOption","","Options controlling the behavior of an `SslContext`.",null,null],[3,"SslMode","","Options controlling the behavior of an `SslContext`.",null,null],[3,"SslMethod","","A type specifying the kind of protocol an `SslContext` will speak.",null,null],[3,"SslVerifyMode","","Options controling the behavior of certificate verification.",null,null],[3,"StatusType","","An identifier of a certificate status type.",null,null],[3,"SslContextBuilder","","A builder for `SslContext`s.",null,null],[3,"SslContext","","A context object for TLS streams.",null,null],[3,"SslContextRef","","Reference to [`SslContext`]",null,null],[3,"CipherBits","","Information about the state of a cipher.",null,null],[12,"secret","","The number of secret bits used for the cipher.",74,null],[12,"algorithm","","The number of bits processed by the chosen algorithm.",74,null],[3,"SslCipher","","Information about a cipher.",null,null],[3,"SslCipherRef","","Reference to an [`SslCipher`].",null,null],[3,"SslSession","","An encoded SSL session.",null,null],[3,"SslSessionRef","","Reference to [`SslSession]`.",null,null],[3,"Ssl","","The state of an SSL/TLS session.",null,null],[3,"SslRef","","Reference to an [`Ssl`].",null,null],[3,"MidHandshakeSslStream","","An SSL stream midway through the handshake process.",null,null],[3,"SslStream","","A TLS session over a stream.",null,null],[4,"Error","","An SSL error.",null,null],[13,"ZeroReturn","","The SSL session has been closed by the other end",75,null],[13,"WantRead","","An attempt to read data from the underlying socket returned `WouldBlock`. Wait for read readiness and reattempt the operation.",75,null],[13,"WantWrite","","An attempt to write data from the underlying socket returned `WouldBlock`. Wait for write readiness and reattempt the operation.",75,null],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",75,null],[13,"Stream","","An error reported by the underlying stream.",75,null],[13,"Ssl","","An error in the OpenSSL library.",75,null],[4,"HandshakeError","","An error or intermediate state after a TLS handshake attempt.",null,null],[13,"SetupFailure","","Setup failed.",76,null],[13,"Failure","","The handshake failed.",76,null],[13,"Interrupted","","The handshake was interrupted midway through.",76,null],[4,"SniError","","An error returned from an SNI callback.",null,null],[13,"Fatal","","",77,null],[13,"Warning","","",77,null],[13,"NoAck","","",77,null],[4,"ShutdownResult","","The result of a shutdown request.",null,null],[13,"Sent","","A close notify message has been sent to the peer.",78,null],[13,"Received","","A close notify response message has been received from the peer.",78,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",75,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",75,{"inputs":[{"name":"errorstack"}],"output":{"name":"error"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",76,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",76,{"inputs":[{"name":"errorstack"}],"output":{"name":"handshakeerror"}}],[11,"new","","Creates a new builder for TLS connections.",80,{"inputs":[{"name":"sslmethod"}],"output":{"generics":["sslconnectorbuilder","errorstack"],"name":"result"}}],[11,"builder","","",80,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"builder_mut","","",80,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"build","","Consumes the builder, returning an `SslConnector`.",80,{"inputs":[{"name":"self"}],"output":{"name":"sslconnector"}}],[11,"deref","","",80,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"deref_mut","","",80,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"sslconnector"}}],[11,"connect","","Initiates a client-side TLS session on a stream.",81,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Initiates a client-side TLS session on a stream without performing hostname verification.",81,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"configure","","Returns a structure allowing for configuration of a single TLS session before connection.",81,{"inputs":[{"name":"self"}],"output":{"generics":["connectconfiguration","errorstack"],"name":"result"}}],[11,"ssl","","",82,{"inputs":[{"name":"self"}],"output":{"name":"ssl"}}],[11,"ssl_mut","","",82,{"inputs":[{"name":"self"}],"output":{"name":"ssl"}}],[11,"connect","","Initiates a client-side TLS session on a stream.",82,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Initiates a client-side TLS session on a stream without performing hostname verification.",82,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"deref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"deref_mut","","",82,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"mozilla_intermediate","","Creates a new builder configured to connect to non-legacy clients. This should generally be considered a reasonable default choice.",83,{"inputs":[{"name":"sslmethod"},{"name":"pkeyref"},{"name":"x509ref"},{"name":"i"}],"output":{"generics":["sslacceptorbuilder","errorstack"],"name":"result"}}],[11,"mozilla_modern","","Creates a new builder configured to connect to modern clients.",83,{"inputs":[{"name":"sslmethod"},{"name":"pkeyref"},{"name":"x509ref"},{"name":"i"}],"output":{"generics":["sslacceptorbuilder","errorstack"],"name":"result"}}],[11,"mozilla_intermediate_raw","","Like `mozilla_intermediate`, but does not load the certificate chain and private key.",83,{"inputs":[{"name":"sslmethod"}],"output":{"generics":["sslacceptorbuilder","errorstack"],"name":"result"}}],[11,"mozilla_modern_raw","","Like `mozilla_modern`, but does not load the certificate chain and private key.",83,{"inputs":[{"name":"sslmethod"}],"output":{"generics":["sslacceptorbuilder","errorstack"],"name":"result"}}],[11,"builder","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"builder_mut","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"build","","Consumes the builder, returning a `SslAcceptor`.",83,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptor"}}],[11,"deref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"deref_mut","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptor"}}],[11,"accept","","Initiates a server-side TLS session on a stream.",84,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","Disables a countermeasure against an SSLv3/TLSv1.0 vulnerability affecting CBC ciphers.",null,null],[17,"SSL_OP_ALL","","A \"reasonable default\" set of options which enables compatibility flags.",null,null],[17,"SSL_OP_NO_QUERY_MTU","","Do not query the MTU.",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","Enables Cookie Exchange as described in [RFC 4347 Section 4.2.1].",null,null],[17,"SSL_OP_NO_TICKET","","Disables the use of session tickets for session resumption.",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","Always start a new session when performing a renegotiation on the server side.",null,null],[17,"SSL_OP_NO_COMPRESSION","","Disables the use of TLS compression.",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","Allow legacy insecure renegotiation with servers or clients that do not support secure renegotiation.",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","Creates a new key for each session when using ECDHE.",null,null],[17,"SSL_OP_SINGLE_DH_USE","","Creates a new key for each session when using DHE.",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","Use the server's preferences rather than the client's when selecting a cipher.",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","Disables version rollback attach detection.",null,null],[17,"SSL_OP_NO_SSLV2","","Disables the use of SSLv2.",null,null],[17,"SSL_OP_NO_SSLV3","","Disables the use of SSLv3.",null,null],[17,"SSL_OP_NO_TLSV1","","Disables the use of TLSv1.0.",null,null],[17,"SSL_OP_NO_TLSV1_1","","Disables the use of TLSv1.1.",null,null],[17,"SSL_OP_NO_TLSV1_2","","Disables the use of TLSv1.2.",null,null],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","Enables \"short writes\".",null,null],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","Disables a check that the data buffer has not moved between calls when operating in a nonblocking context.",null,null],[17,"SSL_MODE_AUTO_RETRY","","Enables automatic retries after TLS session events such as renegotiations or heartbeats.",null,null],[17,"SSL_MODE_NO_AUTO_CHAIN","","Disables automatic chain building when verifying a peer's certificate.",null,null],[17,"SSL_MODE_RELEASE_BUFFERS","","Release memory buffers when the session does not need them.",null,null],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","Sends the fake `TLS_FALLBACK_SCSV` cipher suite in the ClientHello message of a handshake.",null,null],[17,"SSL_VERIFY_PEER","","Verifies that the peer's certificate is trusted.",null,null],[17,"SSL_VERIFY_NONE","","Disables verification of the peer's certificate.",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","On the server side, abort the handshake if the client did not send a certificate.",null,null],[17,"STATUS_TYPE_OCSP","","An OSCP status.",null,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"ssloption"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"ssloption"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_ulong"}],"output":{"generics":["ssloption"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",85,{"inputs":[{"name":"c_ulong"}],"output":{"name":"ssloption"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",85,{"inputs":[{"name":"self"},{"name":"ssloption"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitor_assign","","Adds the set of flags.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitxor_assign","","Toggles the set of flags.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"sub_assign","","Disables all flags enabled in the set.",85,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",85,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"extend","","",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"ssloption"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"sslmode"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"ordering"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"sslmode"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"sslmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_long"}],"output":{"generics":["sslmode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",86,{"inputs":[{"name":"c_long"}],"output":{"name":"sslmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",86,{"inputs":[{"name":"self"},{"name":"sslmode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitor_assign","","Adds the set of flags.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitxor_assign","","Toggles the set of flags.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",86,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",86,{"inputs":[{"name":"self"}],"output":{"name":"sslmode"}}],[11,"extend","","",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"sslmode"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"sslmethod"}}],[11,"tls","","Support all versions of the TLS protocol.",87,{"inputs":[],"output":{"name":"sslmethod"}}],[11,"dtls","","Support all versions of the DTLS protocol.",87,{"inputs":[],"output":{"name":"sslmethod"}}],[11,"from_ptr","","Constructs an `SslMethod` from a pointer to the underlying OpenSSL value.",87,null],[11,"as_ptr","","Returns a pointer to the underlying OpenSSL value.",87,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"sslverifymode"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"i32"}],"output":{"generics":["sslverifymode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",88,{"inputs":[{"name":"i32"}],"output":{"name":"sslverifymode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitor_assign","","Adds the set of flags.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitxor_assign","","Toggles the set of flags.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",88,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",88,{"inputs":[{"name":"self"}],"output":{"name":"sslverifymode"}}],[11,"extend","","",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"sslverifymode"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"statustype"}}],[11,"from_raw","","Constructs a `StatusType` from a raw OpenSSL value.",89,{"inputs":[{"name":"c_int"}],"output":{"name":"statustype"}}],[11,"as_raw","","Returns the raw OpenSSL value represented by this type.",89,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"drop","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `SslContextBuilder`.",90,{"inputs":[{"name":"sslmethod"}],"output":{"generics":["sslcontextbuilder","errorstack"],"name":"result"}}],[11,"from_ptr","","Creates an `SslContextBuilder` from a pointer to a raw OpenSSL value.",90,null],[11,"as_ptr","","Returns a pointer to the raw OpenSSL value.",90,null],[11,"set_verify","","Configures the certificate verification method for new connections.",90,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set_verify_callback","","Configures the certificate verification method for new connections and registers a verification callback.",90,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"f"}],"output":null}],[11,"set_servername_callback","","Configures the server name indication (SNI) callback for new connections.",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_verify_depth","","Sets the certificate verification depth.",90,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_read_ahead","","Controls read ahead behavior.",90,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_mode","","Sets the mode used by the context, returning the previous mode.",90,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"set_tmp_dh","","Sets the parameters to be used during ephemeral Diffie-Hellman key exchange.",90,{"inputs":[{"name":"self"},{"name":"dhref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_tmp_dh_callback","","Sets the callback which will generate parameters to be used during ephemeral Diffie-Hellman key exchange.",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_tmp_ecdh","","Sets the parameters to be used during ephemeral elliptic curve Diffie-Hellman key exchange.",90,{"inputs":[{"name":"self"},{"name":"eckeyref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_default_verify_paths","","Use the default locations of trusted certificates for verification.",90,{"inputs":[{"name":"self"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_ca_file","","Loads trusted root certificates from a file.",90,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_client_ca_list","","Sets the list of CA names sent to the client.",90,{"inputs":[{"name":"self"},{"generics":["x509name"],"name":"stack"}],"output":null}],[11,"set_session_id_context","","Set the context identifier for sessions.",90,null],[11,"set_certificate_file","","Loads a leaf certificate from a file.",90,{"inputs":[{"name":"self"},{"name":"p"},{"name":"x509filetype"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_certificate_chain_file","","Loads a certificate chain from a file.",90,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_certificate","","Sets the leaf certificate.",90,{"inputs":[{"name":"self"},{"name":"x509ref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"add_extra_chain_cert","","Appends a certificate to the certificate chain.",90,{"inputs":[{"name":"self"},{"name":"x509"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_private_key_file","","Loads the private key from a file.",90,{"inputs":[{"name":"self"},{"name":"p"},{"name":"x509filetype"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_private_key","","Sets the private key.",90,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_cipher_list","","Sets the list of supported ciphers.",90,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_options","","Sets the options used by the context, returning the old set.",90,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"options","","Returns the options used by the context.",90,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"clear_options","","Clears the options used by the context, returning the old set.",90,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"set_npn_protocols","","Set the protocols to be used during Next Protocol Negotiation (the protocols supported by the application).",90,null],[11,"check_private_key","","Checks for consistency between the private key and certificate.",90,{"inputs":[{"name":"self"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"cert_store","","Returns a shared reference to the context's certificate store.",90,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"cert_store_mut","","Returns a mutable reference to the context's certificate store.",90,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"set_status_callback","","Sets the callback dealing with OCSP stapling.",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_psk_callback","","Sets the callback for providing an identity and pre-shared key for a TLS-PSK client.",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_ex_data","","Sets the extra data at the specified index.",90,{"inputs":[{"name":"self"},{"generics":["sslcontext"],"name":"index"},{"name":"t"}],"output":null}],[11,"build","","Consumes the builder, returning a new `SslContext`.",90,{"inputs":[{"name":"self"}],"output":{"name":"sslcontext"}}],[11,"from_ptr","","",91,null],[11,"as_ptr","","",91,null],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"deref_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"borrow","","",91,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"as_ref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","Creates a new builder object for an `SslContext`.",91,{"inputs":[{"name":"sslmethod"}],"output":{"generics":["sslcontextbuilder","errorstack"],"name":"result"}}],[11,"new_ex_index","","Returns a new extra data index.",91,{"inputs":[],"output":{"generics":["index","errorstack"],"name":"result"}}],[11,"cert_store","","Returns a shared reference to the certificate store used for verification.",92,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"extra_chain_certs","","Returns a shared reference to the stack of certificates making up the chain from the leaf.",92,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"ex_data","","Returns a reference to the extra data at the specified index.",92,{"inputs":[{"name":"self"},{"generics":["sslcontext"],"name":"index"}],"output":{"name":"option"}}],[11,"from_ptr","","",93,null],[11,"as_ptr","","",93,null],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"sslcipherref"}}],[11,"deref_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"sslcipherref"}}],[11,"name","","Returns the name of the cipher.",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"version","","Returns the SSL/TLS protocol version that first defined the cipher.",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bits","","Returns the number of bits used for the cipher.",94,{"inputs":[{"name":"self"}],"output":{"name":"cipherbits"}}],[11,"description","","Returns a textual description of the cipher.",94,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_ptr","","",95,null],[11,"as_ptr","","",95,null],[11,"drop","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"deref_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"borrow","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"as_ref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"sslsession"}}],[11,"to_owned","","",96,{"inputs":[{"name":"self"}],"output":{"name":"sslsession"}}],[11,"id","","Returns the SSL session ID.",96,null],[11,"master_key_len","","Returns the length of the master key.",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"master_key","","Copies the master key into the provided buffer.",96,null],[11,"from_ptr","","",97,null],[11,"as_ptr","","",97,null],[11,"drop","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"deref_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"borrow","","",97,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"new_ex_index","","Returns a new extra data index.",97,{"inputs":[],"output":{"generics":["index","errorstack"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_verify","","Like [`SslContextBuilder::set_verify`].",98,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set_verify_callback","","Like [`SslContextBuilder::set_verify_callback`].",98,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"f"}],"output":null}],[11,"set_tmp_dh","","Like [`SslContextBuilder::set_tmp_dh`].",98,{"inputs":[{"name":"self"},{"name":"dhref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_tmp_dh_callback","","Like [`SslContextBuilder::set_tmp_dh_callback`].",98,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_tmp_ecdh","","Like [`SslContextBuilder::set_tmp_ecdh`].",98,{"inputs":[{"name":"self"},{"name":"eckeyref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"current_cipher","","Returns the current cipher if the session is active.",98,{"inputs":[{"name":"self"}],"output":{"generics":["sslcipherref"],"name":"option"}}],[11,"state_string","","Returns a short string describing the state of the session.",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"state_string_long","","Returns a longer string describing the state of the session.",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_hostname","","Sets the host name to be sent to the server for Server Name Indication (SNI).",98,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"peer_certificate","","Returns the peer's certificate, if present.",98,{"inputs":[{"name":"self"}],"output":{"generics":["x509"],"name":"option"}}],[11,"peer_cert_chain","","Returns the certificate chain of the peer, if present.",98,{"inputs":[{"name":"self"}],"output":{"generics":["stackref"],"name":"option"}}],[11,"certificate","","Like [`SslContext::certificate`].",98,{"inputs":[{"name":"self"}],"output":{"generics":["x509ref"],"name":"option"}}],[11,"private_key","","Like [`SslContext::private_key`].",98,{"inputs":[{"name":"self"}],"output":{"generics":["pkeyref"],"name":"option"}}],[11,"version","","Returns a string describing the protocol version of the session.",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"selected_npn_protocol","","Returns the protocol selected by performing Next Protocol Negotiation, if any.",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pending","","Returns the number of bytes remaining in the currently processed TLS record.",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compression","","Returns the compression method currently in use.",98,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"servername","","Returns the servername sent by the client via Server Name Indication (SNI).",98,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_ssl_context","","Changes the context corresponding to the current connection.",98,{"inputs":[{"name":"self"},{"name":"sslcontextref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"ssl_context","","Returns the context corresponding to the current connection.",98,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"verify_result","","Returns the certificate verification result.",98,{"inputs":[{"name":"self"}],"output":{"generics":["x509verifyerror"],"name":"option"}}],[11,"session","","Returns a shared reference to the SSL session.",98,{"inputs":[{"name":"self"}],"output":{"generics":["sslsessionref"],"name":"option"}}],[11,"set_session","","Sets the session to be used.",98,{"inputs":[{"name":"self"},{"name":"sslsessionref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"session_reused","","Determines if the session provided to `set_session` was successfully reused.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_status_type","","Sets the status response a client wishes the server to reply with.",98,{"inputs":[{"name":"self"},{"name":"statustype"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"ocsp_status","","Returns the server's OCSP response, if present.",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_ocsp_status","","Sets the OCSP response to be returned to the client.",98,null],[11,"is_server","","Determines if this `Ssl` is configured for server-side or client-side use.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ex_data","","Sets the extra data at the specified index.",98,{"inputs":[{"name":"self"},{"generics":["ssl"],"name":"index"},{"name":"t"}],"output":null}],[11,"ex_data","","Returns a reference to the extra data at the specified index.",98,{"inputs":[{"name":"self"},{"generics":["ssl"],"name":"index"}],"output":{"name":"option"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ssl`.",97,{"inputs":[{"name":"sslcontext"}],"output":{"generics":["ssl","errorstack"],"name":"result"}}],[11,"connect","","Initiates a client-side TLS handshake.",97,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"accept","","Initiates a server-side TLS handshake.",97,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"ssl","","Returns a shared reference to the `Ssl` of the stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"error","","Returns the underlying error which interrupted this handshake.",99,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_error","","Consumes `self`, returning its error.",99,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"handshake","","Restarts the handshake process.",99,{"inputs":[{"name":"self"}],"output":{"generics":["sslstream","handshakeerror"],"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ssl_read","","Like `read`, but returns an `ssl::Error` rather than an `io::Error`.",100,null],[11,"ssl_write","","Like `write`, but returns an `ssl::Error` rather than an `io::Error`.",100,null],[11,"shutdown","","Shuts down the session.",100,{"inputs":[{"name":"self"}],"output":{"generics":["shutdownresult","error"],"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying stream.",100,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",100,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"ssl","","Returns a shared reference to the `Ssl` object associated with this stream.",100,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"read","","",100,null],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"shutdownresult"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"shutdownresult"}],"output":{"name":"bool"}}],[0,"stack","openssl","",null,null],[3,"Stack","openssl::stack","An owned stack of `T`.",null,null],[3,"IntoIter","","",null,null],[3,"StackRef","","",null,null],[3,"Iter","","An iterator over the stack's contents.",null,null],[3,"IterMut","","A mutable iterator over the stack's contents.",null,null],[8,"Stackable","","Trait implemented by types which can be placed in a stack.",null,null],[16,"StackType","","The C stack type for this element.",101,null],[11,"new","","",102,{"inputs":[],"output":{"generics":["stack","errorstack"],"name":"result"}}],[11,"drop","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",102,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"as_ref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"borrow","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"from_ptr","","",102,null],[11,"as_ptr","","",102,null],[11,"deref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"deref_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"drop","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"len","","Returns the number of items in the stack",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","",104,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",104,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get","","Returns a reference to the element at the given index in the stack or `None` if the index is out of bounds",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the element at the given index in the stack or `None` if the index is out of bounds",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"push","","Pushes a value onto the top of the stack.",104,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"pop","","Removes the last element from the stack and returns it.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",104,null],[11,"index_mut","","",104,null],[11,"next","","",105,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[0,"string","openssl","",null,null],[3,"OpensslString","openssl::string","",null,null],[3,"OpensslStringRef","","",null,null],[11,"from_ptr","","",107,null],[11,"as_ptr","","",107,null],[11,"drop","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"deref_mut","","",107,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"borrow","","",107,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"as_ref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"from_raw_parts","","",107,null],[11,"from_null_terminated","","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"symm","openssl","High level interface to certain symmetric ciphers.",null,null],[3,"Cipher","openssl::symm","Represents a particular cipher algorithm.",null,null],[3,"Crypter","","Represents a symmetric cipher context.",null,null],[4,"Mode","","",null,null],[13,"Encrypt","","",109,null],[13,"Decrypt","","",109,null],[5,"encrypt","","Encrypts data in one go, and returns the encrypted data.",null,null],[5,"decrypt","","Decrypts data in one go, and returns the decrypted data.",null,null],[5,"encrypt_aead","","Like `encrypt`, but for AEAD ciphers such as AES GCM.",null,null],[5,"decrypt_aead","","Like `decrypt`, but for AEAD ciphers such as AES GCM.",null,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"cipher"}}],[11,"aes_128_ecb","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cbc","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_xts","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_ctr","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb1","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb128","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb8","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_gcm","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_ecb","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cbc","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_xts","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_ctr","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb1","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb128","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb8","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_gcm","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_cbc","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_ecb","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_cfb64","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_ofb","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"des_cbc","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"des_ecb","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"rc4","","",110,{"inputs":[],"output":{"name":"cipher"}}],[11,"from_ptr","","",110,null],[11,"as_ptr","","",110,null],[11,"key_len","","Returns the length of keys used with this cipher.",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iv_len","","Returns the length of the IV used with this cipher, or `None` if the cipher does not use an IV.",110,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"block_size","","Returns the block size of the cipher.",110,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `Crypter`.  The initialisation vector, `iv`, is not necesarry for certain types of `Cipher`.",111,null],[11,"pad","","Enables or disables padding.",111,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_tag","","Sets the tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",111,null],[11,"aad_update","","Feeds Additional Authenticated Data (AAD) through the cipher.",111,null],[11,"update","","Feeds data from `input` through the cipher, writing encrypted/decrypted bytes into `output`.",111,null],[11,"finalize","","Finishes the encryption/decryption process, writing any remaining data to `output`.",111,null],[11,"get_tag","","Retrieves the authentication tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",111,null],[11,"drop","","",111,{"inputs":[{"name":"self"}],"output":null}],[0,"types","openssl","",null,null],[8,"OpenSslType","openssl::types","A type implemented by wrappers over foreign types.",null,null],[16,"CType","","The raw C type.",112,null],[16,"Ref","","The type representing a reference to this type.",112,null],[10,"from_ptr","","Constructs an instance of this type from its raw type.",112,null],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",112,null],[8,"OpenSslTypeRef","","A trait implemented by types which reference borrowed foreign types.",null,null],[16,"CType","","The raw C type.",113,null],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",113,null],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",113,null],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",113,null],[0,"version","openssl","",null,null],[5,"number","openssl::version","OPENSSL_VERSION_NUMBER is a numeric release version identifier:",null,{"inputs":[],"output":{"name":"i64"}}],[5,"version","","The text variant of the version number and the release date. For example, \"OpenSSL 0.9.5a 1 Apr 2000\".",null,{"inputs":[],"output":{"name":"str"}}],[5,"c_flags","","The compiler flags set for the compilation process in the form \"compiler: ...\" if available or \"compiler: information not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"built_on","","The date of the build process in the form \"built on: ...\" if available or \"built on: date not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"platform","","The \"Configure\" target of the library build in the form \"platform: ...\" if available or \"platform: information not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"dir","","The \"OPENSSLDIR\" setting of the library build in the form \"OPENSSLDIR: \"...\"\" if available or \"OPENSSLDIR: N/A\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[0,"x509","openssl","",null,null],[3,"X509FileType","openssl::x509","",null,null],[3,"X509StoreContext","","",null,null],[3,"X509StoreContextRef","","",null,null],[3,"X509Generator","","",null,null],[3,"X509Builder","","A builder type which can create `X509` objects.",null,null],[3,"X509","","",null,null],[3,"X509Ref","","",null,null],[3,"X509v3Context","","A context object required to construct certain X509 extension values.",null,null],[3,"X509Extension","","",null,null],[3,"X509ExtensionRef","","",null,null],[3,"X509NameBuilder","","",null,null],[3,"X509Name","","",null,null],[3,"X509NameRef","","",null,null],[3,"X509NameEntries","","",null,null],[3,"X509NameEntry","","",null,null],[3,"X509NameEntryRef","","",null,null],[3,"X509ReqBuilder","","",null,null],[3,"X509Req","","",null,null],[3,"X509ReqRef","","",null,null],[3,"X509VerifyError","","",null,null],[3,"GeneralName","","",null,null],[3,"GeneralNameRef","","",null,null],[3,"X509Algorithm","","",null,null],[3,"X509AlgorithmRef","","",null,null],[0,"extension","","",null,null],[3,"BasicConstraints","openssl::x509::extension","",null,null],[3,"KeyUsage","","",null,null],[3,"ExtendedKeyUsage","","",null,null],[3,"SubjectKeyIdentifier","","",null,null],[3,"AuthorityKeyIdentifier","","",null,null],[3,"SubjectAlternativeName","","",null,null],[4,"ExtensionType","","Type-only version of the `Extension` enum.",null,null],[13,"KeyUsage","","",114,null],[13,"ExtKeyUsage","","",114,null],[13,"SubjectAltName","","",114,null],[13,"IssuerAltName","","",114,null],[13,"OtherNid","","",114,null],[13,"OtherStr","","",114,null],[4,"Extension","","A X.509 v3 certificate extension.",null,null],[13,"KeyUsage","","The purposes of the key contained in the certificate",115,null],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",115,null],[13,"SubjectAltName","","Subject Alternative Names",115,null],[13,"IssuerAltName","","Issuer Alternative Names",115,null],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",115,null],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",115,null],[4,"KeyUsageOption","","",null,null],[13,"DigitalSignature","","",116,null],[13,"NonRepudiation","","",116,null],[13,"KeyEncipherment","","",116,null],[13,"DataEncipherment","","",116,null],[13,"KeyAgreement","","",116,null],[13,"KeyCertSign","","",116,null],[13,"CRLSign","","",116,null],[13,"EncipherOnly","","",116,null],[13,"DecipherOnly","","",116,null],[4,"ExtKeyUsageOption","","",null,null],[13,"ServerAuth","","",117,null],[13,"ClientAuth","","",117,null],[13,"CodeSigning","","",117,null],[13,"EmailProtection","","",117,null],[13,"TimeStamping","","",117,null],[13,"MsCodeInd","","",117,null],[13,"MsCodeCom","","",117,null],[13,"MsCtlSign","","",117,null],[13,"MsSgc","","",117,null],[13,"MsEfs","","",117,null],[13,"NsSgc","","",117,null],[13,"Other","","An arbitrary key usage by OID.",117,null],[4,"AltNameOption","","",null,null],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",118,null],[13,"Email","","",118,null],[13,"DNS","","",118,null],[13,"Directory","","",118,null],[13,"URI","","",118,null],[13,"IPAddress","","",118,null],[13,"RegisteredID","","",118,null],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"extensiontype"}}],[11,"hash","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"get_type","","",115,{"inputs":[{"name":"self"}],"output":{"name":"extensiontype"}}],[11,"get_nid","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["nid"],"name":"option"}}],[11,"get_name","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_string","","",115,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"keyusageoption"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"extkeyusageoption"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"altnameoption"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","",119,{"inputs":[],"output":{"name":"basicconstraints"}}],[11,"critical","","",119,{"inputs":[{"name":"self"}],"output":{"name":"basicconstraints"}}],[11,"ca","","",119,{"inputs":[{"name":"self"}],"output":{"name":"basicconstraints"}}],[11,"pathlen","","",119,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"basicconstraints"}}],[11,"build","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[11,"new","","",120,{"inputs":[],"output":{"name":"keyusage"}}],[11,"critical","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"digital_signature","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"non_repudiation","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_encipherment","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"data_encipherment","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_agreement","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_cert_sign","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"crl_sign","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"encipher_only","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"decipher_only","","",120,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"build","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[11,"new","","",121,{"inputs":[],"output":{"name":"extendedkeyusage"}}],[11,"critical","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"server_auth","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"client_auth","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"code_signing","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"time_stamping","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_code_ind","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_code_com","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_ctl_sign","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_sgc","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_efs","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ns_sgc","","",121,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"other","","",121,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"extendedkeyusage"}}],[11,"build","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[11,"new","","",122,{"inputs":[],"output":{"name":"subjectkeyidentifier"}}],[11,"critical","","",122,{"inputs":[{"name":"self"}],"output":{"name":"subjectkeyidentifier"}}],[11,"build","","",122,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[11,"new","","",123,{"inputs":[],"output":{"name":"authoritykeyidentifier"}}],[11,"critical","","",123,{"inputs":[{"name":"self"}],"output":{"name":"authoritykeyidentifier"}}],[11,"keyid","","",123,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"authoritykeyidentifier"}}],[11,"issuer","","",123,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"authoritykeyidentifier"}}],[11,"build","","",123,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[11,"new","","",124,{"inputs":[],"output":{"name":"subjectalternativename"}}],[11,"critical","","",124,{"inputs":[{"name":"self"}],"output":{"name":"subjectalternativename"}}],[11,"email","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"uri","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"dns","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"rid","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"ip","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"dir_name","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"other_name","","",124,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"build","","",124,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[0,"store","openssl::x509","",null,null],[3,"X509StoreBuilder","openssl::x509::store","",null,null],[3,"X509StoreBuilderRef","","",null,null],[3,"X509Store","","",null,null],[3,"X509StoreRef","","",null,null],[11,"from_ptr","","",125,null],[11,"as_ptr","","",125,null],[11,"drop","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",125,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"deref_mut","","",125,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"borrow","","",125,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"as_ref","","",125,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"new","","Returns a builder for a certificate store.",125,{"inputs":[],"output":{"generics":["x509storebuilder","errorstack"],"name":"result"}}],[11,"build","","Constructs the `X509Store`.",125,{"inputs":[{"name":"self"}],"output":{"name":"x509store"}}],[11,"add_cert","","Adds a certificate to the certificate store.",126,{"inputs":[{"name":"self"},{"name":"x509"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_default_paths","","Load certificates from their default locations.",126,{"inputs":[{"name":"self"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"from_ptr","","",127,null],[11,"as_ptr","","",127,null],[11,"drop","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"deref_mut","","",127,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"borrow","","",127,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"as_ref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[17,"X509_FILETYPE_PEM","openssl::x509","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[11,"as_raw","","",128,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_ptr","","",129,null],[11,"as_ptr","","",129,null],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"deref_mut","","",129,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"borrow","","",129,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"as_ref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"error","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["x509verifyerror"],"name":"option"}}],[11,"current_cert","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["x509ref"],"name":"option"}}],[11,"error_depth","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"chain","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["stackref"],"name":"option"}}],[11,"ssl","","Returns a reference to the `Ssl` associated with this context.",130,{"inputs":[{"name":"self"}],"output":{"generics":["option","errorstack"],"name":"result"}}],[11,"new","","Creates a new generator with the following defaults:",131,{"inputs":[],"output":{"name":"x509generator"}}],[11,"set_valid_period","","Sets certificate validity period in days since today",131,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"add_name","","Add attribute to the name of the certificate",131,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"name":"x509generator"}}],[11,"add_names","","Add multiple attributes to the name of the certificate",131,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"add_extension","","Add an extension to a certificate",131,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"x509generator"}}],[11,"add_extensions","","Add multiple extensions to a certificate",131,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_sign_hash","","",131,{"inputs":[{"name":"self"},{"name":"messagedigest"}],"output":{"name":"x509generator"}}],[11,"sign","","Sets the certificate public-key, then self-sign and return it",131,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"generics":["x509","errorstack"],"name":"result"}}],[11,"request","","Obtain a certificate signing request (CSR)",131,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"generics":["x509req","errorstack"],"name":"result"}}],[11,"new","","Creates a new builder.",132,{"inputs":[],"output":{"generics":["x509builder","errorstack"],"name":"result"}}],[11,"set_not_after","","Sets the notAfter constraint on the certificate.",132,{"inputs":[{"name":"self"},{"name":"asn1timeref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_not_before","","Sets the notBefore constraint on the certificate.",132,{"inputs":[{"name":"self"},{"name":"asn1timeref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_version","","Sets the version of the certificate.",132,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_serial_number","","Sets the serial number of the certificate.",132,{"inputs":[{"name":"self"},{"name":"asn1integerref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_issuer_name","","Sets the issuer name of the certificate.",132,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_subject_name","","Sets the subject name of the certificate.",132,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_pubkey","","Sets the public key associated with the certificate.",132,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"x509v3_context","","Returns a context object which is needed to create certain X509 extension values.",132,{"inputs":[{"name":"self"},{"generics":["x509ref"],"name":"option"},{"generics":["confref"],"name":"option"}],"output":{"name":"x509v3context"}}],[11,"append_extension","","Adds an X509 extension value to the certificate.",132,{"inputs":[{"name":"self"},{"name":"x509extension"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"sign","","Signs the certificate with a private key.",132,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"messagedigest"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"build","","Consumes the builder, returning the certificate.",132,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"from_ptr","","",133,null],[11,"as_ptr","","",133,null],[11,"drop","","",133,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"deref_mut","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"borrow","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"as_ref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"subject_name","","",134,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"subject_alt_names","","Returns this certificate's SAN entries, if they exist.",134,{"inputs":[{"name":"self"}],"output":{"generics":["stack"],"name":"option"}}],[11,"public_key","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["pkey","errorstack"],"name":"result"}}],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",134,{"inputs":[{"name":"self"},{"name":"messagedigest"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"not_after","","Returns the certificate's Not After validity period.",134,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"not_before","","Returns the certificate's Not Before validity period.",134,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"signature","","Returns the certificate's signature",134,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"signature_algorithm","","Returns the certificate's signature algorithm.",134,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"ocsp_responders","","Returns the list of OCSP responder URLs specified in the certificate's Authority Information Access field.",134,{"inputs":[{"name":"self"}],"output":{"generics":["stack","errorstack"],"name":"result"}}],[11,"issued","","Checks that this certificate issued `subject`.",134,{"inputs":[{"name":"self"},{"name":"x509ref"}],"output":{"generics":["x509verifyerror"],"name":"result"}}],[11,"to_pem","","Serializes this value to PEM.",134,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"to_der","","Serializes this value to DER.",134,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"to_owned","","",134,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"builder","","Returns a new builder.",133,{"inputs":[],"output":{"generics":["x509builder","errorstack"],"name":"result"}}],[11,"from_pem","","Deserializes a value from PEM-formatted data.",133,null],[11,"from_der","","Deserializes a value from DER-formatted data.",133,null],[11,"stack_from_pem","","Deserializes a list of PEM-formatted certificates.",133,null],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"as_ref","","",134,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"as_ptr","","",135,null],[11,"from_ptr","","",136,null],[11,"as_ptr","","",136,null],[11,"drop","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",136,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"deref_mut","","",136,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"borrow","","",136,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"as_ref","","",136,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"new","","Constructs an X509 extension value. See `man x509v3_config` for information on supported names and their value formats.",136,{"inputs":[{"generics":["confref"],"name":"option"},{"generics":["x509v3context"],"name":"option"},{"name":"str"},{"name":"str"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[11,"new_nid","","Constructs an X509 extension value. See `man x509v3_config` for information on supported extensions and their value formats.",136,{"inputs":[{"generics":["confref"],"name":"option"},{"generics":["x509v3context"],"name":"option"},{"name":"nid"},{"name":"str"}],"output":{"generics":["x509extension","errorstack"],"name":"result"}}],[11,"new","","",137,{"inputs":[],"output":{"generics":["x509namebuilder","errorstack"],"name":"result"}}],[11,"append_entry_by_text","","",137,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"append_entry_by_nid","","",137,{"inputs":[{"name":"self"},{"name":"nid"},{"name":"str"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"build","","",137,{"inputs":[{"name":"self"}],"output":{"name":"x509name"}}],[11,"from_ptr","","",138,null],[11,"as_ptr","","",138,null],[11,"drop","","",138,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"deref_mut","","",138,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"borrow","","",138,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"as_ref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"builder","","Returns a new builder.",138,{"inputs":[],"output":{"generics":["x509namebuilder","errorstack"],"name":"result"}}],[11,"load_client_ca_file","","Loads subject names from a file containing PEM-formatted certificates.",138,{"inputs":[{"name":"p"}],"output":{"generics":["stack","errorstack"],"name":"result"}}],[11,"entries_by_nid","","",139,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"x509nameentries"}}],[11,"next","","",140,{"inputs":[{"name":"self"}],"output":{"generics":["x509nameentryref"],"name":"option"}}],[11,"from_ptr","","",141,null],[11,"as_ptr","","",141,null],[11,"drop","","",141,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",141,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"deref_mut","","",141,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"borrow","","",141,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"as_ref","","",141,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"data","","",142,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"new","","",143,{"inputs":[],"output":{"generics":["x509reqbuilder","errorstack"],"name":"result"}}],[11,"set_version","","",143,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_subject_name","","",143,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"set_pubkey","","",143,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"x509v3_context","","",143,{"inputs":[{"name":"self"},{"generics":["confref"],"name":"option"}],"output":{"name":"x509v3context"}}],[11,"add_extensions","","",143,{"inputs":[{"name":"self"},{"name":"stackref"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"sign","","",143,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"messagedigest"}],"output":{"generics":["errorstack"],"name":"result"}}],[11,"build","","",143,{"inputs":[{"name":"self"}],"output":{"name":"x509req"}}],[11,"from_ptr","","",144,null],[11,"as_ptr","","",144,null],[11,"drop","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",144,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"deref_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"borrow","","",144,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"as_ref","","",144,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"builder","","",144,{"inputs":[],"output":{"generics":["x509reqbuilder","errorstack"],"name":"result"}}],[11,"from_pem","","Reads CSR from PEM",144,null],[11,"from_der","","Deserializes a value from DER-formatted data.",144,null],[11,"to_pem","","Serializes this value to PEM.",145,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"to_der","","Serializes this value to DER.",145,{"inputs":[{"name":"self"}],"output":{"generics":["vec","errorstack"],"name":"result"}}],[11,"version","","",145,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"subject_name","","",145,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",146,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_raw","","Creates an `X509VerifyError` from a raw error number.",146,{"inputs":[{"name":"c_long"}],"output":{"generics":["x509verifyerror"],"name":"option"}}],[11,"as_raw","","",146,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"error_string","","",146,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_ptr","","",147,null],[11,"as_ptr","","",147,null],[11,"drop","","",147,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",147,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"deref_mut","","",147,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"borrow","","",147,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"as_ref","","",147,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"dnsname","","Returns the contents of this `GeneralName` if it is a `dNSName`.",148,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"ipaddress","","Returns the contents of this `GeneralName` if it is an `iPAddress`.",148,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_ptr","","",149,null],[11,"as_ptr","","",149,null],[11,"drop","","",149,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",149,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"deref_mut","","",149,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"borrow","","",149,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"as_ref","","",149,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"object","","Returns the ASN.1 OID of this algorithm.",150,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}]],"paths":[[3,"KeyError"],[3,"AesKey"],[3,"Asn1GeneralizedTime"],[3,"Asn1GeneralizedTimeRef"],[3,"Asn1Time"],[3,"Asn1TimeRef"],[3,"Asn1String"],[3,"Asn1StringRef"],[3,"Asn1Integer"],[3,"Asn1IntegerRef"],[3,"Asn1BitString"],[3,"Asn1BitStringRef"],[3,"Asn1Object"],[3,"Asn1ObjectRef"],[3,"BigNumContext"],[3,"BigNum"],[3,"BigNumRef"],[3,"CmsContentInfo"],[3,"CmsContentInfoRef"],[3,"ConfMethod"],[3,"Conf"],[3,"Dh"],[3,"DhRef"],[3,"Dsa"],[3,"DsaRef"],[3,"PointConversionForm"],[3,"Asn1Flag"],[3,"EcGroup"],[3,"EcGroupRef"],[3,"EcPoint"],[3,"EcPointRef"],[3,"EcKey"],[3,"EcKeyRef"],[3,"EcKeyBuilder"],[3,"EcKeyBuilderRef"],[3,"ErrorStack"],[3,"Error"],[3,"Index"],[3,"MessageDigest"],[3,"Hasher"],[3,"DigestBytes"],[3,"Nid"],[3,"Status"],[3,"Flag"],[3,"OcspResponseStatus"],[3,"OcspCertStatus"],[3,"OcspRevokedStatus"],[3,"OcspBasicResponse"],[3,"OcspBasicResponseRef"],[3,"OcspCertId"],[3,"OcspResponse"],[3,"OcspResponseRef"],[3,"OcspRequest"],[3,"OcspRequestRef"],[3,"OcspOneReq"],[3,"ParsedPkcs12"],[3,"Pkcs12"],[3,"Pkcs12Ref"],[3,"Pkcs12Builder"],[3,"KeyIvPair"],[3,"PKey"],[3,"PKeyRef"],[3,"PKeyCtx"],[3,"PKeyCtxRef"],[3,"Padding"],[3,"Rsa"],[3,"RsaRef"],[3,"Signer"],[3,"Verifier"],[3,"Sha1"],[3,"Sha224"],[3,"Sha256"],[3,"Sha384"],[3,"Sha512"],[3,"CipherBits"],[4,"Error"],[4,"HandshakeError"],[4,"SniError"],[4,"ShutdownResult"],[3,"RetryError"],[3,"SslConnectorBuilder"],[3,"SslConnector"],[3,"ConnectConfiguration"],[3,"SslAcceptorBuilder"],[3,"SslAcceptor"],[3,"SslOption"],[3,"SslMode"],[3,"SslMethod"],[3,"SslVerifyMode"],[3,"StatusType"],[3,"SslContextBuilder"],[3,"SslContext"],[3,"SslContextRef"],[3,"SslCipher"],[3,"SslCipherRef"],[3,"SslSession"],[3,"SslSessionRef"],[3,"Ssl"],[3,"SslRef"],[3,"MidHandshakeSslStream"],[3,"SslStream"],[8,"Stackable"],[3,"Stack"],[3,"IntoIter"],[3,"StackRef"],[3,"Iter"],[3,"IterMut"],[3,"OpensslString"],[3,"OpensslStringRef"],[4,"Mode"],[3,"Cipher"],[3,"Crypter"],[8,"OpenSslType"],[8,"OpenSslTypeRef"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"BasicConstraints"],[3,"KeyUsage"],[3,"ExtendedKeyUsage"],[3,"SubjectKeyIdentifier"],[3,"AuthorityKeyIdentifier"],[3,"SubjectAlternativeName"],[3,"X509StoreBuilder"],[3,"X509StoreBuilderRef"],[3,"X509Store"],[3,"X509FileType"],[3,"X509StoreContext"],[3,"X509StoreContextRef"],[3,"X509Generator"],[3,"X509Builder"],[3,"X509"],[3,"X509Ref"],[3,"X509v3Context"],[3,"X509Extension"],[3,"X509NameBuilder"],[3,"X509Name"],[3,"X509NameRef"],[3,"X509NameEntries"],[3,"X509NameEntry"],[3,"X509NameEntryRef"],[3,"X509ReqBuilder"],[3,"X509Req"],[3,"X509ReqRef"],[3,"X509VerifyError"],[3,"GeneralName"],[3,"GeneralNameRef"],[3,"X509Algorithm"],[3,"X509AlgorithmRef"]]};
searchIndex["openssl_sys"] = {"doc":"","items":[[3,"AES_KEY","openssl_sys","",null,null],[3,"GENERAL_NAME","","",null,null],[12,"type_","","",0,null],[12,"d","","",0,null],[3,"X509V3_CTX","","",null,null],[3,"SHA_CTX","","",null,null],[12,"h0","","",1,null],[12,"h1","","",1,null],[12,"h2","","",1,null],[12,"h3","","",1,null],[12,"h4","","",1,null],[12,"Nl","","",1,null],[12,"Nh","","",1,null],[12,"data","","",1,null],[12,"num","","",1,null],[3,"SHA256_CTX","","",null,null],[12,"h","","",2,null],[12,"Nl","","",2,null],[12,"Nh","","",2,null],[12,"data","","",2,null],[12,"num","","",2,null],[12,"md_len","","",2,null],[3,"SHA512_CTX","","",null,null],[12,"h","","",3,null],[12,"Nl","","",3,null],[12,"Nh","","",3,null],[12,"num","","",3,null],[12,"md_len","","",3,null],[4,"BIGNUM","","",null,null],[4,"BIO","","",null,null],[4,"BIO_METHOD","","",null,null],[4,"CRYPTO_EX_DATA","","",null,null],[4,"DH","","",null,null],[4,"DSA","","",null,null],[4,"ECDSA_SIG","","",null,null],[4,"EVP_CIPHER","","",null,null],[4,"EVP_MD_CTX","","",null,null],[4,"EVP_PKEY","","",null,null],[4,"HMAC_CTX","","",null,null],[4,"OPENSSL_STACK","","",null,null],[4,"PKCS12","","",null,null],[4,"RSA","","",null,null],[4,"SSL","","",null,null],[4,"SSL_CTX","","",null,null],[4,"SSL_SESSION","","",null,null],[4,"stack_st_ASN1_OBJECT","","",null,null],[4,"stack_st_GENERAL_NAME","","",null,null],[4,"stack_st_OPENSSL_STRING","","",null,null],[4,"stack_st_void","","",null,null],[4,"stack_st_X509","","",null,null],[4,"stack_st_X509_NAME","","",null,null],[4,"stack_st_X509_ATTRIBUTE","","",null,null],[4,"stack_st_X509_EXTENSION","","",null,null],[4,"stack_st_SSL_CIPHER","","",null,null],[4,"OPENSSL_INIT_SETTINGS","","",null,null],[4,"X509","","",null,null],[4,"X509_ALGOR","","",null,null],[4,"X509_VERIFY_PARAM","","",null,null],[4,"X509_REQ","","",null,null],[4,"ASN1_INTEGER","","",null,null],[4,"ASN1_GENERALIZEDTIME","","",null,null],[4,"ASN1_STRING","","",null,null],[4,"ASN1_BIT_STRING","","",null,null],[4,"ASN1_TIME","","",null,null],[4,"ASN1_TYPE","","",null,null],[4,"ASN1_OBJECT","","",null,null],[4,"BN_CTX","","",null,null],[4,"BN_GENCB","","",null,null],[4,"CMS_ContentInfo","","",null,null],[4,"CONF","","",null,null],[4,"CONF_METHOD","","",null,null],[4,"COMP_METHOD","","",null,null],[4,"EC_KEY","","",null,null],[4,"EC_GROUP","","",null,null],[4,"EC_METHOD","","",null,null],[4,"EC_POINT","","",null,null],[4,"ENGINE","","",null,null],[4,"EVP_CIPHER_CTX","","",null,null],[4,"EVP_MD","","",null,null],[4,"EVP_PKEY_CTX","","",null,null],[4,"OCSP_BASICRESP","","",null,null],[4,"OCSP_CERTID","","",null,null],[4,"OCSP_RESPONSE","","",null,null],[4,"OCSP_REQUEST","","",null,null],[4,"OCSP_ONEREQ","","",null,null],[4,"SSL_CIPHER","","",null,null],[4,"SSL_METHOD","","",null,null],[4,"X509_CRL","","",null,null],[4,"X509_EXTENSION","","",null,null],[4,"X509_NAME","","",null,null],[4,"X509_NAME_ENTRY","","",null,null],[4,"X509_STORE","","",null,null],[4,"X509_STORE_CTX","","",null,null],[4,"bio_st","","",null,null],[4,"DH_METHOD","","",null,null],[4,"RSA_METHOD","","",null,null],[4,"BN_MONT_CTX","","",null,null],[4,"BN_BLINDING","","",null,null],[4,"DSA_METHOD","","",null,null],[4,"EVP_PKEY_ASN1_METHOD","","",null,null],[4,"point_conversion_form_t","","",null,null],[13,"POINT_CONVERSION_COMPRESSED","","",4,null],[13,"POINT_CONVERSION_UNCOMPRESSED","","",4,null],[13,"POINT_CONVERSION_HYBRID","","",4,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"SSL_CTX_set_min_proto_version","","",null,null],[5,"SSL_CTX_set_max_proto_version","","",null,null],[5,"SSL_CTX_get_min_proto_version","","",null,null],[5,"SSL_CTX_get_max_proto_version","","",null,null],[5,"SSL_set_min_proto_version","","",null,null],[5,"SSL_set_max_proto_version","","",null,null],[5,"SSL_get_min_proto_version","","",null,null],[5,"SSL_get_max_proto_version","","",null,null],[5,"BIO_get_mem_data","","",null,null],[5,"BIO_clear_retry_flags","","",null,null],[5,"BIO_set_retry_read","","",null,null],[5,"BIO_set_retry_write","","",null,null],[5,"EVP_get_digestbynid","","",null,null],[5,"EVP_PKEY_CTX_set_rsa_padding","","",null,null],[5,"EVP_PKEY_CTX_get_rsa_padding","","",null,null],[5,"EVP_PKEY_CTX_set_rsa_pss_saltlen","","",null,null],[5,"EVP_PKEY_CTX_set_rsa_mgf1_md","","",null,null],[5,"SSL_CTX_set_mode","","",null,null],[5,"SSL_CTX_set_read_ahead","","",null,null],[5,"SSL_CTX_set_tmp_dh","","",null,null],[5,"SSL_CTX_set_tmp_ecdh","","",null,null],[5,"SSL_set_tmp_dh","","",null,null],[5,"SSL_set_tmp_ecdh","","",null,null],[5,"SSL_CTX_add_extra_chain_cert","","",null,null],[5,"SSL_CTX_set0_verify_cert_store","","",null,null],[5,"SSL_CTX_set_tlsext_servername_callback","","",null,null],[5,"SSL_set_tlsext_host_name","","",null,null],[5,"SSL_set_tlsext_status_type","","",null,null],[5,"SSL_CTX_set_tlsext_status_cb","","",null,null],[5,"SSL_CTX_set_tlsext_status_arg","","",null,null],[5,"SSL_CTX_get_extra_chain_certs","","",null,null],[5,"SSL_CTX_set_session_cache_mode","","",null,null],[5,"SSL_get_tlsext_status_ocsp_resp","","",null,null],[5,"SSL_set_tlsext_status_ocsp_resp","","",null,null],[5,"ERR_GET_LIB","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"ERR_GET_FUNC","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"ERR_GET_REASON","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"BIO_new","","",null,null],[5,"BIO_s_file","","",null,null],[5,"BIO_s_mem","","",null,null],[5,"BN_get_rfc2409_prime_768","","",null,null],[5,"BN_get_rfc2409_prime_1024","","",null,null],[5,"BN_get_rfc3526_prime_1536","","",null,null],[5,"BN_get_rfc3526_prime_2048","","",null,null],[5,"BN_get_rfc3526_prime_3072","","",null,null],[5,"BN_get_rfc3526_prime_4096","","",null,null],[5,"BN_get_rfc3526_prime_6144","","",null,null],[5,"BN_get_rfc3526_prime_8192","","",null,null],[5,"CRYPTO_malloc","","",null,null],[5,"CRYPTO_free","","",null,null],[5,"EVP_chacha20","","",null,null],[5,"EVP_chacha20_poly1305","","",null,null],[5,"HMAC_CTX_new","","",null,null],[5,"HMAC_CTX_free","","",null,null],[5,"OCSP_cert_to_id","","",null,null],[5,"TLS_method","","",null,null],[5,"DTLS_method","","",null,null],[5,"SSL_CIPHER_get_version","","",null,null],[5,"X509_get_subject_name","","",null,null],[5,"X509_get_issuer_name","","",null,null],[5,"X509_set1_notAfter","","",null,null],[5,"X509_set1_notBefore","","",null,null],[5,"X509_get_ext_d2i","","",null,null],[5,"X509_NAME_add_entry_by_NID","","",null,null],[5,"X509_get_signature_nid","","",null,null],[5,"X509_ALGOR_get0","","",null,null],[5,"X509_NAME_get_entry","","",null,null],[5,"X509_NAME_ENTRY_get_data","","",null,null],[5,"X509V3_EXT_nconf_nid","","",null,null],[5,"X509V3_EXT_nconf","","",null,null],[5,"ASN1_STRING_to_UTF8","","",null,null],[5,"BN_is_negative","","",null,null],[5,"EVP_CIPHER_key_length","","",null,null],[5,"EVP_CIPHER_block_size","","",null,null],[5,"EVP_CIPHER_iv_length","","",null,null],[5,"EVP_PBE_scrypt","","",null,null],[5,"DSA_get0_pqg","","",null,null],[5,"DSA_get0_key","","",null,null],[5,"RSA_get0_key","","",null,null],[5,"RSA_get0_factors","","",null,null],[5,"RSA_get0_crt_params","","",null,null],[5,"RSA_set0_key","","",null,null],[5,"RSA_set0_factors","","",null,null],[5,"RSA_set0_crt_params","","",null,null],[5,"ASN1_STRING_get0_data","","",null,null],[5,"OPENSSL_sk_num","","",null,null],[5,"OPENSSL_sk_value","","",null,null],[5,"SSL_CTX_get_options","","",null,null],[5,"SSL_CTX_set_options","","",null,null],[5,"SSL_CTX_clear_options","","",null,null],[5,"SSL_CTX_sess_set_get_cb","","",null,null],[5,"SSL_get_client_random","","",null,null],[5,"SSL_get_server_random","","",null,null],[5,"SSL_get0_verified_chain","","",null,null],[5,"X509_getm_notAfter","","",null,null],[5,"X509_getm_notBefore","","",null,null],[5,"X509_get0_signature","","",null,null],[5,"DH_set0_pqg","","",null,null],[5,"BIO_set_init","","",null,null],[5,"BIO_set_data","","",null,null],[5,"BIO_get_data","","",null,null],[5,"BIO_meth_new","","",null,null],[5,"BIO_meth_free","","",null,null],[5,"BIO_meth_set_write","","",null,null],[5,"BIO_meth_set_read","","",null,null],[5,"BIO_meth_set_puts","","",null,null],[5,"BIO_meth_set_ctrl","","",null,null],[5,"BIO_meth_set_create","","",null,null],[5,"BIO_meth_set_destroy","","",null,null],[5,"CRYPTO_get_ex_new_index","","",null,null],[5,"X509_up_ref","","",null,null],[5,"SSL_CTX_up_ref","","",null,null],[5,"SSL_session_reused","","",null,null],[5,"SSL_SESSION_get_master_key","","",null,null],[5,"SSL_SESSION_up_ref","","",null,null],[5,"X509_get0_extensions","","",null,null],[5,"X509_STORE_CTX_get0_chain","","",null,null],[5,"EVP_MD_CTX_new","","",null,null],[5,"EVP_MD_CTX_free","","",null,null],[5,"EVP_PKEY_bits","","",null,null],[5,"OpenSSL_version_num","","",null,null],[5,"OpenSSL_version","","",null,null],[5,"OPENSSL_init_ssl","","",null,null],[5,"OPENSSL_sk_new_null","","",null,null],[5,"OPENSSL_sk_free","","",null,null],[5,"OPENSSL_sk_pop_free","","",null,null],[5,"OPENSSL_sk_push","","",null,null],[5,"OPENSSL_sk_pop","","",null,null],[5,"PKCS12_create","","",null,null],[5,"X509_REQ_get_version","","",null,null],[5,"X509_REQ_get_subject_name","","",null,null],[5,"SSL_extension_supported","","",null,null],[5,"ECDSA_SIG_get0","","",null,null],[5,"ECDSA_SIG_set0","","",null,null],[5,"SSL_CIPHER_get_cipher_nid","","",null,null],[5,"SSL_CIPHER_get_digest_nid","","",null,null],[5,"CMS_decrypt","","",null,null],[5,"SMIME_read_CMS","","",null,null],[5,"CMS_ContentInfo_free","","",null,null],[5,"CMS_sign","","",null,null],[5,"i2d_CMS_ContentInfo","","",null,null],[5,"FIPS_mode_set","","",null,null],[5,"FIPS_mode","","",null,null],[5,"AES_set_encrypt_key","","",null,null],[5,"AES_set_decrypt_key","","",null,null],[5,"AES_ige_encrypt","","",null,null],[5,"ASN1_INTEGER_get","","",null,null],[5,"ASN1_INTEGER_set","","",null,null],[5,"ASN1_INTEGER_to_BN","","",null,null],[5,"ASN1_GENERALIZEDTIME_free","","",null,null],[5,"ASN1_GENERALIZEDTIME_print","","",null,null],[5,"ASN1_STRING_type_new","","",null,null],[5,"ASN1_TIME_free","","",null,null],[5,"ASN1_TIME_print","","",null,null],[5,"ASN1_BIT_STRING_free","","",null,null],[5,"ASN1_OBJECT_free","","",null,null],[5,"BIO_ctrl","","",null,null],[5,"BIO_free_all","","",null,null],[5,"BIO_new_fp","","",null,null],[5,"BIO_new_socket","","",null,null],[5,"BIO_read","","",null,null],[5,"BIO_write","","",null,null],[5,"BIO_new_mem_buf","","",null,null],[5,"BIO_set_flags","","",null,null],[5,"BIO_clear_flags","","",null,null],[5,"BN_CTX_new","","",null,null],[5,"BN_CTX_free","","",null,null],[5,"BN_new","","",null,null],[5,"BN_dup","","",null,null],[5,"BN_clear","","",null,null],[5,"BN_free","","",null,null],[5,"BN_clear_free","","",null,null],[5,"BN_num_bits","","",null,null],[5,"BN_set_negative","","",null,null],[5,"BN_set_word","","",null,null],[5,"BN_add","","",null,null],[5,"BN_div","","",null,null],[5,"BN_exp","","",null,null],[5,"BN_gcd","","",null,null],[5,"BN_mod_add","","",null,null],[5,"BN_mod_exp","","",null,null],[5,"BN_mod_inverse","","",null,null],[5,"BN_mod_mul","","",null,null],[5,"BN_mod_sqr","","",null,null],[5,"BN_mod_sub","","",null,null],[5,"BN_mul","","",null,null],[5,"BN_nnmod","","",null,null],[5,"BN_add_word","","",null,null],[5,"BN_sub_word","","",null,null],[5,"BN_mul_word","","",null,null],[5,"BN_div_word","","",null,null],[5,"BN_mod_word","","",null,null],[5,"BN_sqr","","",null,null],[5,"BN_sub","","",null,null],[5,"BN_clear_bit","","",null,null],[5,"BN_is_bit_set","","",null,null],[5,"BN_lshift","","",null,null],[5,"BN_lshift1","","",null,null],[5,"BN_mask_bits","","",null,null],[5,"BN_rshift","","",null,null],[5,"BN_set_bit","","",null,null],[5,"BN_rshift1","","",null,null],[5,"BN_cmp","","",null,null],[5,"BN_ucmp","","",null,null],[5,"BN_generate_prime_ex","","",null,null],[5,"BN_is_prime_ex","","",null,null],[5,"BN_is_prime_fasttest_ex","","",null,null],[5,"BN_rand","","",null,null],[5,"BN_pseudo_rand","","",null,null],[5,"BN_rand_range","","",null,null],[5,"BN_pseudo_rand_range","","",null,null],[5,"BN_bin2bn","","",null,null],[5,"BN_bn2bin","","",null,null],[5,"BN_dec2bn","","",null,null],[5,"BN_bn2dec","","",null,null],[5,"BN_hex2bn","","",null,null],[5,"BN_bn2hex","","",null,null],[5,"BN_to_ASN1_INTEGER","","",null,null],[5,"NCONF_default","","",null,null],[5,"NCONF_new","","",null,null],[5,"NCONF_free","","",null,null],[5,"CRYPTO_memcmp","","",null,null],[5,"DH_new","","",null,null],[5,"DH_free","","",null,null],[5,"DH_get_1024_160","","",null,null],[5,"DH_get_2048_224","","",null,null],[5,"DH_get_2048_256","","",null,null],[5,"EC_KEY_new","","",null,null],[5,"EC_KEY_new_by_curve_name","","",null,null],[5,"EC_KEY_dup","","",null,null],[5,"EC_KEY_up_ref","","",null,null],[5,"EC_KEY_set_group","","",null,null],[5,"EC_KEY_get0_group","","",null,null],[5,"EC_KEY_set_public_key","","",null,null],[5,"EC_KEY_get0_public_key","","",null,null],[5,"EC_KEY_set_private_key","","",null,null],[5,"EC_KEY_get0_private_key","","",null,null],[5,"EC_KEY_generate_key","","",null,null],[5,"EC_KEY_check_key","","",null,null],[5,"EC_KEY_free","","",null,null],[5,"EC_KEY_set_public_key_affine_coordinates","","",null,null],[5,"EC_GF2m_simple_method","","",null,null],[5,"EC_GROUP_new","","",null,null],[5,"EC_GROUP_new_curve_GFp","","",null,null],[5,"EC_GROUP_new_curve_GF2m","","",null,null],[5,"EC_GROUP_new_by_curve_name","","",null,null],[5,"EC_GROUP_get_curve_GFp","","",null,null],[5,"EC_GROUP_get_curve_GF2m","","",null,null],[5,"EC_GROUP_get_degree","","",null,null],[5,"EC_GROUP_get_order","","",null,null],[5,"EC_GROUP_set_asn1_flag","","",null,null],[5,"EC_GROUP_free","","",null,null],[5,"EC_POINT_new","","",null,null],[5,"EC_POINT_add","","",null,null],[5,"EC_POINT_mul","","",null,null],[5,"EC_POINT_invert","","",null,null],[5,"EC_POINT_point2oct","","",null,null],[5,"EC_POINT_oct2point","","",null,null],[5,"EC_POINT_cmp","","",null,null],[5,"EC_POINT_free","","",null,null],[5,"EC_POINT_get_affine_coordinates_GFp","","",null,null],[5,"EC_POINT_get_affine_coordinates_GF2m","","",null,null],[5,"ECDSA_SIG_new","","",null,null],[5,"ECDSA_SIG_free","","",null,null],[5,"ECDSA_do_verify","","",null,null],[5,"ECDSA_do_sign","","",null,null],[5,"ERR_peek_last_error","","",null,null],[5,"ERR_get_error","","",null,null],[5,"ERR_get_error_line_data","","",null,null],[5,"ERR_lib_error_string","","",null,null],[5,"ERR_func_error_string","","",null,null],[5,"ERR_reason_error_string","","",null,null],[5,"ERR_clear_error","","",null,null],[5,"ERR_put_error","","",null,null],[5,"ERR_set_error_data","","",null,null],[5,"EVP_md5","","",null,null],[5,"EVP_ripemd160","","",null,null],[5,"EVP_sha1","","",null,null],[5,"EVP_sha224","","",null,null],[5,"EVP_sha256","","",null,null],[5,"EVP_sha384","","",null,null],[5,"EVP_sha512","","",null,null],[5,"EVP_aes_128_cbc","","",null,null],[5,"EVP_aes_128_ecb","","",null,null],[5,"EVP_aes_128_xts","","",null,null],[5,"EVP_aes_128_ctr","","",null,null],[5,"EVP_aes_128_gcm","","",null,null],[5,"EVP_aes_128_ccm","","",null,null],[5,"EVP_aes_128_cfb1","","",null,null],[5,"EVP_aes_128_cfb128","","",null,null],[5,"EVP_aes_128_cfb8","","",null,null],[5,"EVP_aes_256_cbc","","",null,null],[5,"EVP_aes_256_ecb","","",null,null],[5,"EVP_aes_256_xts","","",null,null],[5,"EVP_aes_256_ctr","","",null,null],[5,"EVP_aes_256_gcm","","",null,null],[5,"EVP_aes_256_ccm","","",null,null],[5,"EVP_aes_256_cfb1","","",null,null],[5,"EVP_aes_256_cfb128","","",null,null],[5,"EVP_aes_256_cfb8","","",null,null],[5,"EVP_bf_cbc","","",null,null],[5,"EVP_bf_ecb","","",null,null],[5,"EVP_bf_cfb64","","",null,null],[5,"EVP_bf_ofb","","",null,null],[5,"EVP_rc4","","",null,null],[5,"EVP_des_cbc","","",null,null],[5,"EVP_des_ecb","","",null,null],[5,"EVP_des_ede3","","",null,null],[5,"EVP_des_ede3_cbc","","",null,null],[5,"EVP_BytesToKey","","",null,null],[5,"EVP_CIPHER_CTX_new","","",null,null],[5,"EVP_CIPHER_CTX_set_padding","","",null,null],[5,"EVP_CIPHER_CTX_set_key_length","","",null,null],[5,"EVP_CIPHER_CTX_ctrl","","",null,null],[5,"EVP_CIPHER_CTX_free","","",null,null],[5,"EVP_CipherInit","","",null,null],[5,"EVP_CipherInit_ex","","",null,null],[5,"EVP_CipherUpdate","","",null,null],[5,"EVP_CipherFinal","","",null,null],[5,"EVP_DigestInit","","",null,null],[5,"EVP_DigestInit_ex","","",null,null],[5,"EVP_DigestUpdate","","",null,null],[5,"EVP_DigestFinal","","",null,null],[5,"EVP_DigestFinal_ex","","",null,null],[5,"EVP_DigestSignInit","","",null,null],[5,"EVP_DigestSignFinal","","",null,null],[5,"EVP_DigestVerifyInit","","",null,null],[5,"EVP_DigestVerifyFinal","","",null,null],[5,"EVP_MD_CTX_copy_ex","","",null,null],[5,"EVP_PKEY_new","","",null,null],[5,"EVP_PKEY_free","","",null,null],[5,"EVP_PKEY_assign","","",null,null],[5,"EVP_PKEY_copy_parameters","","",null,null],[5,"EVP_PKEY_get1_RSA","","",null,null],[5,"EVP_PKEY_set1_RSA","","",null,null],[5,"EVP_PKEY_get1_DSA","","",null,null],[5,"EVP_PKEY_get1_DH","","",null,null],[5,"EVP_PKEY_get1_EC_KEY","","",null,null],[5,"EVP_PKEY_cmp","","",null,null],[5,"EVP_PKEY_id","","",null,null],[5,"EVP_PKEY_new_mac_key","","",null,null],[5,"EVP_PKEY_derive_init","","",null,null],[5,"EVP_PKEY_derive_set_peer","","",null,null],[5,"EVP_PKEY_derive","","",null,null],[5,"d2i_PKCS8PrivateKey_bio","","",null,null],[5,"EVP_PKEY_CTX_new","","",null,null],[5,"EVP_PKEY_CTX_new_id","","",null,null],[5,"EVP_PKEY_CTX_free","","",null,null],[5,"EVP_PKEY_CTX_ctrl","","",null,null],[5,"EVP_PKEY_keygen_init","","",null,null],[5,"EVP_PKEY_keygen","","",null,null],[5,"HMAC_CTX_copy","","",null,null],[5,"OBJ_obj2nid","","",null,null],[5,"OBJ_obj2txt","","",null,null],[5,"OBJ_nid2ln","","",null,null],[5,"OBJ_nid2sn","","",null,null],[5,"OBJ_find_sigid_algs","","",null,null],[5,"OCSP_BASICRESP_new","","",null,null],[5,"OCSP_BASICRESP_free","","",null,null],[5,"OCSP_basic_verify","","",null,null],[5,"OCSP_resp_find_status","","",null,null],[5,"OCSP_check_validity","","",null,null],[5,"OCSP_CERTID_free","","",null,null],[5,"OCSP_RESPONSE_new","","",null,null],[5,"OCSP_RESPONSE_free","","",null,null],[5,"i2d_OCSP_RESPONSE","","",null,null],[5,"d2i_OCSP_RESPONSE","","",null,null],[5,"OCSP_response_create","","",null,null],[5,"OCSP_response_status","","",null,null],[5,"OCSP_response_get1_basic","","",null,null],[5,"OCSP_REQUEST_new","","",null,null],[5,"OCSP_REQUEST_free","","",null,null],[5,"i2d_OCSP_REQUEST","","",null,null],[5,"d2i_OCSP_REQUEST","","",null,null],[5,"OCSP_request_add0_id","","",null,null],[5,"OCSP_ONEREQ_free","","",null,null],[5,"PEM_read_bio_DHparams","","",null,null],[5,"PEM_read_bio_X509","","",null,null],[5,"PEM_read_bio_X509_REQ","","",null,null],[5,"PEM_read_bio_PrivateKey","","",null,null],[5,"PEM_read_bio_PUBKEY","","",null,null],[5,"PEM_read_bio_RSAPrivateKey","","",null,null],[5,"PEM_read_bio_RSAPublicKey","","",null,null],[5,"PEM_read_bio_RSA_PUBKEY","","",null,null],[5,"PEM_write_bio_DHparams","","",null,null],[5,"PEM_write_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PKCS8PrivateKey","","",null,null],[5,"PEM_write_bio_PUBKEY","","",null,null],[5,"PEM_write_bio_RSAPrivateKey","","",null,null],[5,"PEM_write_bio_RSAPublicKey","","",null,null],[5,"PEM_write_bio_RSA_PUBKEY","","",null,null],[5,"PEM_read_bio_DSAPrivateKey","","",null,null],[5,"PEM_read_bio_DSA_PUBKEY","","",null,null],[5,"PEM_write_bio_DSAPrivateKey","","",null,null],[5,"PEM_write_bio_DSA_PUBKEY","","",null,null],[5,"PEM_write_bio_X509","","",null,null],[5,"PEM_write_bio_X509_REQ","","",null,null],[5,"PEM_write_bio_ECPrivateKey","","",null,null],[5,"PEM_read_bio_ECPrivateKey","","",null,null],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",null,null],[5,"PKCS5_PBKDF2_HMAC","","",null,null],[5,"RAND_bytes","","",null,null],[5,"RAND_status","","",null,null],[5,"RSA_new","","",null,null],[5,"RSA_free","","",null,null],[5,"RSA_up_ref","","",null,null],[5,"RSA_generate_key_ex","","",null,null],[5,"RSA_private_decrypt","","",null,null],[5,"RSA_public_decrypt","","",null,null],[5,"RSA_private_encrypt","","",null,null],[5,"RSA_public_encrypt","","",null,null],[5,"RSA_sign","","",null,null],[5,"RSA_size","","",null,null],[5,"RSA_verify","","",null,null],[5,"RSA_padding_check_PKCS1_type_2","","",null,null],[5,"DSA_new","","",null,null],[5,"DSA_free","","",null,null],[5,"DSA_size","","",null,null],[5,"DSA_generate_parameters_ex","","",null,null],[5,"DSA_generate_key","","",null,null],[5,"DSA_sign","","",null,null],[5,"DSA_verify","","",null,null],[5,"SHA1","","",null,null],[5,"SHA224","","",null,null],[5,"SHA256","","",null,null],[5,"SHA384","","",null,null],[5,"SHA512","","",null,null],[5,"SHA1_Init","","",null,null],[5,"SHA1_Update","","",null,null],[5,"SHA1_Final","","",null,null],[5,"SHA256_Init","","",null,null],[5,"SHA256_Update","","",null,null],[5,"SHA256_Final","","",null,null],[5,"SHA224_Init","","",null,null],[5,"SHA224_Update","","",null,null],[5,"SHA224_Final","","",null,null],[5,"SHA384_Init","","",null,null],[5,"SHA384_Update","","",null,null],[5,"SHA384_Final","","",null,null],[5,"SHA512_Init","","",null,null],[5,"SHA512_Update","","",null,null],[5,"SHA512_Final","","",null,null],[5,"SSL_new","","",null,null],[5,"SSL_pending","","",null,null],[5,"SSL_free","","",null,null],[5,"SSL_set_bio","","",null,null],[5,"SSL_get_rbio","","",null,null],[5,"SSL_get_wbio","","",null,null],[5,"SSL_accept","","",null,null],[5,"SSL_connect","","",null,null],[5,"SSL_do_handshake","","",null,null],[5,"SSL_ctrl","","",null,null],[5,"SSL_get_error","","",null,null],[5,"SSL_read","","",null,null],[5,"SSL_write","","",null,null],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",null,null],[5,"SSL_get_SSL_CTX","","",null,null],[5,"SSL_set_SSL_CTX","","",null,null],[5,"SSL_get_current_compression","","",null,null],[5,"SSL_get_peer_certificate","","",null,null],[5,"SSL_get_peer_cert_chain","","",null,null],[5,"SSL_get_ssl_method","","",null,null],[5,"SSL_get_version","","",null,null],[5,"SSL_version","","",null,null],[5,"SSL_state_string","","",null,null],[5,"SSL_state_string_long","","",null,null],[5,"SSL_set_verify","","",null,null],[5,"SSL_set_ex_data","","",null,null],[5,"SSL_get_ex_data","","",null,null],[5,"SSL_get_servername","","",null,null],[5,"SSL_get_current_cipher","","",null,null],[5,"SSL_get0_param","","",null,null],[5,"SSL_get_verify_result","","",null,null],[5,"SSL_shutdown","","",null,null],[5,"SSL_get_certificate","","",null,null],[5,"SSL_get_privatekey","","",null,null],[5,"SSL_load_client_CA_file","","",null,null],[5,"SSL_set_tmp_dh_callback","","",null,null],[5,"SSL_export_keying_material","","",null,null],[5,"SSL_COMP_get_name","","",null,null],[5,"SSL_CIPHER_get_name","","",null,null],[5,"SSL_CIPHER_get_bits","","",null,null],[5,"SSL_CIPHER_description","","",null,null],[5,"SSL_CTX_new","","",null,null],[5,"SSL_CTX_free","","",null,null],[5,"SSL_CTX_ctrl","","",null,null],[5,"SSL_CTX_callback_ctrl","","",null,null],[5,"SSL_CTX_set_verify","","",null,null],[5,"SSL_CTX_set_verify_depth","","",null,null],[5,"SSL_CTX_load_verify_locations","","",null,null],[5,"SSL_CTX_set_default_verify_paths","","",null,null],[5,"SSL_CTX_set_ex_data","","",null,null],[5,"SSL_CTX_get_ex_data","","",null,null],[5,"SSL_CTX_set_session_id_context","","",null,null],[5,"SSL_CTX_use_certificate_file","","",null,null],[5,"SSL_CTX_use_certificate_chain_file","","",null,null],[5,"SSL_CTX_use_certificate","","",null,null],[5,"SSL_CTX_use_PrivateKey_file","","",null,null],[5,"SSL_CTX_use_PrivateKey","","",null,null],[5,"SSL_CTX_check_private_key","","",null,null],[5,"SSL_CTX_set_client_CA_list","","",null,null],[5,"SSL_CTX_get_cert_store","","",null,null],[5,"SSL_CTX_set_tmp_dh_callback","","",null,null],[5,"SSL_CTX_sess_set_new_cb","","",null,null],[5,"SSL_CTX_sess_set_remove_cb","","",null,null],[5,"SSL_CTX_get0_certificate","","",null,null],[5,"SSL_CTX_get0_privatekey","","",null,null],[5,"SSL_CTX_set_cipher_list","","",null,null],[5,"SSL_CTX_set_next_protos_advertised_cb","","",null,null],[5,"SSL_CTX_set_next_proto_select_cb","","",null,null],[5,"SSL_CTX_set_psk_client_callback","","",null,null],[5,"SSL_select_next_proto","","",null,null],[5,"SSL_get0_next_proto_negotiated","","",null,null],[5,"SSL_get_session","","",null,null],[5,"SSL_set_session","","",null,null],[5,"SSL_is_server","","",null,null],[5,"SSL_get_finished","","",null,null],[5,"SSL_get_peer_finished","","",null,null],[5,"SSL_SESSION_free","","",null,null],[5,"SSL_SESSION_get_id","","",null,null],[5,"d2i_SSL_SESSION","","",null,null],[5,"i2d_SSL_SESSION","","",null,null],[5,"SSL_CTX_set_alpn_protos","","",null,null],[5,"SSL_set_alpn_protos","","",null,null],[5,"SSL_CTX_set_alpn_select_cb","","",null,null],[5,"SSL_get0_alpn_selected","","",null,null],[5,"X509_add_ext","","",null,null],[5,"X509_digest","","",null,null],[5,"X509_free","","",null,null],[5,"X509_REQ_free","","",null,null],[5,"X509_get_serialNumber","","",null,null],[5,"X509_gmtime_adj","","",null,null],[5,"X509_new","","",null,null],[5,"X509_set_issuer_name","","",null,null],[5,"X509_set_subject_name","","",null,null],[5,"X509_set_serialNumber","","",null,null],[5,"X509_set_version","","",null,null],[5,"X509_set_pubkey","","",null,null],[5,"X509_sign","","",null,null],[5,"X509_get_pubkey","","",null,null],[5,"X509_to_X509_REQ","","",null,null],[5,"X509_verify_cert","","",null,null],[5,"X509_verify_cert_error_string","","",null,null],[5,"X509_get1_ocsp","","",null,null],[5,"X509_check_issued","","",null,null],[5,"X509_ALGOR_free","","",null,null],[5,"X509_EXTENSION_free","","",null,null],[5,"X509_NAME_new","","",null,null],[5,"X509_NAME_free","","",null,null],[5,"X509_NAME_add_entry_by_txt","","",null,null],[5,"X509_NAME_get_index_by_NID","","",null,null],[5,"X509_NAME_ENTRY_free","","",null,null],[5,"ASN1_STRING_free","","",null,null],[5,"ASN1_STRING_length","","",null,null],[5,"ASN1_INTEGER_free","","",null,null],[5,"X509_STORE_new","","",null,null],[5,"X509_STORE_free","","",null,null],[5,"X509_STORE_add_cert","","",null,null],[5,"X509_STORE_set_default_paths","","",null,null],[5,"X509_STORE_CTX_new","","",null,null],[5,"X509_STORE_CTX_cleanup","","",null,null],[5,"X509_STORE_CTX_init","","",null,null],[5,"X509_STORE_CTX_free","","",null,null],[5,"X509_STORE_CTX_get_current_cert","","",null,null],[5,"X509_STORE_CTX_get_error","","",null,null],[5,"X509_STORE_CTX_set_error","","",null,null],[5,"X509_STORE_CTX_get_ex_data","","",null,null],[5,"X509_STORE_CTX_get_error_depth","","",null,null],[5,"X509V3_set_ctx","","",null,null],[5,"X509V3_set_nconf","","",null,null],[5,"X509_REQ_new","","",null,null],[5,"X509_REQ_set_version","","",null,null],[5,"X509_REQ_set_subject_name","","",null,null],[5,"X509_REQ_set_pubkey","","",null,null],[5,"X509_REQ_get_pubkey","","",null,null],[5,"X509_REQ_add_extensions","","",null,null],[5,"X509_REQ_get_extensions","","",null,null],[5,"X509_REQ_sign","","",null,null],[5,"X509_VERIFY_PARAM_free","","",null,null],[5,"X509_VERIFY_PARAM_set_hostflags","","",null,null],[5,"X509_VERIFY_PARAM_set1_host","","",null,null],[5,"X509_VERIFY_PARAM_set1_ip","","",null,null],[5,"d2i_DHparams","","",null,null],[5,"i2d_DHparams","","",null,null],[5,"d2i_DSAPublicKey","","",null,null],[5,"i2d_DSAPublicKey","","",null,null],[5,"d2i_DSAPrivateKey","","",null,null],[5,"i2d_DSAPrivateKey","","",null,null],[5,"d2i_DSA_PUBKEY","","",null,null],[5,"i2d_DSA_PUBKEY","","",null,null],[5,"d2i_ECPrivateKey","","",null,null],[5,"i2d_ECPrivateKey","","",null,null],[5,"d2i_X509","","",null,null],[5,"d2i_X509_REQ","","",null,null],[5,"i2d_X509_bio","","",null,null],[5,"i2d_X509","","",null,null],[5,"i2d_X509_REQ_bio","","",null,null],[5,"i2d_X509_REQ","","",null,null],[5,"d2i_AutoPrivateKey","","",null,null],[5,"d2i_PUBKEY","","",null,null],[5,"i2d_PUBKEY_bio","","",null,null],[5,"i2d_PrivateKey_bio","","",null,null],[5,"i2d_PUBKEY","","",null,null],[5,"i2d_PrivateKey","","",null,null],[5,"i2d_RSA_PUBKEY","","",null,null],[5,"d2i_RSA_PUBKEY","","",null,null],[5,"i2d_RSAPublicKey","","",null,null],[5,"d2i_RSAPublicKey","","",null,null],[5,"i2d_RSAPrivateKey","","",null,null],[5,"d2i_RSAPrivateKey","","",null,null],[5,"i2d_PKCS12_bio","","",null,null],[5,"i2d_PKCS12","","",null,null],[5,"d2i_PKCS12","","",null,null],[5,"PKCS12_parse","","",null,null],[5,"PKCS12_free","","",null,null],[5,"GENERAL_NAME_free","","",null,null],[5,"HMAC_Init_ex","","",null,null],[5,"HMAC_Update","","",null,null],[5,"HMAC_Final","","",null,null],[5,"SSL_CTX_set_cookie_generate_cb","","",null,null],[5,"SSL_CTX_set_cookie_verify_cb","","",null,null],[5,"EVP_MD_size","","",null,null],[5,"EVP_get_digestbyname","","",null,null],[5,"EVP_get_cipherbyname","","",null,null],[5,"SSL_set_connect_state","","",null,null],[5,"SSL_set_accept_state","","",null,null],[6,"bio_info_cb","","",null,null],[6,"GEN_SESSION_CB","","",null,null],[6,"tls_session_ticket_ext_cb_fn","","",null,null],[6,"tls_session_secret_cb_fn","","",null,null],[6,"BN_ULONG","","",null,null],[6,"CRYPTO_EX_new","","",null,null],[6,"CRYPTO_EX_dup","","",null,null],[6,"CRYPTO_EX_free","","",null,null],[6,"PasswordCallback","","",null,null],[6,"SHA_LONG","","",null,null],[6,"SHA_LONG64","","",null,null],[17,"CMS_ASCIICRLF","","",null,null],[17,"SSL_CTRL_SET_MIN_PROTO_VERSION","","",null,null],[17,"SSL_CTRL_SET_MAX_PROTO_VERSION","","",null,null],[17,"SSL_CTRL_GET_MIN_PROTO_VERSION","","",null,null],[17,"SSL_CTRL_GET_MAX_PROTO_VERSION","","",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_NO_SSLv2","","",null,null],[17,"OPENSSL_VERSION","","",null,null],[17,"OPENSSL_CFLAGS","","",null,null],[17,"OPENSSL_BUILT_ON","","",null,null],[17,"OPENSSL_PLATFORM","","",null,null],[17,"OPENSSL_DIR","","",null,null],[17,"CRYPTO_EX_INDEX_SSL","","",null,null],[17,"CRYPTO_EX_INDEX_SSL_CTX","","",null,null],[17,"OPENSSL_INIT_LOAD_SSL_STRINGS","","",null,null],[17,"X509_V_ERR_DANE_NO_MATCH","","",null,null],[17,"X509_V_ERR_EE_KEY_TOO_SMALL","","",null,null],[17,"X509_V_ERR_CA_KEY_TOO_SMALL","","",null,null],[17,"X509_V_ERR_CA_MD_TOO_WEAK","","",null,null],[17,"X509_V_ERR_INVALID_CALL","","",null,null],[17,"X509_V_ERR_STORE_LOOKUP","","",null,null],[17,"X509_V_ERR_NO_VALID_SCTS","","",null,null],[17,"X509_CHECK_FLAG_NEVER_CHECK_SUBJECT","","",null,null],[17,"SSL_CTRL_SET_VERIFY_CERT_STORE","","",null,null],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_SSLv3","","",null,null],[17,"SSL_OP_NO_DTLSv1","","",null,null],[17,"SSL_OP_NO_DTLSv1_2","","",null,null],[17,"X509_V_ERR_UNSPECIFIED","","",null,null],[17,"CMS_TEXT","","",null,null],[17,"CMS_NOCERTS","","",null,null],[17,"CMS_NO_CONTENT_VERIFY","","",null,null],[17,"CMS_NO_ATTR_VERIFY","","",null,null],[17,"CMS_NOSIGS","","",null,null],[17,"CMS_NOINTERN","","",null,null],[17,"CMS_NO_SIGNER_CERT_VERIFY","","",null,null],[17,"CMS_NOVERIFY","","",null,null],[17,"CMS_DETACHED","","",null,null],[17,"CMS_BINARY","","",null,null],[17,"CMS_NOATTR","","",null,null],[17,"CMS_NOSMIMECAP","","",null,null],[17,"CMS_NOOLDMIMETYPE","","",null,null],[17,"CMS_CRLFEOL","","",null,null],[17,"CMS_STREAM","","",null,null],[17,"CMS_NOCRL","","",null,null],[17,"CMS_PARTIAL","","",null,null],[17,"CMS_REUSE_DIGEST","","",null,null],[17,"CMS_USE_KEYID","","",null,null],[17,"CMS_DEBUG_DECRYPT","","",null,null],[17,"CMS_KEY_PARAM","","",null,null],[17,"AES_ENCRYPT","","",null,null],[17,"AES_DECRYPT","","",null,null],[17,"AES_MAXNR","","",null,null],[17,"AES_BLOCK_SIZE","","",null,null],[17,"BIO_TYPE_NONE","","",null,null],[17,"BIO_CTRL_EOF","","",null,null],[17,"BIO_CTRL_INFO","","",null,null],[17,"BIO_CTRL_FLUSH","","",null,null],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",null,null],[17,"BIO_FLAGS_READ","","",null,null],[17,"BIO_FLAGS_WRITE","","",null,null],[17,"BIO_FLAGS_IO_SPECIAL","","",null,null],[17,"BIO_FLAGS_RWS","","",null,null],[17,"BIO_FLAGS_SHOULD_RETRY","","",null,null],[17,"CRYPTO_LOCK","","",null,null],[17,"ERR_TXT_MALLOCED","","",null,null],[17,"ERR_TXT_STRING","","",null,null],[17,"ERR_LIB_PEM","","",null,null],[17,"PEM_R_NO_START_LINE","","",null,null],[17,"EVP_MAX_MD_SIZE","","",null,null],[17,"EVP_PKEY_RSA","","",null,null],[17,"EVP_PKEY_HMAC","","",null,null],[17,"EVP_PKEY_CMAC","","",null,null],[17,"EVP_PKEY_DSA","","",null,null],[17,"EVP_PKEY_DH","","",null,null],[17,"EVP_PKEY_EC","","",null,null],[17,"EVP_PKEY_ALG_CTRL","","",null,null],[17,"EVP_PKEY_CTRL_RSA_PADDING","","",null,null],[17,"EVP_PKEY_CTRL_RSA_PSS_SALTLEN","","",null,null],[17,"EVP_PKEY_CTRL_RSA_MGF1_MD","","",null,null],[17,"EVP_PKEY_CTRL_GET_RSA_PADDING","","",null,null],[17,"EVP_PKEY_CTRL_SET_MAC_KEY","","",null,null],[17,"EVP_PKEY_CTRL_CIPHER","","",null,null],[17,"EVP_PKEY_OP_KEYGEN","","",null,null],[17,"EVP_PKEY_OP_SIGN","","",null,null],[17,"EVP_PKEY_OP_VERIFY","","",null,null],[17,"EVP_PKEY_OP_VERIFYRECOVER","","",null,null],[17,"EVP_PKEY_OP_SIGNCTX","","",null,null],[17,"EVP_PKEY_OP_VERIFYCTX","","",null,null],[17,"EVP_PKEY_OP_ENCRYPT","","",null,null],[17,"EVP_PKEY_OP_DECRYPT","","",null,null],[17,"EVP_PKEY_OP_TYPE_SIG","","",null,null],[17,"EVP_PKEY_OP_TYPE_CRYPT","","",null,null],[17,"EVP_CTRL_GCM_SET_IVLEN","","",null,null],[17,"EVP_CTRL_GCM_GET_TAG","","",null,null],[17,"EVP_CTRL_GCM_SET_TAG","","",null,null],[17,"MBSTRING_ASC","","",null,null],[17,"MBSTRING_BMP","","",null,null],[17,"MBSTRING_FLAG","","",null,null],[17,"MBSTRING_UNIV","","",null,null],[17,"MBSTRING_UTF8","","",null,null],[17,"NID_undef","","",null,null],[17,"NID_itu_t","","",null,null],[17,"NID_ccitt","","",null,null],[17,"NID_iso","","",null,null],[17,"NID_joint_iso_itu_t","","",null,null],[17,"NID_joint_iso_ccitt","","",null,null],[17,"NID_member_body","","",null,null],[17,"NID_identified_organization","","",null,null],[17,"NID_hmac_md5","","",null,null],[17,"NID_hmac_sha1","","",null,null],[17,"NID_certicom_arc","","",null,null],[17,"NID_international_organizations","","",null,null],[17,"NID_wap","","",null,null],[17,"NID_wap_wsg","","",null,null],[17,"NID_selected_attribute_types","","",null,null],[17,"NID_clearance","","",null,null],[17,"NID_ISO_US","","",null,null],[17,"NID_X9_57","","",null,null],[17,"NID_X9cm","","",null,null],[17,"NID_dsa","","",null,null],[17,"NID_dsaWithSHA1","","",null,null],[17,"NID_ansi_X9_62","","",null,null],[17,"NID_X9_62_prime_field","","",null,null],[17,"NID_X9_62_characteristic_two_field","","",null,null],[17,"NID_X9_62_id_characteristic_two_basis","","",null,null],[17,"NID_X9_62_onBasis","","",null,null],[17,"NID_X9_62_tpBasis","","",null,null],[17,"NID_X9_62_ppBasis","","",null,null],[17,"NID_X9_62_id_ecPublicKey","","",null,null],[17,"NID_X9_62_c2pnb163v1","","",null,null],[17,"NID_X9_62_c2pnb163v2","","",null,null],[17,"NID_X9_62_c2pnb163v3","","",null,null],[17,"NID_X9_62_c2pnb176v1","","",null,null],[17,"NID_X9_62_c2tnb191v1","","",null,null],[17,"NID_X9_62_c2tnb191v2","","",null,null],[17,"NID_X9_62_c2tnb191v3","","",null,null],[17,"NID_X9_62_c2onb191v4","","",null,null],[17,"NID_X9_62_c2onb191v5","","",null,null],[17,"NID_X9_62_c2pnb208w1","","",null,null],[17,"NID_X9_62_c2tnb239v1","","",null,null],[17,"NID_X9_62_c2tnb239v2","","",null,null],[17,"NID_X9_62_c2tnb239v3","","",null,null],[17,"NID_X9_62_c2onb239v4","","",null,null],[17,"NID_X9_62_c2onb239v5","","",null,null],[17,"NID_X9_62_c2pnb272w1","","",null,null],[17,"NID_X9_62_c2pnb304w1","","",null,null],[17,"NID_X9_62_c2tnb359v1","","",null,null],[17,"NID_X9_62_c2pnb368w1","","",null,null],[17,"NID_X9_62_c2tnb431r1","","",null,null],[17,"NID_X9_62_prime192v1","","",null,null],[17,"NID_X9_62_prime192v2","","",null,null],[17,"NID_X9_62_prime192v3","","",null,null],[17,"NID_X9_62_prime239v1","","",null,null],[17,"NID_X9_62_prime239v2","","",null,null],[17,"NID_X9_62_prime239v3","","",null,null],[17,"NID_X9_62_prime256v1","","",null,null],[17,"NID_ecdsa_with_SHA1","","",null,null],[17,"NID_ecdsa_with_Recommended","","",null,null],[17,"NID_ecdsa_with_Specified","","",null,null],[17,"NID_ecdsa_with_SHA224","","",null,null],[17,"NID_ecdsa_with_SHA256","","",null,null],[17,"NID_ecdsa_with_SHA384","","",null,null],[17,"NID_ecdsa_with_SHA512","","",null,null],[17,"NID_secp112r1","","",null,null],[17,"NID_secp112r2","","",null,null],[17,"NID_secp128r1","","",null,null],[17,"NID_secp128r2","","",null,null],[17,"NID_secp160k1","","",null,null],[17,"NID_secp160r1","","",null,null],[17,"NID_secp160r2","","",null,null],[17,"NID_secp192k1","","",null,null],[17,"NID_secp224k1","","",null,null],[17,"NID_secp224r1","","",null,null],[17,"NID_secp256k1","","",null,null],[17,"NID_secp384r1","","",null,null],[17,"NID_secp521r1","","",null,null],[17,"NID_sect113r1","","",null,null],[17,"NID_sect113r2","","",null,null],[17,"NID_sect131r1","","",null,null],[17,"NID_sect131r2","","",null,null],[17,"NID_sect163k1","","",null,null],[17,"NID_sect163r1","","",null,null],[17,"NID_sect163r2","","",null,null],[17,"NID_sect193r1","","",null,null],[17,"NID_sect193r2","","",null,null],[17,"NID_sect233k1","","",null,null],[17,"NID_sect233r1","","",null,null],[17,"NID_sect239k1","","",null,null],[17,"NID_sect283k1","","",null,null],[17,"NID_sect283r1","","",null,null],[17,"NID_sect409k1","","",null,null],[17,"NID_sect409r1","","",null,null],[17,"NID_sect571k1","","",null,null],[17,"NID_sect571r1","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls1","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls3","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls4","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls5","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls6","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls7","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls8","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls9","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls10","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls11","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls12","","",null,null],[17,"NID_cast5_cbc","","",null,null],[17,"NID_cast5_ecb","","",null,null],[17,"NID_cast5_cfb64","","",null,null],[17,"NID_cast5_ofb64","","",null,null],[17,"NID_pbeWithMD5AndCast5_CBC","","",null,null],[17,"NID_id_PasswordBasedMAC","","",null,null],[17,"NID_id_DHBasedMac","","",null,null],[17,"NID_rsadsi","","",null,null],[17,"NID_pkcs","","",null,null],[17,"NID_pkcs1","","",null,null],[17,"NID_rsaEncryption","","",null,null],[17,"NID_md2WithRSAEncryption","","",null,null],[17,"NID_md4WithRSAEncryption","","",null,null],[17,"NID_md5WithRSAEncryption","","",null,null],[17,"NID_sha1WithRSAEncryption","","",null,null],[17,"NID_rsaesOaep","","",null,null],[17,"NID_mgf1","","",null,null],[17,"NID_rsassaPss","","",null,null],[17,"NID_sha256WithRSAEncryption","","",null,null],[17,"NID_sha384WithRSAEncryption","","",null,null],[17,"NID_sha512WithRSAEncryption","","",null,null],[17,"NID_sha224WithRSAEncryption","","",null,null],[17,"NID_pkcs3","","",null,null],[17,"NID_dhKeyAgreement","","",null,null],[17,"NID_pkcs5","","",null,null],[17,"NID_pbeWithMD2AndDES_CBC","","",null,null],[17,"NID_pbeWithMD5AndDES_CBC","","",null,null],[17,"NID_pbeWithMD2AndRC2_CBC","","",null,null],[17,"NID_pbeWithMD5AndRC2_CBC","","",null,null],[17,"NID_pbeWithSHA1AndDES_CBC","","",null,null],[17,"NID_pbeWithSHA1AndRC2_CBC","","",null,null],[17,"NID_id_pbkdf2","","",null,null],[17,"NID_pbes2","","",null,null],[17,"NID_pbmac1","","",null,null],[17,"NID_pkcs7","","",null,null],[17,"NID_pkcs7_data","","",null,null],[17,"NID_pkcs7_signed","","",null,null],[17,"NID_pkcs7_enveloped","","",null,null],[17,"NID_pkcs7_signedAndEnveloped","","",null,null],[17,"NID_pkcs7_digest","","",null,null],[17,"NID_pkcs7_encrypted","","",null,null],[17,"NID_pkcs9","","",null,null],[17,"NID_pkcs9_emailAddress","","",null,null],[17,"NID_pkcs9_unstructuredName","","",null,null],[17,"NID_pkcs9_contentType","","",null,null],[17,"NID_pkcs9_messageDigest","","",null,null],[17,"NID_pkcs9_signingTime","","",null,null],[17,"NID_pkcs9_countersignature","","",null,null],[17,"NID_pkcs9_challengePassword","","",null,null],[17,"NID_pkcs9_unstructuredAddress","","",null,null],[17,"NID_pkcs9_extCertAttributes","","",null,null],[17,"NID_ext_req","","",null,null],[17,"NID_SMIMECapabilities","","",null,null],[17,"NID_SMIME","","",null,null],[17,"NID_id_smime_mod","","",null,null],[17,"NID_id_smime_ct","","",null,null],[17,"NID_id_smime_aa","","",null,null],[17,"NID_id_smime_alg","","",null,null],[17,"NID_id_smime_cd","","",null,null],[17,"NID_id_smime_spq","","",null,null],[17,"NID_id_smime_cti","","",null,null],[17,"NID_id_smime_mod_cms","","",null,null],[17,"NID_id_smime_mod_ess","","",null,null],[17,"NID_id_smime_mod_oid","","",null,null],[17,"NID_id_smime_mod_msg_v3","","",null,null],[17,"NID_id_smime_mod_ets_eSignature_88","","",null,null],[17,"NID_id_smime_mod_ets_eSignature_97","","",null,null],[17,"NID_id_smime_mod_ets_eSigPolicy_88","","",null,null],[17,"NID_id_smime_mod_ets_eSigPolicy_97","","",null,null],[17,"NID_id_smime_ct_receipt","","",null,null],[17,"NID_id_smime_ct_authData","","",null,null],[17,"NID_id_smime_ct_publishCert","","",null,null],[17,"NID_id_smime_ct_TSTInfo","","",null,null],[17,"NID_id_smime_ct_TDTInfo","","",null,null],[17,"NID_id_smime_ct_contentInfo","","",null,null],[17,"NID_id_smime_ct_DVCSRequestData","","",null,null],[17,"NID_id_smime_ct_DVCSResponseData","","",null,null],[17,"NID_id_smime_ct_compressedData","","",null,null],[17,"NID_id_ct_asciiTextWithCRLF","","",null,null],[17,"NID_id_smime_aa_receiptRequest","","",null,null],[17,"NID_id_smime_aa_securityLabel","","",null,null],[17,"NID_id_smime_aa_mlExpandHistory","","",null,null],[17,"NID_id_smime_aa_contentHint","","",null,null],[17,"NID_id_smime_aa_msgSigDigest","","",null,null],[17,"NID_id_smime_aa_encapContentType","","",null,null],[17,"NID_id_smime_aa_contentIdentifier","","",null,null],[17,"NID_id_smime_aa_macValue","","",null,null],[17,"NID_id_smime_aa_equivalentLabels","","",null,null],[17,"NID_id_smime_aa_contentReference","","",null,null],[17,"NID_id_smime_aa_encrypKeyPref","","",null,null],[17,"NID_id_smime_aa_signingCertificate","","",null,null],[17,"NID_id_smime_aa_smimeEncryptCerts","","",null,null],[17,"NID_id_smime_aa_timeStampToken","","",null,null],[17,"NID_id_smime_aa_ets_sigPolicyId","","",null,null],[17,"NID_id_smime_aa_ets_commitmentType","","",null,null],[17,"NID_id_smime_aa_ets_signerLocation","","",null,null],[17,"NID_id_smime_aa_ets_signerAttr","","",null,null],[17,"NID_id_smime_aa_ets_otherSigCert","","",null,null],[17,"NID_id_smime_aa_ets_contentTimestamp","","",null,null],[17,"NID_id_smime_aa_ets_CertificateRefs","","",null,null],[17,"NID_id_smime_aa_ets_RevocationRefs","","",null,null],[17,"NID_id_smime_aa_ets_certValues","","",null,null],[17,"NID_id_smime_aa_ets_revocationValues","","",null,null],[17,"NID_id_smime_aa_ets_escTimeStamp","","",null,null],[17,"NID_id_smime_aa_ets_certCRLTimestamp","","",null,null],[17,"NID_id_smime_aa_ets_archiveTimeStamp","","",null,null],[17,"NID_id_smime_aa_signatureType","","",null,null],[17,"NID_id_smime_aa_dvcs_dvc","","",null,null],[17,"NID_id_smime_alg_ESDHwith3DES","","",null,null],[17,"NID_id_smime_alg_ESDHwithRC2","","",null,null],[17,"NID_id_smime_alg_3DESwrap","","",null,null],[17,"NID_id_smime_alg_RC2wrap","","",null,null],[17,"NID_id_smime_alg_ESDH","","",null,null],[17,"NID_id_smime_alg_CMS3DESwrap","","",null,null],[17,"NID_id_smime_alg_CMSRC2wrap","","",null,null],[17,"NID_id_alg_PWRI_KEK","","",null,null],[17,"NID_id_smime_cd_ldap","","",null,null],[17,"NID_id_smime_spq_ets_sqt_uri","","",null,null],[17,"NID_id_smime_spq_ets_sqt_unotice","","",null,null],[17,"NID_id_smime_cti_ets_proofOfOrigin","","",null,null],[17,"NID_id_smime_cti_ets_proofOfReceipt","","",null,null],[17,"NID_id_smime_cti_ets_proofOfDelivery","","",null,null],[17,"NID_id_smime_cti_ets_proofOfSender","","",null,null],[17,"NID_id_smime_cti_ets_proofOfApproval","","",null,null],[17,"NID_id_smime_cti_ets_proofOfCreation","","",null,null],[17,"NID_friendlyName","","",null,null],[17,"NID_localKeyID","","",null,null],[17,"NID_ms_csp_name","","",null,null],[17,"NID_LocalKeySet","","",null,null],[17,"NID_x509Certificate","","",null,null],[17,"NID_sdsiCertificate","","",null,null],[17,"NID_x509Crl","","",null,null],[17,"NID_pbe_WithSHA1And128BitRC4","","",null,null],[17,"NID_pbe_WithSHA1And40BitRC4","","",null,null],[17,"NID_pbe_WithSHA1And3_Key_TripleDES_CBC","","",null,null],[17,"NID_pbe_WithSHA1And2_Key_TripleDES_CBC","","",null,null],[17,"NID_pbe_WithSHA1And128BitRC2_CBC","","",null,null],[17,"NID_pbe_WithSHA1And40BitRC2_CBC","","",null,null],[17,"NID_keyBag","","",null,null],[17,"NID_pkcs8ShroudedKeyBag","","",null,null],[17,"NID_certBag","","",null,null],[17,"NID_crlBag","","",null,null],[17,"NID_secretBag","","",null,null],[17,"NID_safeContentsBag","","",null,null],[17,"NID_md2","","",null,null],[17,"NID_md4","","",null,null],[17,"NID_md5","","",null,null],[17,"NID_md5_sha1","","",null,null],[17,"NID_hmacWithMD5","","",null,null],[17,"NID_hmacWithSHA1","","",null,null],[17,"NID_hmacWithSHA224","","",null,null],[17,"NID_hmacWithSHA256","","",null,null],[17,"NID_hmacWithSHA384","","",null,null],[17,"NID_hmacWithSHA512","","",null,null],[17,"NID_rc2_cbc","","",null,null],[17,"NID_rc2_ecb","","",null,null],[17,"NID_rc2_cfb64","","",null,null],[17,"NID_rc2_ofb64","","",null,null],[17,"NID_rc2_40_cbc","","",null,null],[17,"NID_rc2_64_cbc","","",null,null],[17,"NID_rc4","","",null,null],[17,"NID_rc4_40","","",null,null],[17,"NID_des_ede3_cbc","","",null,null],[17,"NID_rc5_cbc","","",null,null],[17,"NID_rc5_ecb","","",null,null],[17,"NID_rc5_cfb64","","",null,null],[17,"NID_rc5_ofb64","","",null,null],[17,"NID_ms_ext_req","","",null,null],[17,"NID_ms_code_ind","","",null,null],[17,"NID_ms_code_com","","",null,null],[17,"NID_ms_ctl_sign","","",null,null],[17,"NID_ms_sgc","","",null,null],[17,"NID_ms_efs","","",null,null],[17,"NID_ms_smartcard_login","","",null,null],[17,"NID_ms_upn","","",null,null],[17,"NID_idea_cbc","","",null,null],[17,"NID_idea_ecb","","",null,null],[17,"NID_idea_cfb64","","",null,null],[17,"NID_idea_ofb64","","",null,null],[17,"NID_bf_cbc","","",null,null],[17,"NID_bf_ecb","","",null,null],[17,"NID_bf_cfb64","","",null,null],[17,"NID_bf_ofb64","","",null,null],[17,"NID_id_pkix","","",null,null],[17,"NID_id_pkix_mod","","",null,null],[17,"NID_id_pe","","",null,null],[17,"NID_id_qt","","",null,null],[17,"NID_id_kp","","",null,null],[17,"NID_id_it","","",null,null],[17,"NID_id_pkip","","",null,null],[17,"NID_id_alg","","",null,null],[17,"NID_id_cmc","","",null,null],[17,"NID_id_on","","",null,null],[17,"NID_id_pda","","",null,null],[17,"NID_id_aca","","",null,null],[17,"NID_id_qcs","","",null,null],[17,"NID_id_cct","","",null,null],[17,"NID_id_ppl","","",null,null],[17,"NID_id_ad","","",null,null],[17,"NID_id_pkix1_explicit_88","","",null,null],[17,"NID_id_pkix1_implicit_88","","",null,null],[17,"NID_id_pkix1_explicit_93","","",null,null],[17,"NID_id_pkix1_implicit_93","","",null,null],[17,"NID_id_mod_crmf","","",null,null],[17,"NID_id_mod_cmc","","",null,null],[17,"NID_id_mod_kea_profile_88","","",null,null],[17,"NID_id_mod_kea_profile_93","","",null,null],[17,"NID_id_mod_cmp","","",null,null],[17,"NID_id_mod_qualified_cert_88","","",null,null],[17,"NID_id_mod_qualified_cert_93","","",null,null],[17,"NID_id_mod_attribute_cert","","",null,null],[17,"NID_id_mod_timestamp_protocol","","",null,null],[17,"NID_id_mod_ocsp","","",null,null],[17,"NID_id_mod_dvcs","","",null,null],[17,"NID_id_mod_cmp2000","","",null,null],[17,"NID_info_access","","",null,null],[17,"NID_biometricInfo","","",null,null],[17,"NID_qcStatements","","",null,null],[17,"NID_ac_auditEntity","","",null,null],[17,"NID_ac_targeting","","",null,null],[17,"NID_aaControls","","",null,null],[17,"NID_sbgp_ipAddrBlock","","",null,null],[17,"NID_sbgp_autonomousSysNum","","",null,null],[17,"NID_sbgp_routerIdentifier","","",null,null],[17,"NID_ac_proxying","","",null,null],[17,"NID_sinfo_access","","",null,null],[17,"NID_proxyCertInfo","","",null,null],[17,"NID_id_qt_cps","","",null,null],[17,"NID_id_qt_unotice","","",null,null],[17,"NID_textNotice","","",null,null],[17,"NID_server_auth","","",null,null],[17,"NID_client_auth","","",null,null],[17,"NID_code_sign","","",null,null],[17,"NID_email_protect","","",null,null],[17,"NID_ipsecEndSystem","","",null,null],[17,"NID_ipsecTunnel","","",null,null],[17,"NID_ipsecUser","","",null,null],[17,"NID_time_stamp","","",null,null],[17,"NID_OCSP_sign","","",null,null],[17,"NID_dvcs","","",null,null],[17,"NID_id_it_caProtEncCert","","",null,null],[17,"NID_id_it_signKeyPairTypes","","",null,null],[17,"NID_id_it_encKeyPairTypes","","",null,null],[17,"NID_id_it_preferredSymmAlg","","",null,null],[17,"NID_id_it_caKeyUpdateInfo","","",null,null],[17,"NID_id_it_currentCRL","","",null,null],[17,"NID_id_it_unsupportedOIDs","","",null,null],[17,"NID_id_it_subscriptionRequest","","",null,null],[17,"NID_id_it_subscriptionResponse","","",null,null],[17,"NID_id_it_keyPairParamReq","","",null,null],[17,"NID_id_it_keyPairParamRep","","",null,null],[17,"NID_id_it_revPassphrase","","",null,null],[17,"NID_id_it_implicitConfirm","","",null,null],[17,"NID_id_it_confirmWaitTime","","",null,null],[17,"NID_id_it_origPKIMessage","","",null,null],[17,"NID_id_it_suppLangTags","","",null,null],[17,"NID_id_regCtrl","","",null,null],[17,"NID_id_regInfo","","",null,null],[17,"NID_id_regCtrl_regToken","","",null,null],[17,"NID_id_regCtrl_authenticator","","",null,null],[17,"NID_id_regCtrl_pkiPublicationInfo","","",null,null],[17,"NID_id_regCtrl_pkiArchiveOptions","","",null,null],[17,"NID_id_regCtrl_oldCertID","","",null,null],[17,"NID_id_regCtrl_protocolEncrKey","","",null,null],[17,"NID_id_regInfo_utf8Pairs","","",null,null],[17,"NID_id_regInfo_certReq","","",null,null],[17,"NID_id_alg_des40","","",null,null],[17,"NID_id_alg_noSignature","","",null,null],[17,"NID_id_alg_dh_sig_hmac_sha1","","",null,null],[17,"NID_id_alg_dh_pop","","",null,null],[17,"NID_id_cmc_statusInfo","","",null,null],[17,"NID_id_cmc_identification","","",null,null],[17,"NID_id_cmc_identityProof","","",null,null],[17,"NID_id_cmc_dataReturn","","",null,null],[17,"NID_id_cmc_transactionId","","",null,null],[17,"NID_id_cmc_senderNonce","","",null,null],[17,"NID_id_cmc_recipientNonce","","",null,null],[17,"NID_id_cmc_addExtensions","","",null,null],[17,"NID_id_cmc_encryptedPOP","","",null,null],[17,"NID_id_cmc_decryptedPOP","","",null,null],[17,"NID_id_cmc_lraPOPWitness","","",null,null],[17,"NID_id_cmc_getCert","","",null,null],[17,"NID_id_cmc_getCRL","","",null,null],[17,"NID_id_cmc_revokeRequest","","",null,null],[17,"NID_id_cmc_regInfo","","",null,null],[17,"NID_id_cmc_responseInfo","","",null,null],[17,"NID_id_cmc_queryPending","","",null,null],[17,"NID_id_cmc_popLinkRandom","","",null,null],[17,"NID_id_cmc_popLinkWitness","","",null,null],[17,"NID_id_cmc_confirmCertAcceptance","","",null,null],[17,"NID_id_on_personalData","","",null,null],[17,"NID_id_on_permanentIdentifier","","",null,null],[17,"NID_id_pda_dateOfBirth","","",null,null],[17,"NID_id_pda_placeOfBirth","","",null,null],[17,"NID_id_pda_gender","","",null,null],[17,"NID_id_pda_countryOfCitizenship","","",null,null],[17,"NID_id_pda_countryOfResidence","","",null,null],[17,"NID_id_aca_authenticationInfo","","",null,null],[17,"NID_id_aca_accessIdentity","","",null,null],[17,"NID_id_aca_chargingIdentity","","",null,null],[17,"NID_id_aca_group","","",null,null],[17,"NID_id_aca_role","","",null,null],[17,"NID_id_aca_encAttrs","","",null,null],[17,"NID_id_qcs_pkixQCSyntax_v1","","",null,null],[17,"NID_id_cct_crs","","",null,null],[17,"NID_id_cct_PKIData","","",null,null],[17,"NID_id_cct_PKIResponse","","",null,null],[17,"NID_id_ppl_anyLanguage","","",null,null],[17,"NID_id_ppl_inheritAll","","",null,null],[17,"NID_Independent","","",null,null],[17,"NID_ad_OCSP","","",null,null],[17,"NID_ad_ca_issuers","","",null,null],[17,"NID_ad_timeStamping","","",null,null],[17,"NID_ad_dvcs","","",null,null],[17,"NID_caRepository","","",null,null],[17,"NID_id_pkix_OCSP_basic","","",null,null],[17,"NID_id_pkix_OCSP_Nonce","","",null,null],[17,"NID_id_pkix_OCSP_CrlID","","",null,null],[17,"NID_id_pkix_OCSP_acceptableResponses","","",null,null],[17,"NID_id_pkix_OCSP_noCheck","","",null,null],[17,"NID_id_pkix_OCSP_archiveCutoff","","",null,null],[17,"NID_id_pkix_OCSP_serviceLocator","","",null,null],[17,"NID_id_pkix_OCSP_extendedStatus","","",null,null],[17,"NID_id_pkix_OCSP_valid","","",null,null],[17,"NID_id_pkix_OCSP_path","","",null,null],[17,"NID_id_pkix_OCSP_trustRoot","","",null,null],[17,"NID_algorithm","","",null,null],[17,"NID_md5WithRSA","","",null,null],[17,"NID_des_ecb","","",null,null],[17,"NID_des_cbc","","",null,null],[17,"NID_des_ofb64","","",null,null],[17,"NID_des_cfb64","","",null,null],[17,"NID_rsaSignature","","",null,null],[17,"NID_dsa_2","","",null,null],[17,"NID_dsaWithSHA","","",null,null],[17,"NID_shaWithRSAEncryption","","",null,null],[17,"NID_des_ede_ecb","","",null,null],[17,"NID_des_ede3_ecb","","",null,null],[17,"NID_des_ede_cbc","","",null,null],[17,"NID_des_ede_cfb64","","",null,null],[17,"NID_des_ede3_cfb64","","",null,null],[17,"NID_des_ede_ofb64","","",null,null],[17,"NID_des_ede3_ofb64","","",null,null],[17,"NID_desx_cbc","","",null,null],[17,"NID_sha","","",null,null],[17,"NID_sha1","","",null,null],[17,"NID_dsaWithSHA1_2","","",null,null],[17,"NID_sha1WithRSA","","",null,null],[17,"NID_ripemd160","","",null,null],[17,"NID_ripemd160WithRSA","","",null,null],[17,"NID_sxnet","","",null,null],[17,"NID_X500","","",null,null],[17,"NID_X509","","",null,null],[17,"NID_commonName","","",null,null],[17,"NID_surname","","",null,null],[17,"NID_serialNumber","","",null,null],[17,"NID_countryName","","",null,null],[17,"NID_localityName","","",null,null],[17,"NID_stateOrProvinceName","","",null,null],[17,"NID_streetAddress","","",null,null],[17,"NID_organizationName","","",null,null],[17,"NID_organizationalUnitName","","",null,null],[17,"NID_title","","",null,null],[17,"NID_description","","",null,null],[17,"NID_searchGuide","","",null,null],[17,"NID_businessCategory","","",null,null],[17,"NID_postalAddress","","",null,null],[17,"NID_postalCode","","",null,null],[17,"NID_postOfficeBox","","",null,null],[17,"NID_physicalDeliveryOfficeName","","",null,null],[17,"NID_telephoneNumber","","",null,null],[17,"NID_telexNumber","","",null,null],[17,"NID_teletexTerminalIdentifier","","",null,null],[17,"NID_facsimileTelephoneNumber","","",null,null],[17,"NID_x121Address","","",null,null],[17,"NID_internationaliSDNNumber","","",null,null],[17,"NID_registeredAddress","","",null,null],[17,"NID_destinationIndicator","","",null,null],[17,"NID_preferredDeliveryMethod","","",null,null],[17,"NID_presentationAddress","","",null,null],[17,"NID_supportedApplicationContext","","",null,null],[17,"NID_member","","",null,null],[17,"NID_owner","","",null,null],[17,"NID_roleOccupant","","",null,null],[17,"NID_seeAlso","","",null,null],[17,"NID_userPassword","","",null,null],[17,"NID_userCertificate","","",null,null],[17,"NID_cACertificate","","",null,null],[17,"NID_authorityRevocationList","","",null,null],[17,"NID_certificateRevocationList","","",null,null],[17,"NID_crossCertificatePair","","",null,null],[17,"NID_name","","",null,null],[17,"NID_givenName","","",null,null],[17,"NID_initials","","",null,null],[17,"NID_generationQualifier","","",null,null],[17,"NID_x500UniqueIdentifier","","",null,null],[17,"NID_dnQualifier","","",null,null],[17,"NID_enhancedSearchGuide","","",null,null],[17,"NID_protocolInformation","","",null,null],[17,"NID_distinguishedName","","",null,null],[17,"NID_uniqueMember","","",null,null],[17,"NID_houseIdentifier","","",null,null],[17,"NID_supportedAlgorithms","","",null,null],[17,"NID_deltaRevocationList","","",null,null],[17,"NID_dmdName","","",null,null],[17,"NID_pseudonym","","",null,null],[17,"NID_role","","",null,null],[17,"NID_X500algorithms","","",null,null],[17,"NID_rsa","","",null,null],[17,"NID_mdc2WithRSA","","",null,null],[17,"NID_mdc2","","",null,null],[17,"NID_id_ce","","",null,null],[17,"NID_subject_directory_attributes","","",null,null],[17,"NID_subject_key_identifier","","",null,null],[17,"NID_key_usage","","",null,null],[17,"NID_private_key_usage_period","","",null,null],[17,"NID_subject_alt_name","","",null,null],[17,"NID_issuer_alt_name","","",null,null],[17,"NID_basic_constraints","","",null,null],[17,"NID_crl_number","","",null,null],[17,"NID_crl_reason","","",null,null],[17,"NID_invalidity_date","","",null,null],[17,"NID_delta_crl","","",null,null],[17,"NID_issuing_distribution_point","","",null,null],[17,"NID_certificate_issuer","","",null,null],[17,"NID_name_constraints","","",null,null],[17,"NID_crl_distribution_points","","",null,null],[17,"NID_certificate_policies","","",null,null],[17,"NID_any_policy","","",null,null],[17,"NID_policy_mappings","","",null,null],[17,"NID_authority_key_identifier","","",null,null],[17,"NID_policy_constraints","","",null,null],[17,"NID_ext_key_usage","","",null,null],[17,"NID_freshest_crl","","",null,null],[17,"NID_inhibit_any_policy","","",null,null],[17,"NID_target_information","","",null,null],[17,"NID_no_rev_avail","","",null,null],[17,"NID_anyExtendedKeyUsage","","",null,null],[17,"NID_netscape","","",null,null],[17,"NID_netscape_cert_extension","","",null,null],[17,"NID_netscape_data_type","","",null,null],[17,"NID_netscape_cert_type","","",null,null],[17,"NID_netscape_base_url","","",null,null],[17,"NID_netscape_revocation_url","","",null,null],[17,"NID_netscape_ca_revocation_url","","",null,null],[17,"NID_netscape_renewal_url","","",null,null],[17,"NID_netscape_ca_policy_url","","",null,null],[17,"NID_netscape_ssl_server_name","","",null,null],[17,"NID_netscape_comment","","",null,null],[17,"NID_netscape_cert_sequence","","",null,null],[17,"NID_ns_sgc","","",null,null],[17,"NID_org","","",null,null],[17,"NID_dod","","",null,null],[17,"NID_iana","","",null,null],[17,"NID_Directory","","",null,null],[17,"NID_Management","","",null,null],[17,"NID_Experimental","","",null,null],[17,"NID_Private","","",null,null],[17,"NID_Security","","",null,null],[17,"NID_SNMPv2","","",null,null],[17,"NID_Mail","","",null,null],[17,"NID_Enterprises","","",null,null],[17,"NID_dcObject","","",null,null],[17,"NID_mime_mhs","","",null,null],[17,"NID_mime_mhs_headings","","",null,null],[17,"NID_mime_mhs_bodies","","",null,null],[17,"NID_id_hex_partial_message","","",null,null],[17,"NID_id_hex_multipart_message","","",null,null],[17,"NID_zlib_compression","","",null,null],[17,"NID_aes_128_ecb","","",null,null],[17,"NID_aes_128_cbc","","",null,null],[17,"NID_aes_128_ofb128","","",null,null],[17,"NID_aes_128_cfb128","","",null,null],[17,"NID_id_aes128_wrap","","",null,null],[17,"NID_aes_128_gcm","","",null,null],[17,"NID_aes_128_ccm","","",null,null],[17,"NID_id_aes128_wrap_pad","","",null,null],[17,"NID_aes_192_ecb","","",null,null],[17,"NID_aes_192_cbc","","",null,null],[17,"NID_aes_192_ofb128","","",null,null],[17,"NID_aes_192_cfb128","","",null,null],[17,"NID_id_aes192_wrap","","",null,null],[17,"NID_aes_192_gcm","","",null,null],[17,"NID_aes_192_ccm","","",null,null],[17,"NID_id_aes192_wrap_pad","","",null,null],[17,"NID_aes_256_ecb","","",null,null],[17,"NID_aes_256_cbc","","",null,null],[17,"NID_aes_256_ofb128","","",null,null],[17,"NID_aes_256_cfb128","","",null,null],[17,"NID_id_aes256_wrap","","",null,null],[17,"NID_aes_256_gcm","","",null,null],[17,"NID_aes_256_ccm","","",null,null],[17,"NID_id_aes256_wrap_pad","","",null,null],[17,"NID_aes_128_cfb1","","",null,null],[17,"NID_aes_192_cfb1","","",null,null],[17,"NID_aes_256_cfb1","","",null,null],[17,"NID_aes_128_cfb8","","",null,null],[17,"NID_aes_192_cfb8","","",null,null],[17,"NID_aes_256_cfb8","","",null,null],[17,"NID_aes_128_ctr","","",null,null],[17,"NID_aes_192_ctr","","",null,null],[17,"NID_aes_256_ctr","","",null,null],[17,"NID_aes_128_xts","","",null,null],[17,"NID_aes_256_xts","","",null,null],[17,"NID_des_cfb1","","",null,null],[17,"NID_des_cfb8","","",null,null],[17,"NID_des_ede3_cfb1","","",null,null],[17,"NID_des_ede3_cfb8","","",null,null],[17,"NID_sha256","","",null,null],[17,"NID_sha384","","",null,null],[17,"NID_sha512","","",null,null],[17,"NID_sha224","","",null,null],[17,"NID_dsa_with_SHA224","","",null,null],[17,"NID_dsa_with_SHA256","","",null,null],[17,"NID_hold_instruction_code","","",null,null],[17,"NID_hold_instruction_none","","",null,null],[17,"NID_hold_instruction_call_issuer","","",null,null],[17,"NID_hold_instruction_reject","","",null,null],[17,"NID_data","","",null,null],[17,"NID_pss","","",null,null],[17,"NID_ucl","","",null,null],[17,"NID_pilot","","",null,null],[17,"NID_pilotAttributeType","","",null,null],[17,"NID_pilotAttributeSyntax","","",null,null],[17,"NID_pilotObjectClass","","",null,null],[17,"NID_pilotGroups","","",null,null],[17,"NID_iA5StringSyntax","","",null,null],[17,"NID_caseIgnoreIA5StringSyntax","","",null,null],[17,"NID_pilotObject","","",null,null],[17,"NID_pilotPerson","","",null,null],[17,"NID_account","","",null,null],[17,"NID_document","","",null,null],[17,"NID_room","","",null,null],[17,"NID_documentSeries","","",null,null],[17,"NID_Domain","","",null,null],[17,"NID_rFC822localPart","","",null,null],[17,"NID_dNSDomain","","",null,null],[17,"NID_domainRelatedObject","","",null,null],[17,"NID_friendlyCountry","","",null,null],[17,"NID_simpleSecurityObject","","",null,null],[17,"NID_pilotOrganization","","",null,null],[17,"NID_pilotDSA","","",null,null],[17,"NID_qualityLabelledData","","",null,null],[17,"NID_userId","","",null,null],[17,"NID_textEncodedORAddress","","",null,null],[17,"NID_rfc822Mailbox","","",null,null],[17,"NID_info","","",null,null],[17,"NID_favouriteDrink","","",null,null],[17,"NID_roomNumber","","",null,null],[17,"NID_photo","","",null,null],[17,"NID_userClass","","",null,null],[17,"NID_host","","",null,null],[17,"NID_manager","","",null,null],[17,"NID_documentIdentifier","","",null,null],[17,"NID_documentTitle","","",null,null],[17,"NID_documentVersion","","",null,null],[17,"NID_documentAuthor","","",null,null],[17,"NID_documentLocation","","",null,null],[17,"NID_homeTelephoneNumber","","",null,null],[17,"NID_secretary","","",null,null],[17,"NID_otherMailbox","","",null,null],[17,"NID_lastModifiedTime","","",null,null],[17,"NID_lastModifiedBy","","",null,null],[17,"NID_domainComponent","","",null,null],[17,"NID_aRecord","","",null,null],[17,"NID_pilotAttributeType27","","",null,null],[17,"NID_mXRecord","","",null,null],[17,"NID_nSRecord","","",null,null],[17,"NID_sOARecord","","",null,null],[17,"NID_cNAMERecord","","",null,null],[17,"NID_associatedDomain","","",null,null],[17,"NID_associatedName","","",null,null],[17,"NID_homePostalAddress","","",null,null],[17,"NID_personalTitle","","",null,null],[17,"NID_mobileTelephoneNumber","","",null,null],[17,"NID_pagerTelephoneNumber","","",null,null],[17,"NID_friendlyCountryName","","",null,null],[17,"NID_organizationalStatus","","",null,null],[17,"NID_janetMailbox","","",null,null],[17,"NID_mailPreferenceOption","","",null,null],[17,"NID_buildingName","","",null,null],[17,"NID_dSAQuality","","",null,null],[17,"NID_singleLevelQuality","","",null,null],[17,"NID_subtreeMinimumQuality","","",null,null],[17,"NID_subtreeMaximumQuality","","",null,null],[17,"NID_personalSignature","","",null,null],[17,"NID_dITRedirect","","",null,null],[17,"NID_audio","","",null,null],[17,"NID_documentPublisher","","",null,null],[17,"NID_id_set","","",null,null],[17,"NID_set_ctype","","",null,null],[17,"NID_set_msgExt","","",null,null],[17,"NID_set_attr","","",null,null],[17,"NID_set_policy","","",null,null],[17,"NID_set_certExt","","",null,null],[17,"NID_set_brand","","",null,null],[17,"NID_setct_PANData","","",null,null],[17,"NID_setct_PANToken","","",null,null],[17,"NID_setct_PANOnly","","",null,null],[17,"NID_setct_OIData","","",null,null],[17,"NID_setct_PI","","",null,null],[17,"NID_setct_PIData","","",null,null],[17,"NID_setct_PIDataUnsigned","","",null,null],[17,"NID_setct_HODInput","","",null,null],[17,"NID_setct_AuthResBaggage","","",null,null],[17,"NID_setct_AuthRevReqBaggage","","",null,null],[17,"NID_setct_AuthRevResBaggage","","",null,null],[17,"NID_setct_CapTokenSeq","","",null,null],[17,"NID_setct_PInitResData","","",null,null],[17,"NID_setct_PI_TBS","","",null,null],[17,"NID_setct_PResData","","",null,null],[17,"NID_setct_AuthReqTBS","","",null,null],[17,"NID_setct_AuthResTBS","","",null,null],[17,"NID_setct_AuthResTBSX","","",null,null],[17,"NID_setct_AuthTokenTBS","","",null,null],[17,"NID_setct_CapTokenData","","",null,null],[17,"NID_setct_CapTokenTBS","","",null,null],[17,"NID_setct_AcqCardCodeMsg","","",null,null],[17,"NID_setct_AuthRevReqTBS","","",null,null],[17,"NID_setct_AuthRevResData","","",null,null],[17,"NID_setct_AuthRevResTBS","","",null,null],[17,"NID_setct_CapReqTBS","","",null,null],[17,"NID_setct_CapReqTBSX","","",null,null],[17,"NID_setct_CapResData","","",null,null],[17,"NID_setct_CapRevReqTBS","","",null,null],[17,"NID_setct_CapRevReqTBSX","","",null,null],[17,"NID_setct_CapRevResData","","",null,null],[17,"NID_setct_CredReqTBS","","",null,null],[17,"NID_setct_CredReqTBSX","","",null,null],[17,"NID_setct_CredResData","","",null,null],[17,"NID_setct_CredRevReqTBS","","",null,null],[17,"NID_setct_CredRevReqTBSX","","",null,null],[17,"NID_setct_CredRevResData","","",null,null],[17,"NID_setct_PCertReqData","","",null,null],[17,"NID_setct_PCertResTBS","","",null,null],[17,"NID_setct_BatchAdminReqData","","",null,null],[17,"NID_setct_BatchAdminResData","","",null,null],[17,"NID_setct_CardCInitResTBS","","",null,null],[17,"NID_setct_MeAqCInitResTBS","","",null,null],[17,"NID_setct_RegFormResTBS","","",null,null],[17,"NID_setct_CertReqData","","",null,null],[17,"NID_setct_CertReqTBS","","",null,null],[17,"NID_setct_CertResData","","",null,null],[17,"NID_setct_CertInqReqTBS","","",null,null],[17,"NID_setct_ErrorTBS","","",null,null],[17,"NID_setct_PIDualSignedTBE","","",null,null],[17,"NID_setct_PIUnsignedTBE","","",null,null],[17,"NID_setct_AuthReqTBE","","",null,null],[17,"NID_setct_AuthResTBE","","",null,null],[17,"NID_setct_AuthResTBEX","","",null,null],[17,"NID_setct_AuthTokenTBE","","",null,null],[17,"NID_setct_CapTokenTBE","","",null,null],[17,"NID_setct_CapTokenTBEX","","",null,null],[17,"NID_setct_AcqCardCodeMsgTBE","","",null,null],[17,"NID_setct_AuthRevReqTBE","","",null,null],[17,"NID_setct_AuthRevResTBE","","",null,null],[17,"NID_setct_AuthRevResTBEB","","",null,null],[17,"NID_setct_CapReqTBE","","",null,null],[17,"NID_setct_CapReqTBEX","","",null,null],[17,"NID_setct_CapResTBE","","",null,null],[17,"NID_setct_CapRevReqTBE","","",null,null],[17,"NID_setct_CapRevReqTBEX","","",null,null],[17,"NID_setct_CapRevResTBE","","",null,null],[17,"NID_setct_CredReqTBE","","",null,null],[17,"NID_setct_CredReqTBEX","","",null,null],[17,"NID_setct_CredResTBE","","",null,null],[17,"NID_setct_CredRevReqTBE","","",null,null],[17,"NID_setct_CredRevReqTBEX","","",null,null],[17,"NID_setct_CredRevResTBE","","",null,null],[17,"NID_setct_BatchAdminReqTBE","","",null,null],[17,"NID_setct_BatchAdminResTBE","","",null,null],[17,"NID_setct_RegFormReqTBE","","",null,null],[17,"NID_setct_CertReqTBE","","",null,null],[17,"NID_setct_CertReqTBEX","","",null,null],[17,"NID_setct_CertResTBE","","",null,null],[17,"NID_setct_CRLNotificationTBS","","",null,null],[17,"NID_setct_CRLNotificationResTBS","","",null,null],[17,"NID_setct_BCIDistributionTBS","","",null,null],[17,"NID_setext_genCrypt","","",null,null],[17,"NID_setext_miAuth","","",null,null],[17,"NID_setext_pinSecure","","",null,null],[17,"NID_setext_pinAny","","",null,null],[17,"NID_setext_track2","","",null,null],[17,"NID_setext_cv","","",null,null],[17,"NID_set_policy_root","","",null,null],[17,"NID_setCext_hashedRoot","","",null,null],[17,"NID_setCext_certType","","",null,null],[17,"NID_setCext_merchData","","",null,null],[17,"NID_setCext_cCertRequired","","",null,null],[17,"NID_setCext_tunneling","","",null,null],[17,"NID_setCext_setExt","","",null,null],[17,"NID_setCext_setQualf","","",null,null],[17,"NID_setCext_PGWYcapabilities","","",null,null],[17,"NID_setCext_TokenIdentifier","","",null,null],[17,"NID_setCext_Track2Data","","",null,null],[17,"NID_setCext_TokenType","","",null,null],[17,"NID_setCext_IssuerCapabilities","","",null,null],[17,"NID_setAttr_Cert","","",null,null],[17,"NID_setAttr_PGWYcap","","",null,null],[17,"NID_setAttr_TokenType","","",null,null],[17,"NID_setAttr_IssCap","","",null,null],[17,"NID_set_rootKeyThumb","","",null,null],[17,"NID_set_addPolicy","","",null,null],[17,"NID_setAttr_Token_EMV","","",null,null],[17,"NID_setAttr_Token_B0Prime","","",null,null],[17,"NID_setAttr_IssCap_CVM","","",null,null],[17,"NID_setAttr_IssCap_T2","","",null,null],[17,"NID_setAttr_IssCap_Sig","","",null,null],[17,"NID_setAttr_GenCryptgrm","","",null,null],[17,"NID_setAttr_T2Enc","","",null,null],[17,"NID_setAttr_T2cleartxt","","",null,null],[17,"NID_setAttr_TokICCsig","","",null,null],[17,"NID_setAttr_SecDevSig","","",null,null],[17,"NID_set_brand_IATA_ATA","","",null,null],[17,"NID_set_brand_Diners","","",null,null],[17,"NID_set_brand_AmericanExpress","","",null,null],[17,"NID_set_brand_JCB","","",null,null],[17,"NID_set_brand_Visa","","",null,null],[17,"NID_set_brand_MasterCard","","",null,null],[17,"NID_set_brand_Novus","","",null,null],[17,"NID_des_cdmf","","",null,null],[17,"NID_rsaOAEPEncryptionSET","","",null,null],[17,"NID_ipsec3","","",null,null],[17,"NID_ipsec4","","",null,null],[17,"NID_whirlpool","","",null,null],[17,"NID_cryptopro","","",null,null],[17,"NID_cryptocom","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_2001","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_94","","",null,null],[17,"NID_id_GostR3411_94","","",null,null],[17,"NID_id_HMACGostR3411_94","","",null,null],[17,"NID_id_GostR3410_2001","","",null,null],[17,"NID_id_GostR3410_94","","",null,null],[17,"NID_id_Gost28147_89","","",null,null],[17,"NID_gost89_cnt","","",null,null],[17,"NID_id_Gost28147_89_MAC","","",null,null],[17,"NID_id_GostR3411_94_prf","","",null,null],[17,"NID_id_GostR3410_2001DH","","",null,null],[17,"NID_id_GostR3410_94DH","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_KeyMeshing","","",null,null],[17,"NID_id_Gost28147_89_None_KeyMeshing","","",null,null],[17,"NID_id_GostR3411_94_TestParamSet","","",null,null],[17,"NID_id_GostR3411_94_CryptoProParamSet","","",null,null],[17,"NID_id_Gost28147_89_TestParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_D_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_TestParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_D_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchA_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchB_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchC_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_TestParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_a","","",null,null],[17,"NID_id_GostR3410_94_aBis","","",null,null],[17,"NID_id_GostR3410_94_b","","",null,null],[17,"NID_id_GostR3410_94_bBis","","",null,null],[17,"NID_id_Gost28147_89_cc","","",null,null],[17,"NID_id_GostR3410_94_cc","","",null,null],[17,"NID_id_GostR3410_2001_cc","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_94_cc","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_2001_cc","","",null,null],[17,"NID_id_GostR3410_2001_ParamSet_cc","","",null,null],[17,"NID_camellia_128_cbc","","",null,null],[17,"NID_camellia_192_cbc","","",null,null],[17,"NID_camellia_256_cbc","","",null,null],[17,"NID_id_camellia128_wrap","","",null,null],[17,"NID_id_camellia192_wrap","","",null,null],[17,"NID_id_camellia256_wrap","","",null,null],[17,"NID_camellia_128_ecb","","",null,null],[17,"NID_camellia_128_ofb128","","",null,null],[17,"NID_camellia_128_cfb128","","",null,null],[17,"NID_camellia_192_ecb","","",null,null],[17,"NID_camellia_192_ofb128","","",null,null],[17,"NID_camellia_192_cfb128","","",null,null],[17,"NID_camellia_256_ecb","","",null,null],[17,"NID_camellia_256_ofb128","","",null,null],[17,"NID_camellia_256_cfb128","","",null,null],[17,"NID_camellia_128_cfb1","","",null,null],[17,"NID_camellia_192_cfb1","","",null,null],[17,"NID_camellia_256_cfb1","","",null,null],[17,"NID_camellia_128_cfb8","","",null,null],[17,"NID_camellia_192_cfb8","","",null,null],[17,"NID_camellia_256_cfb8","","",null,null],[17,"NID_kisa","","",null,null],[17,"NID_seed_ecb","","",null,null],[17,"NID_seed_cbc","","",null,null],[17,"NID_seed_cfb128","","",null,null],[17,"NID_seed_ofb128","","",null,null],[17,"NID_hmac","","",null,null],[17,"NID_cmac","","",null,null],[17,"NID_rc4_hmac_md5","","",null,null],[17,"NID_aes_128_cbc_hmac_sha1","","",null,null],[17,"NID_aes_192_cbc_hmac_sha1","","",null,null],[17,"NID_aes_256_cbc_hmac_sha1","","",null,null],[17,"OCSP_NOCERTS","","",null,null],[17,"OCSP_NOINTERN","","",null,null],[17,"OCSP_NOSIGS","","",null,null],[17,"OCSP_NOCHAIN","","",null,null],[17,"OCSP_NOVERIFY","","",null,null],[17,"OCSP_NOEXPLICIT","","",null,null],[17,"OCSP_NOCASIGN","","",null,null],[17,"OCSP_NODELEGATED","","",null,null],[17,"OCSP_NOCHECKS","","",null,null],[17,"OCSP_TRUSTOTHER","","",null,null],[17,"OCSP_RESPID_KEY","","",null,null],[17,"OCSP_NOTIME","","",null,null],[17,"V_OCSP_CERTSTATUS_GOOD","","",null,null],[17,"V_OCSP_CERTSTATUS_REVOKED","","",null,null],[17,"V_OCSP_CERTSTATUS_UNKNOWN","","",null,null],[17,"OCSP_REVOKED_STATUS_NOSTATUS","","",null,null],[17,"OCSP_REVOKED_STATUS_UNSPECIFIED","","",null,null],[17,"OCSP_REVOKED_STATUS_KEYCOMPROMISE","","",null,null],[17,"OCSP_REVOKED_STATUS_CACOMPROMISE","","",null,null],[17,"OCSP_REVOKED_STATUS_AFFILIATIONCHANGED","","",null,null],[17,"OCSP_REVOKED_STATUS_SUPERSEDED","","",null,null],[17,"OCSP_REVOKED_STATUS_CESSATIONOFOPERATION","","",null,null],[17,"OCSP_REVOKED_STATUS_CERTIFICATEHOLD","","",null,null],[17,"OCSP_REVOKED_STATUS_REMOVEFROMCRL","","",null,null],[17,"OCSP_RESPONSE_STATUS_SUCCESSFUL","","",null,null],[17,"OCSP_RESPONSE_STATUS_MALFORMEDREQUEST","","",null,null],[17,"OCSP_RESPONSE_STATUS_INTERNALERROR","","",null,null],[17,"OCSP_RESPONSE_STATUS_TRYLATER","","",null,null],[17,"OCSP_RESPONSE_STATUS_SIGREQUIRED","","",null,null],[17,"OCSP_RESPONSE_STATUS_UNAUTHORIZED","","",null,null],[17,"OPENSSL_EC_NAMED_CURVE","","",null,null],[17,"PKCS5_SALT_LEN","","",null,null],[17,"PKCS12_DEFAULT_ITER","","",null,null],[17,"RSA_F4","","",null,null],[17,"RSA_PKCS1_PADDING","","",null,null],[17,"RSA_SSLV23_PADDING","","",null,null],[17,"RSA_NO_PADDING","","",null,null],[17,"RSA_PKCS1_OAEP_PADDING","","",null,null],[17,"RSA_X931_PADDING","","",null,null],[17,"RSA_PKCS1_PSS_PADDING","","",null,null],[17,"SHA_LBLOCK","","",null,null],[17,"SSL3_AD_ILLEGAL_PARAMETER","","",null,null],[17,"SSL_AD_ILLEGAL_PARAMETER","","",null,null],[17,"TLS1_AD_DECODE_ERROR","","",null,null],[17,"SSL_AD_DECODE_ERROR","","",null,null],[17,"TLS1_AD_UNRECOGNIZED_NAME","","",null,null],[17,"SSL_AD_UNRECOGNIZED_NAME","","",null,null],[17,"SSL_CTRL_SET_TMP_DH","","",null,null],[17,"SSL_CTRL_SET_TMP_ECDH","","",null,null],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",null,null],[17,"SSL_CTRL_MODE","","",null,null],[17,"SSL_CTRL_SET_READ_AHEAD","","",null,null],[17,"SSL_CTRL_SET_SESS_CACHE_MODE","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE","","",null,null],[17,"SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP","","",null,null],[17,"SSL_CTRL_GET_EXTRA_CHAIN_CERTS","","",null,null],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",null,null],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",null,null],[17,"SSL_MODE_AUTO_RETRY","","",null,null],[17,"SSL_MODE_NO_AUTO_CHAIN","","",null,null],[17,"SSL_MODE_RELEASE_BUFFERS","","",null,null],[17,"SSL_ERROR_NONE","","",null,null],[17,"SSL_ERROR_SSL","","",null,null],[17,"SSL_ERROR_SYSCALL","","",null,null],[17,"SSL_ERROR_WANT_ACCEPT","","",null,null],[17,"SSL_ERROR_WANT_CONNECT","","",null,null],[17,"SSL_ERROR_WANT_READ","","",null,null],[17,"SSL_ERROR_WANT_WRITE","","",null,null],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",null,null],[17,"SSL_ERROR_ZERO_RETURN","","",null,null],[17,"SSL_VERIFY_NONE","","",null,null],[17,"SSL_VERIFY_PEER","","",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_TLSv1","","",null,null],[17,"SSL_OP_NO_TLSv1_1","","",null,null],[17,"SSL_OP_NO_TLSv1_2","","",null,null],[17,"SSL_OP_NO_SSL_MASK","","",null,null],[17,"SSL_FILETYPE_PEM","","",null,null],[17,"SSL_FILETYPE_ASN1","","",null,null],[17,"SSL_SESS_CACHE_OFF","","",null,null],[17,"SSL_SESS_CACHE_CLIENT","","",null,null],[17,"SSL_SESS_CACHE_SERVER","","",null,null],[17,"SSL_SESS_CACHE_BOTH","","",null,null],[17,"SSL_SESS_CACHE_NO_AUTO_CLEAR","","",null,null],[17,"SSL_SESS_CACHE_NO_INTERNAL_LOOKUP","","",null,null],[17,"SSL_SESS_CACHE_NO_INTERNAL_STORE","","",null,null],[17,"SSL_SESS_CACHE_NO_INTERNAL","","",null,null],[17,"SSL3_VERSION","","",null,null],[17,"TLS1_VERSION","","",null,null],[17,"TLS1_1_VERSION","","",null,null],[17,"TLS1_2_VERSION","","",null,null],[17,"TLSEXT_NAMETYPE_host_name","","",null,null],[17,"TLSEXT_STATUSTYPE_ocsp","","",null,null],[17,"SSL_TLSEXT_ERR_OK","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",null,null],[17,"SSL_TLSEXT_ERR_NOACK","","",null,null],[17,"OPENSSL_NPN_UNSUPPORTED","","",null,null],[17,"OPENSSL_NPN_NEGOTIATED","","",null,null],[17,"OPENSSL_NPN_NO_OVERLAP","","",null,null],[17,"V_ASN1_GENERALIZEDTIME","","",null,null],[17,"V_ASN1_UTCTIME","","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[17,"X509_FILETYPE_PEM","","",null,null],[17,"X509_V_OK","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",null,null],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_OUT_OF_MEM","","",null,null],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",null,null],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",null,null],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",null,null],[17,"X509_V_ERR_CERT_REVOKED","","",null,null],[17,"X509_V_ERR_INVALID_CA","","",null,null],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_INVALID_PURPOSE","","",null,null],[17,"X509_V_ERR_CERT_UNTRUSTED","","",null,null],[17,"X509_V_ERR_CERT_REJECTED","","",null,null],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_NON_CA","","",null,null],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",null,null],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_INVALID_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",null,null],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",null,null],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",null,null],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",null,null],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",null,null],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",null,null],[17,"X509_V_ERR_SUBTREE_MINMAX","","",null,null],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",null,null],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",null,null],[17,"X509_V_ERR_SUITE_B_INVALID_VERSION","","",null,null],[17,"X509_V_ERR_SUITE_B_INVALID_ALGORITHM","","",null,null],[17,"X509_V_ERR_SUITE_B_INVALID_CURVE","","",null,null],[17,"X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM","","",null,null],[17,"X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256","","",null,null],[17,"X509_V_ERR_HOSTNAME_MISMATCH","","",null,null],[17,"X509_V_ERR_EMAIL_MISMATCH","","",null,null],[17,"X509_V_ERR_IP_ADDRESS_MISMATCH","","",null,null],[17,"X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT","","",null,null],[17,"X509_CHECK_FLAG_NO_WILDCARDS","","",null,null],[17,"X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS","","",null,null],[17,"X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS","","",null,null],[17,"X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS","","",null,null],[17,"GEN_OTHERNAME","","",null,null],[17,"GEN_EMAIL","","",null,null],[17,"GEN_DNS","","",null,null],[17,"GEN_X400","","",null,null],[17,"GEN_DIRNAME","","",null,null],[17,"GEN_EDIPARTY","","",null,null],[17,"GEN_URI","","",null,null],[17,"GEN_IPADD","","",null,null],[17,"GEN_RID","","",null,null],[17,"DTLS1_COOKIE_LENGTH","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"point_conversion_form_t"}}]],"paths":[[3,"GENERAL_NAME"],[3,"SHA_CTX"],[3,"SHA256_CTX"],[3,"SHA512_CTX"],[4,"point_conversion_form_t"]]};
searchIndex["percent_encoding"] = {"doc":"URLs use special chacters to indicate the parts of the request.  For example, a forward slash indicates a path.  In order for that charcter to exist outside of a path separator, that charcter would need to be encoded.","items":[[3,"SIMPLE_ENCODE_SET","percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"size_hint","","",7,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",7,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",7,{"inputs":[{"name":"self"}],"output":{"generics":["cow","utf8error"],"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"cow"}}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"]]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"self"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given key.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered map.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns references to both the key and values at an index within the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given key.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize the ordered set.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["usize"],"name":"option"}}],[11,"index","","Returns a reference to the key at an index within the list used to initialize the ordered set. See `.get_index(key)`.",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"self"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["prettytable"] = {"doc":"A formatted and aligned table printer written in rust","items":[[4,"Attr","prettytable","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[0,"color","","Terminal color definitions",null,null],[6,"Color","prettytable::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[3,"Table","prettytable","An owned printable table",null,null],[3,"TableSlice","","A borrowed immutable `Table` slice A `TableSlice` is obtained by slicing a `Table` with the `Slice::slice` method.",null,null],[3,"ColumnIter","","Iterator over immutable cells in a column",null,null],[3,"ColumnIterMut","","Iterator over mutable cells in a column",null,null],[0,"cell","","This module contains definition of table/row cells stuff",null,null],[3,"Cell","prettytable::cell","Represent a table cell containing a string.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"cell"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"new_align","","Create a new `Cell` initialized with content from `string`. Text alignment in cell is configurable with the `align` argument",1,{"inputs":[{"name":"str"},{"name":"alignment"}],"output":{"name":"cell"}}],[11,"new","","Create a new `Cell` initialized with content from `string`. By default, content is align to `LEFT`",1,{"inputs":[{"name":"str"}],"output":{"name":"cell"}}],[11,"align","","Set text alignment in the cell",1,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":null}],[11,"style","","Add a style attribute to the cell",1,{"inputs":[{"name":"self"},{"name":"attr"}],"output":null}],[11,"with_style","","Add a style attribute to the cell. Can be chained",1,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"cell"}}],[11,"reset_style","","Remove all style attributes and reset alignment to default (LEFT)",1,{"inputs":[{"name":"self"}],"output":null}],[11,"style_spec","","Set the cell's style by applying the given specifier string",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"cell"}}],[11,"get_height","","Return the height of the cell",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_width","","Return the width of the cell",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_content","","Return a copy of the full string contained in the cell",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"print","","Print a partial cell to `out`. Since the cell may be multi-lined, `idx` is the line index to print. `col_width` is the column width used to fill the cells with blanks so it fits in the table. If `ìdx` is higher than this cell's height, it will print empty content",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_term","","Apply style then call `print` to print the cell into a terminal",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"to_string","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","Return a cell initialized with a single empty `String`, with LEFT alignment",1,{"inputs":[],"output":{"name":"cell"}}],[0,"row","prettytable","This module contains definition of table rows stuff",null,null],[3,"Row","prettytable::row","Represent a table row made of cells",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Row` backed with `cells` vector",2,{"inputs":[{"generics":["cell"],"name":"vec"}],"output":{"name":"row"}}],[11,"empty","","Create an row of length `size`, with empty strings stored",2,{"inputs":[],"output":{"name":"row"}}],[11,"len","","Get the number of cells in this row",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Check if the row is empty (has no cell)",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_height","","Get the height of this row",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_cell_width","","Get the minimum width required by the cell in the column `column`. Return 0 if the cell does not exist in this row",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_cell","","Get the cell at index `idx`",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cell"],"name":"option"}}],[11,"get_mut_cell","","Get the mutable cell at index `idx`",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cell"],"name":"option"}}],[11,"set_cell","","Set the `cell` in the row at the given `column`",2,{"inputs":[{"name":"self"},{"name":"cell"},{"name":"usize"}],"output":{"generics":["str"],"name":"result"}}],[11,"add_cell","","Append a `cell` at the end of the row",2,{"inputs":[{"name":"self"},{"name":"cell"}],"output":null}],[11,"insert_cell","","Insert `cell` at position `index`. If `index` is higher than the row length, the cell will be appended at the end",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"cell"}],"output":null}],[11,"remove_cell","","Remove the cell at position `index`. Silently skip if this cell does not exist",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"iter","","Returns an immutable iterator over cells",2,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"iter"}}],[11,"iter_mut","","Returns an mutable iterator over cells",2,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"itermut"}}],[11,"print","","Print the row to `out`, with `separator` as column separator, and `col_width` specifying the width of each columns",2,null],[11,"print_term","","Print the row to terminal `out`, with `separator` as column separator, and `col_width` specifying the width of each columns. Apply style when needed",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"row"}}],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"from_iter","","",2,{"inputs":[{"name":"t"}],"output":{"name":"row"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"row"}}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[0,"format","prettytable","Define table formatting utilities",null,null],[3,"LineSeparator","prettytable::format","Contains the character used for printing a line separator",null,null],[3,"TableFormat","","Contains the table formatting rules",null,null],[3,"FormatBuilder","","A builder to create a `TableFormat`",null,null],[4,"Alignment","","Alignment for cell's content",null,null],[13,"LEFT","","Align left",3,null],[13,"CENTER","","Align in the center",3,null],[13,"RIGHT","","Align right",3,null],[4,"LinePosition","","Position of a line separator in a table",null,null],[13,"Top","","Table's border on top",4,null],[13,"Title","","Line separator between the titles row, and the first data row",4,null],[13,"Intern","","Line separator between data rows",4,null],[13,"Bottom","","Bottom table's border",4,null],[4,"ColumnPosition","","Position of a column separator in a row",null,null],[13,"Left","","Left table's border",5,null],[13,"Intern","","Internal column separators",5,null],[13,"Right","","Rigth table's border",5,null],[0,"consts","","Predifined formats. Those constants are lazily evaluated when the corresponding struct is dereferenced",null,null],[3,"FORMAT_DEFAULT","prettytable::format::consts","Default table format",null,null],[3,"FORMAT_NO_TITLE","","Similar to `FORMAT_DEFAULT` but without special separator after title line",null,null],[3,"FORMAT_NO_LINESEP_WITH_TITLE","","With no line separator, but with title separator",null,null],[3,"FORMAT_NO_LINESEP","","With no line or title separator",null,null],[3,"FORMAT_NO_COLSEP","","No column separator",null,null],[3,"FORMAT_CLEAN","","Format for printing a table without any separators (only alignment)",null,null],[3,"FORMAT_BORDERS_ONLY","","Format for a table with only external borders and title separator",null,null],[3,"FORMAT_NO_BORDER","","A table with no external border",null,null],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR","","A table with no external border and no line separation",null,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"initialize","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","prettytable::format","",3,{"inputs":[{"name":"self"}],"output":{"name":"alignment"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lineposition"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lineposition"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"columnposition"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"columnposition"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"lineseparator"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"lineseparator"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"lineseparator"}],"output":{"name":"bool"}}],[11,"new","","Create a new line separator instance where `line` is the character used to separate 2 lines and `junc` is the one used for junctions between columns and lines",15,{"inputs":[{"name":"char"},{"name":"char"},{"name":"char"},{"name":"char"}],"output":{"name":"lineseparator"}}],[11,"print","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"tableformat"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"tableformat"}],"output":{"name":"bool"}}],[11,"new","","Create a new empty TableFormat.",16,{"inputs":[],"output":{"name":"tableformat"}}],[11,"get_padding","","Return a tuple with left and right padding",16,null],[11,"padding","","Set left and right padding",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"column_separator","","Set the character used for internal column separation",16,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"borders","","Set the character used for table borders",16,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"separator","","Set a line separator",16,{"inputs":[{"name":"self"},{"name":"lineposition"},{"name":"lineseparator"}],"output":null}],[11,"separators","","Set format for multiple kind of line separator",16,null],[11,"indent","","Set global indentation in spaces used when rendering a table",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"get_indent","","Get global indentation in spaces used when rendering a table",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"print_line_separator","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",16,null],[11,"get_column_separator","","Returns the character used to separate columns. `pos` specify if the separator is left/right final or internal to the table",16,{"inputs":[{"name":"self"},{"name":"columnposition"}],"output":{"generics":["char"],"name":"option"}}],[11,"print_column_separator","","Print a column separator or a table border",16,{"inputs":[{"name":"self"},{"name":"t"},{"name":"columnposition"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new builder",17,{"inputs":[],"output":{"name":"formatbuilder"}}],[11,"padding","","Set left and right padding",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"column_separator","","Set the character used for internal column separation",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"self"}}],[11,"borders","","Set the character used for table borders",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"self"}}],[11,"separator","","Set a line separator format",17,{"inputs":[{"name":"self"},{"name":"lineposition"},{"name":"lineseparator"}],"output":{"name":"self"}}],[11,"separators","","Set separator format for multiple kind of line separators",17,null],[11,"indent","","Set global indentation in spaces used when rendering a table",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Return the generated `TableFormat`",17,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"into","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"from","","",17,{"inputs":[{"name":"tableformat"}],"output":{"name":"self"}}],[8,"Slice","prettytable","Trait implemented by types which can be sliced",null,null],[16,"Output","","Type output after slicing",18,null],[10,"slice","","Get a slice from self",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"table"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"table"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"tableslice"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"tableslice"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"tableslice"}],"output":{"name":"bool"}}],[11,"get_column_num","","Compute and return the number of column",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Check if the table slice is empty",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_row","","Get an immutable reference to a row",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"option"}}],[11,"column_iter","","Returns an iterator over the immutable cells of the column specified by `column`",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"row_iter","","Returns an iterator over immutable rows",20,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"iter"}}],[11,"print","","Print the table to `out`",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal, or `force_colorize` is set to `true`. In ANSI terminals, colors are displayed using ANSI escape characters. When for example the output is redirected to a file, or piped to another program, the output is considered as not beeing tty, and ANSI escape characters won't be displayed unless `force colorize` is set to `true`. # Panic Panic if writing to standard output fails",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal. This means that if stdout is redirected to a file, or piped to another program, no color will be displayed. To force colors rendering, use `print_tty()` method. Calling `printstd()` is equivalent to calling `print_tty(false)` # Panic Panic if writing to standard output fails",20,{"inputs":[{"name":"self"}],"output":null}],[11,"to_csv","","Write the table to the specified writer.",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["writer"],"name":"result"}}],[11,"to_csv_writer","","Write the table to the specified writer.",20,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"generics":["writer"],"name":"result"}}],[11,"new","","Create an empty table",19,{"inputs":[],"output":{"name":"table"}}],[11,"init","","Create a table initialized with `rows`",19,{"inputs":[{"generics":["row"],"name":"vec"}],"output":{"name":"table"}}],[11,"from_csv_string","","Create a table from a CSV string",19,{"inputs":[{"name":"str"}],"output":{"generics":["table"],"name":"result"}}],[11,"from_csv_file","","Create a table from a CSV file",19,{"inputs":[{"name":"p"}],"output":{"generics":["table"],"name":"result"}}],[11,"from_csv","","Create a table from a CSV reader",19,{"inputs":[{"name":"reader"}],"output":{"name":"table"}}],[11,"set_format","","Change the table format. Eg : Separators",19,{"inputs":[{"name":"self"},{"name":"tableformat"}],"output":null}],[11,"get_format","","Get a mutable reference to the internal format",19,{"inputs":[{"name":"self"}],"output":{"name":"tableformat"}}],[11,"get_column_num","","Compute and return the number of column",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Check if the table is empty",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_titles","","Set the optional title lines",19,{"inputs":[{"name":"self"},{"name":"row"}],"output":null}],[11,"unset_titles","","Unset the title line",19,{"inputs":[{"name":"self"}],"output":null}],[11,"get_mut_row","","Get a mutable reference to a row",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"option"}}],[11,"get_row","","Get an immutable reference to a row",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"option"}}],[11,"add_row","","Append a row in the table, transferring ownership of this row to the table and returning a mutable reference to the row",19,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"row"}}],[11,"add_empty_row","","Append an empty row in the table. Return a mutable reference to this new row.",19,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"insert_row","","Insert `row` at the position `index`, and return a mutable reference to this row. If index is higher than current numbers of rows, `row` is appended at the end of the table",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"row"}],"output":{"name":"row"}}],[11,"set_element","","Modify a single element in the table",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["str"],"name":"result"}}],[11,"remove_row","","Remove the row at position `index`. Silently skip if the row does not exist",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"column_iter","","Return an iterator over the immutable cells of the column specified by `column`",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"column_iter_mut","","Return an iterator over the mutable cells of the column specified by `column`",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columnitermut"}}],[11,"row_iter","","Returns an iterator over immutable rows",19,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"iter"}}],[11,"row_iter_mut","","Returns an iterator over mutable rows",19,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"itermut"}}],[11,"print","","Print the table to `out`",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal, or `force_colorize` is set to `true`. In ANSI terminals, colors are displayed using ANSI escape characters. When for example the output is redirected to a file, or piped to another program, the output is considered as not beeing tty, and ANSI escape characters won't be displayed unless `force colorize` is set to `true`. # Panic Panic if writing to standard output fails",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won't be displayed unless stdout is a tty terminal. This means that if stdout is redirected to a file, or piped to another program, no color will be displayed. To force colors rendering, use `print_tty()` method. Calling `printstd()` is equivalent to calling `print_tty(false)` # Panic Panic if writing to standard output fails",19,{"inputs":[{"name":"self"}],"output":null}],[11,"to_csv","","Write the table to the specified writer.",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["writer"],"name":"result"}}],[11,"to_csv_writer","","Write the table to the specified writer.",19,{"inputs":[{"name":"self"},{"name":"writer"}],"output":{"generics":["writer"],"name":"result"}}],[11,"index","","",19,null],[11,"index","","",20,null],[11,"index_mut","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","","",19,{"inputs":[{"name":"t"}],"output":{"name":"table"}}],[11,"from_iter","","",19,{"inputs":[{"name":"t"}],"output":{"name":"table"}}],[11,"from","","",19,{"inputs":[{"name":"t"}],"output":{"name":"table"}}],[11,"extend","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["cell"],"name":"option"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"tableslice"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"tableslice"}}],[14,"cell","","This macro simplifies `Cell` creation",null,null],[14,"row","","This macro simplifies `Row` creation",null,null],[14,"table","","Create a table filled with some values",null,null],[14,"ptable","","Create a table with `table!` macro, print it to standard output, then return this table for future usage.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"Attr"],[3,"Cell"],[3,"Row"],[4,"Alignment"],[4,"LinePosition"],[4,"ColumnPosition"],[3,"FORMAT_DEFAULT"],[3,"FORMAT_NO_TITLE"],[3,"FORMAT_NO_LINESEP_WITH_TITLE"],[3,"FORMAT_NO_LINESEP"],[3,"FORMAT_NO_COLSEP"],[3,"FORMAT_CLEAN"],[3,"FORMAT_BORDERS_ONLY"],[3,"FORMAT_NO_BORDER"],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR"],[3,"LineSeparator"],[3,"TableFormat"],[3,"FormatBuilder"],[8,"Slice"],[3,"Table"],[3,"TableSlice"],[3,"ColumnIter"],[3,"ColumnIterMut"]]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a sequence of token trees.",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion information.",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`, `-` or `#`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number (`2.3`), etc.",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type, such as iterators.",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["tokentree"],"n":"option"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_iter","proc_macro2","",4,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"new","","Returns an empty `TokenStream` containing no token trees.",4,{"o":{"n":"tokenstream"}}],[11,"empty","","",4,{"o":{"n":"tokenstream"}}],[11,"is_empty","","Checks if this `TokenStream` is empty.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from_str","","",4,{"i":[{"n":"str"}],"o":{"g":["tokenstream","lexerror"],"n":"result"}}],[11,"from","","",4,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[11,"extend","","",4,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",4,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"call_site","","The span of the invocation of the current procedural macro.",6,{"o":{"n":"span"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"tokentree"}}],[11,"span","","Returns the span of this tree, delegating to the `span` method of the contained token or a delimited stream.",0,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for only this token.",0,{"i":[{"n":"self"},{"n":"span"}]}],[11,"from","","",0,{"i":[{"n":"group"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"ident"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"punct"}],"o":{"n":"tokentree"}}],[11,"from","","",0,{"i":[{"n":"literal"}],"o":{"n":"tokentree"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Group` with the given delimiter and token stream.",7,{"i":[{"n":"delimiter"},{"n":"tokenstream"}],"o":{"n":"group"}}],[11,"delimiter","","Returns the delimiter of this `Group`",7,{"i":[{"n":"self"}],"o":{"n":"delimiter"}}],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in this `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"span","","Returns the span for the delimiters of this token stream, spanning the entire `Group`.",7,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not its internal tokens.",7,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"punct"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"spacing"}],"o":{"n":"bool"}}],[11,"new","","Creates a new `Punct` from the given character and spacing.",8,{"i":[{"n":"char"},{"n":"spacing"}],"o":{"n":"punct"}}],[11,"as_char","","Returns the value of this punctuation character as `char`.",8,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"spacing","","Returns the spacing of this punctuation character, indicating whether it's immediately followed by another `Punct` in the token stream, so they can potentially be combined into a multicharacter operator (`Joint`), or it's followed by some other token or whitespace (`Alone`) so the operator has certainly ended.",8,{"i":[{"n":"self"}],"o":{"n":"spacing"}}],[11,"span","","Returns the span for this punctuation character.",8,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configure the span for this punctuation character.",8,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",9,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",9,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",9,{"i":[{"n":"self"},{"n":"span"}]}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",9,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"hash","","",9,{"i":[{"n":"self"},{"n":"h"}]}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"literal"}}],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u8"}],"o":{"n":"literal"}}],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u16"}],"o":{"n":"literal"}}],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u32"}],"o":{"n":"literal"}}],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"u64"}],"o":{"n":"literal"}}],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"usize"}],"o":{"n":"literal"}}],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i8"}],"o":{"n":"literal"}}],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i16"}],"o":{"n":"literal"}}],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i32"}],"o":{"n":"literal"}}],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"i64"}],"o":{"n":"literal"}}],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the specified value.",10,{"i":[{"n":"isize"}],"o":{"n":"literal"}}],[11,"f64_unsuffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f64_suffixed","","",10,{"i":[{"n":"f64"}],"o":{"n":"literal"}}],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"f32_suffixed","","",10,{"i":[{"n":"f32"}],"o":{"n":"literal"}}],[11,"string","","",10,{"i":[{"n":"str"}],"o":{"n":"literal"}}],[11,"character","","",10,{"i":[{"n":"char"}],"o":{"n":"literal"}}],[11,"byte_string","","",10,null],[11,"span","","",10,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",10,{"i":[{"n":"self"},{"n":"span"}]}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"IntoIter"],[3,"TokenStream"],[3,"LexError"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending tokens.",null,null],[10,"append","","",0,{"i":[{"n":"self"},{"n":"u"}]}],[10,"append_all","","",0,{"i":[{"n":"self"},{"n":"i"}]}],[10,"append_separated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[10,"append_terminated","","",0,{"i":[{"n":"self"},{"n":"i"},{"n":"u"}]}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",1,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}]],"paths":[[8,"TokenStreamExt"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"OsRng","rand","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",0,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",1,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",2,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",2,null],[11,"gen","","Return a random value of a `Rand` type.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",2,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",2,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",2,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",2,null],[11,"shuffle","","Shuffle a mutable slice in place.",2,null],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",3,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",4,null],[10,"from_seed","","Create a new RNG with the given seed.",4,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",5,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",6,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"Range","rand::distributions","Sample values uniformly between two bounds.",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",7,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",9,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",12,null],[12,"item","","The actual item which is being weighted",12,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[11,"new","rand::os","Create a new `OsRng`.",13,{"inputs":[],"output":{"generics":["osrng","error"],"name":"result"}}],[11,"reseed","rand::reseeding","",14,null],[11,"clone","rand::distributions","",12,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"clone","rand::distributions::gamma","",15,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"clone","rand::chacha","",16,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"clone","rand::distributions","",17,{"inputs":[{"name":"self"}],"output":{"name":"randsample"}}],[11,"clone","rand::distributions::normal","",18,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"clone","rand::distributions::gamma","",19,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"clone","rand::distributions::normal","",8,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"clone","rand::distributions::gamma","",20,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"clone","rand::isaac","",21,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"clone","rand","",22,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"clone","rand::reseeding","",14,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"clone","rand::distributions::normal","",23,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"clone","rand::distributions::gamma","",24,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"clone","rand::distributions::range","",25,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","rand","",26,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"clone","rand::isaac","",27,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"clone","rand::distributions::exponential","",28,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"clone","rand","",29,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"clone","rand::distributions::exponential","",9,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"next_u32","rand::chacha","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_u32","rand::reseeding","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",0,null],[11,"next_u32","rand::isaac","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","rand::read","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",30,null],[11,"next_u32","rand::os","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",13,null],[11,"next_u32","rand","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u32","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",29,null],[11,"ind_sample","rand::distributions::gamma","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::range","",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions::gamma","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::normal","",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","rand::distributions::gamma","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","rand::distributions::exponential","",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","rand::distributions::normal","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"rand","rand","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","rand::distributions::normal","",8,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"rand","rand::distributions::exponential","",9,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"rand","rand","",5,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","rand::chacha","",16,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"rand","rand::isaac","",27,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"rand","rand","",22,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[11,"rand","rand::isaac","",21,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"next","rand","",32,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","rand::isaac","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::isaac","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::reseeding","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::chacha","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::exponential","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::exponential","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::read","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::normal","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::gamma","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::os","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","rand::distributions::range","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","rand::reseeding","",14,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"sample","rand::distributions::gamma","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::exponential","",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::normal","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::gamma","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions","",31,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"sample","rand::distributions::range","",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"reseed","rand::chacha","",16,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",16,null],[11,"reseed","rand::isaac","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"reseed","rand::reseeding","",0,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",0,null],[11,"reseed","rand","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",22,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",22,null],[11,"reseed","rand::isaac","",21,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",21,null],[11,"reseed","rand","",26,null],[11,"from_seed","","",26,null],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default fixed seed.",21,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"new_unseeded","rand::chacha","Create an ChaCha random number generator using the default fixed key of 8 zero words.",16,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",16,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",0,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",0,null],[11,"new","rand::read","Create a new `ReadRng` from a `Read`.",30,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"new_unseeded","rand","Creates a new XorShiftRng instance which is not seeded.",22,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",26,{"inputs":[],"output":{"generics":["stdrng","error"],"name":"result"}}],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",25,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)` distribution.",19,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",20,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",15,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",24,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"new","rand::distributions::normal","Construct a new `Normal` distribution with the given mean and standard deviation.",23,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",18,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"new","rand::distributions::exponential","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",28,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"new","rand::distributions","",17,{"inputs":[],"output":{"name":"randsample"}}],[11,"new","","Create a new `WeightedChoice`.",31,null]],"paths":[[3,"ReseedingRng"],[8,"Reseeder"],[8,"Rng"],[8,"Rand"],[8,"SeedableRng"],[3,"Open01"],[3,"Closed01"],[8,"SampleRange"],[3,"StandardNormal"],[3,"Exp1"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[3,"OsRng"],[3,"ReseedWithDefault"],[3,"FisherF"],[3,"ChaChaRng"],[3,"RandSample"],[3,"LogNormal"],[3,"Gamma"],[3,"ChiSquared"],[3,"IsaacRng"],[3,"XorShiftRng"],[3,"Normal"],[3,"StudentT"],[3,"Range"],[3,"StdRng"],[3,"Isaac64Rng"],[3,"Exp"],[3,"ThreadRng"],[3,"ReadRng"],[3,"WeightedChoice"],[3,"AsciiGenerator"],[3,"Generator"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"clone","regex","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"nest_limit","","Set the nesting limit for this parser.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace_append","","",17,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",18,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",18,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",18,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",19,null],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",22,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",22,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",22,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",22,null],[11,"len","","Returns the total number of regular expressions in this set.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",23,null],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",25,null],[11,"next_back","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",26,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",27,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",27,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",27,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",27,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",27,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",28,null],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",31,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `replacement` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",31,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace_append","","",35,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",36,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",36,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",36,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"replacerref"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[4,"Error","","This error type encompasses any error that can be returned by this crate.",null,null],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,null],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",null,{"inputs":[{"name":"str"},{"name":"string"}],"output":null}],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",null,null],[3,"Span","","Span represents the position information of a single AST item.",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,null],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,null],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,null],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string may be empty.",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"ast"},{"name":"v"}],"output":{"name":"result"}}],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",42,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",42,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",43,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ast","error"],"name":"result"}}],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["withcomments","error"],"name":"result"}}],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",44,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,{"inputs":[{"name":"self"},{"name":"ast"},{"name":"w"}],"output":{"name":"result"}}],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",46,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",46,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,{"inputs":[{"name":"self"}],"output":{"generics":["span"],"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new span with the given positions.",1,{"inputs":[{"name":"position"},{"name":"position"}],"output":{"name":"span"}}],[11,"splat","","Create a new span using the given position as the start and end.",1,{"inputs":[{"name":"position"}],"output":{"name":"span"}}],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"span"}}],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new position with the given information.",2,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"position"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"withcomments"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"withcomments"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this abstract syntax tree.",24,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"is_empty","","Return true if and only if this Ast is empty.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"alternation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"alternation"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this alternation as an AST.",5,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"concat"}],"output":{"name":"bool"}}],[11,"into_ast","","Return this concatenation as an AST.",6,{"inputs":[{"name":"self"}],"output":{"name":"ast"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"literalkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"literalkind"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"specialliteralkind"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"specialliteralkind"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hexliteralkind"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"hexliteralkind"}],"output":{"name":"bool"}}],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class.",28,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"classperl"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"classperl"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"classperlkind"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"classperlkind"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"classascii"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"classascii"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"classasciikind"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"classasciikind"}],"output":{"name":"bool"}}],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,{"inputs":[{"name":"str"}],"output":{"generics":["classasciikind"],"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if this class has been negated.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"classunicodekind"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"classunicodekind"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeopkind"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"classunicodeopkind"}],"output":{"name":"bool"}}],[11,"is_equal","","Whether the op is an equality op or not.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"classbracketed"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"classbracketed"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"classset"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"classset"}],"output":{"name":"bool"}}],[11,"union","","Build a set from a union.",33,{"inputs":[{"name":"classsetunion"}],"output":{"name":"classset"}}],[11,"span","","Return the span of this character class set.",33,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"bool"}}],[11,"span","","Return the span of this character class set item.",34,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"classsetrange"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"classsetrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetunion"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"classsetunion"}],"output":{"name":"bool"}}],[11,"push","","Push a new item in this union.",13,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":null}],[11,"into_item","","Return this union as a character class set item.",13,{"inputs":[{"name":"self"}],"output":{"name":"classsetitem"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryop"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"classsetbinaryopkind"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"classsetbinaryopkind"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"assertion"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"assertion"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"assertionkind"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"assertionkind"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repetitionop"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"repetitionop"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,{"inputs":[{"name":"self"}],"output":{"generics":["flags"],"name":"option"}}],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"capturename"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"capturename"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setflags"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"setflags"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"add_item","","Add the given item to this sequence of flags.",21,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"generics":["usize"],"name":"option"}}],[11,"flag_state","","Returns the state of the given flag in this set.",21,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"generics":["bool"],"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"flagsitem"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"flagsitem"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"flagsitemkind"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"flagsitemkind"}],"output":{"name":"bool"}}],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",null,null],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,null],[12,"hir","","The expression inside the capturing group, which may be empty.",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,null],[13,"Literal","","A single literal character that matches exactly this character.",50,null],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child expression.",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character class.",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,null],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",null,{"inputs":[{"name":"hir"},{"name":"v"}],"output":{"name":"result"}}],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",null,null],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",58,{"inputs":[],"output":{"name":"literals"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,{"inputs":[{"name":"hir"}],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,null],[11,"min_len","","Returns the length of the smallest literal.",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",58,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,null],[11,"add","","Adds the given literal to this set.",58,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",59,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"literal"}}],[11,"empty","","Returns a new complete empty literal.",59,{"inputs":[],"output":{"name":"literal"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",59,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,null],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",null,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new printer.",60,{"inputs":[],"output":{"name":"printer"}}],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,{"inputs":[{"name":"self"},{"name":"hir"},{"name":"w"}],"output":{"name":"result"}}],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"translatorbuilder"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"new","","Create a new translator builder with a default c onfiguration.",61,{"inputs":[],"output":{"name":"translatorbuilder"}}],[11,"build","","Build a translator using the current configuration.",61,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"translatorbuilder"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"translator"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new translator using the default configuration.",62,{"inputs":[],"output":{"name":"translator"}}],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,{"inputs":[{"name":"self"},{"name":"str"},{"name":"ast"}],"output":{"generics":["hir","error"],"name":"result"}}],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"start","","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"kind","","Return the type of this error.",64,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"pattern","","The original pattern string in which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"span","","Return the span at which this error occurred.",64,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"description","","",64,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"hir"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"hirkind"}],"output":{"name":"bool"}}],[11,"kind","","Returns a reference to the underlying HIR kind.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,{"inputs":[{"name":"self"}],"output":{"name":"hirkind"}}],[11,"empty","","Returns an empty HIR expression.",65,{"inputs":[],"output":{"name":"hir"}}],[11,"literal","","Creates a literal HIR expression.",65,{"inputs":[{"name":"literal"}],"output":{"name":"hir"}}],[11,"class","","Creates a class HIR expression.",65,{"inputs":[{"name":"class"}],"output":{"name":"hir"}}],[11,"anchor","","Creates an anchor assertion HIR expression.",65,{"inputs":[{"name":"anchor"}],"output":{"name":"hir"}}],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,{"inputs":[{"name":"wordboundary"}],"output":{"name":"hir"}}],[11,"repetition","","Creates a repetition HIR expression.",65,{"inputs":[{"name":"repetition"}],"output":{"name":"hir"}}],[11,"group","","Creates a group HIR expression.",65,{"inputs":[{"name":"group"}],"output":{"name":"hir"}}],[11,"concat","","Returns the concatenation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"alternation","","Returns the alternation of the given expressions.",65,{"inputs":[{"generics":["hir"],"name":"vec"}],"output":{"name":"hir"}}],[11,"dot","","Build an HIR expression for `.`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"any","","Build an HIR expression for `(?s).`.",65,{"inputs":[{"name":"bool"}],"output":{"name":"hir"}}],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"literal"}],"output":{"name":"bool"}}],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"class"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"class"}],"output":{"name":"bool"}}],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class in place.",52,{"inputs":[{"name":"self"}],"output":null}],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicode"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",66,{"inputs":[{"name":"i"}],"output":{"name":"classunicode"}}],[11,"empty","","Create a new class with no ranges.",66,{"inputs":[],"output":{"name":"classunicode"}}],[11,"push","","Add a new range to this set.",66,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",66,{"inputs":[{"name":"self"}],"output":{"name":"classunicodeiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",66,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this character class.",66,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"intersect","","Intersect this character class with the given character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"difference","","Subtract the given character class from this character class, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,{"inputs":[{"name":"self"},{"name":"classunicode"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["classunicoderange"],"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"classunicoderange"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"classunicoderange"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"le","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"gt","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"ge","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"bool"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"classunicoderange"}],"output":{"name":"ordering"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Unicode scalar value range for a character class.",68,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"classunicoderange"}}],[11,"start","","Return the start of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"end","","Return the end of this range.",68,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytes"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":{"name":"bool"}}],[11,"new","","Create a new class from a sequence of ranges.",69,{"inputs":[{"name":"i"}],"output":{"name":"classbytes"}}],[11,"empty","","Create a new class with no ranges.",69,{"inputs":[],"output":{"name":"classbytes"}}],[11,"push","","Add a new range to this set.",69,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":null}],[11,"iter","","Return an iterator over all ranges in this class.",69,{"inputs":[{"name":"self"}],"output":{"name":"classbytesiter"}}],[11,"ranges","","Return the underlying ranges as a slice.",69,null],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"negate","","Negate this byte class.",69,{"inputs":[{"name":"self"}],"output":null}],[11,"union","","Union this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,{"inputs":[{"name":"self"},{"name":"classbytes"}],"output":null}],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["classbytesrange"],"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"classbytesrange"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"classbytesrange"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"le","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"gt","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"ge","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"bool"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"classbytesrange"}],"output":{"name":"ordering"}}],[11,"new","","Create a new byte range for a character class.",71,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"classbytesrange"}}],[11,"start","","Return the start of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"end","","Return the end of this range.",71,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"wordboundary"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"wordboundary"}],"output":{"name":"bool"}}],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"group"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"groupkind"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"groupkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"repetitionkind"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"repetitionkind"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repetitionrange"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"repetitionrange"}],"output":{"name":"bool"}}],[11,"drop","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","regex_syntax","",72,{"inputs":[{"name":"self"}],"output":{"name":"parserbuilder"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"new","","Create a new parser builder with a default configuration.",72,{"inputs":[],"output":{"name":"parserbuilder"}}],[11,"build","","Build a parser from this configuration with the given pattern.",72,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"nest_limit","","Set the nesting limit for this parser.",72,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"parserbuilder"}}],[11,"octal","","Whether to support octal syntax or not.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parserbuilder"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parser"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new parser with a default configuration.",73,{"inputs":[],"output":{"name":"parser"}}],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["hir"],"name":"result"}}],[6,"Result","","A type alias for dealing with errors returned by this crate.",null,null],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,{"inputs":[{"name":"self"},{"name":"ast"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetitem"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,{"inputs":[{"name":"self"},{"name":"classsetbinaryop"}],"output":{"name":"result"}}],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,{"inputs":[{"name":"self"}],"output":null}],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,{"inputs":[{"name":"self"},{"name":"hir"}],"output":{"name":"result"}}],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["relay"] = {"doc":"relay","items":[[3,"Sender","relay","The Sender portion of a channel.",null,null],[3,"Receiver","","The receiver end of the channel.",null,null],[3,"Waiting","","A `Future` waiting for interest to be registered on the `Receiver`.",null,null],[3,"Canceled","","Represents that the `Sender` dropped before sending a message.",null,null],[5,"channel","","Create a new channel to send a message.",null,null],[11,"complete","","Sends the message to the `Receiver`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_canceled","","Returns true if the `Receiver` has been dropped.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"waiting","","Creates a `Future` that waits until someone is waiting on the `Receiver`.",0,{"inputs":[{"name":"self"}],"output":{"name":"waiting"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_canceled","","Returns true if the `Sender` was dropped without sending a message.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_recv","","Tries to receive the value if completed.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option","canceled"],"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}]],"paths":[[3,"Sender"],[3,"Receiver"],[3,"Waiting"],[3,"Canceled"]]};
searchIndex["reqwest"] = {"doc":"reqwest","items":[[0,"header","reqwest","Headers container, and common header fields.",null,null],[0,"parsing","reqwest::header","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","reqwest::header::parsing","Reads a single raw string when parsing a header.",null,{"inputs":[{"name":"raw"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,{"inputs":[{"name":"raw"}],"output":{"generics":["vec","error"],"name":"result"}}],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",0,null],[12,"language_tag","","The human language details of the `value`, if available.",0,null],[12,"value","","The parameter value, as expressed in octets.",0,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"generics":["extendedvalue","error"],"name":"result"}}],[5,"http_percent_encode","","Percent encode a sequence of bytes with a character set defined in [https://tools.ietf.org/html/rfc5987#section-3.2][url]",null,null],[8,"Header","reqwest::header","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",1,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",1,{"inputs":[{"name":"raw"}],"output":{"generics":["error"],"name":"result"}}],[10,"fmt_header","","Format a header to outgoing stream.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"Formatter","","A formatter used to serialize headers to an output stream.",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",2,null],[4,"MediaDesc","","A Media Descriptors Enum based on: [https://www.w3.org/TR/html401/types.html#h-6.13][url]",null,null],[13,"Screen","","screen.",3,null],[13,"Tty","","tty.",3,null],[13,"Tv","","tv.",3,null],[13,"Projection","","projection.",3,null],[13,"Handheld","","handheld.",3,null],[13,"Print","","print.",3,null],[13,"Braille","","braille.",3,null],[13,"Aural","","aural.",3,null],[13,"All","","all.",3,null],[13,"Extension","","Unrecognized media descriptor extension.",3,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",4,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",4,null],[13,"SameOrigin","","`same-origin`",4,null],[13,"Origin","","`origin`",4,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",4,null],[13,"UnsafeUrl","","`unsafe-url`",4,null],[13,"StrictOrigin","","`strict-origin`",4,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",4,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",5,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",6,null],[13,"Items","","Only the listed items are a match",6,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"HttpDate","","A timestamp with HTTP formatting and parsing",null,null],[3,"CookieIter","","Iterator for cookie.",null,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",7,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",8,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",9,null],[3,"LanguageTag","","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",10,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",10,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",10,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",10,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",10,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",10,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",10,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",11,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",11,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",12,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",13,null],[3,"Host","","The `Host` header.",null,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",14,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input. Note: A compliant client MUST always send a password (which may be the empty string).",14,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",15,null],[12,"quality","","The quality (client or server preference) for the value.",15,null],[4,"RelationType","","A Link Relation Type Enum based on: RFC5988",null,null],[13,"Alternate","","alternate.",16,null],[13,"Appendix","","appendix.",16,null],[13,"Bookmark","","bookmark.",16,null],[13,"Chapter","","chapter.",16,null],[13,"Contents","","contents.",16,null],[13,"Copyright","","copyright.",16,null],[13,"Current","","current.",16,null],[13,"DescribedBy","","describedby.",16,null],[13,"Edit","","edit.",16,null],[13,"EditMedia","","edit-media.",16,null],[13,"Enclosure","","enclosure.",16,null],[13,"First","","first.",16,null],[13,"Glossary","","glossary.",16,null],[13,"Help","","help.",16,null],[13,"Hub","","hub.",16,null],[13,"Index","","index.",16,null],[13,"Last","","last.",16,null],[13,"LatestVersion","","latest-version.",16,null],[13,"License","","license.",16,null],[13,"Next","","next.",16,null],[13,"NextArchive","","next-archive.",16,null],[13,"Payment","","payment.",16,null],[13,"Prev","","prev.",16,null],[13,"PredecessorVersion","","predecessor-version.",16,null],[13,"Previous","","previous.",16,null],[13,"PrevArchive","","prev-archive.",16,null],[13,"Related","","related.",16,null],[13,"Replies","","replies.",16,null],[13,"Section","","section.",16,null],[13,"RelationTypeSelf","","self.",16,null],[13,"Service","","service.",16,null],[13,"Start","","start.",16,null],[13,"Stylesheet","","stylesheet.",16,null],[13,"Subsection","","subsection.",16,null],[13,"SuccessorVersion","","successor-version.",16,null],[13,"Up","","up.",16,null],[13,"VersionHistory","","versionHistory.",16,null],[13,"Via","","via.",16,null],[13,"WorkingCopy","","working-copy.",16,null],[13,"WorkingCopyOf","","working-copy-of.",16,null],[13,"ExtRelType","","ext-rel-type.",16,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",17,null],[13,"Date","","The date when the client retrieved the resource",17,null],[4,"RetryAfter","","The `Retry-After` header.",null,null],[13,"Delay","","Retry after this duration has elapsed",18,null],[13,"DateTime","","Retry after the given DateTime",18,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[3,"Te","","`TE` header, defined in RFC7230",null,null],[12,"0","","",19,null],[3,"ContentLocation","","`Content-Location` header, defined in RFC7231",null,null],[12,"0","","",20,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",21,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",22,null],[13,"Brotli","","The `br` encoding.",22,null],[13,"Gzip","","The `gzip` encoding.",22,null],[13,"Deflate","","The `deflate` encoding.",22,null],[13,"Compress","","The `compress` encoding.",22,null],[13,"Identity","","The `identity` encoding.",22,null],[13,"Trailers","","The `trailers` encoding.",22,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",22,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",23,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",24,null],[3,"LastEventId","","`Last-Event-ID` header, defined in RFC3864",null,null],[12,"0","","",25,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",26,null],[13,"NoStore","","\"no-store\"",26,null],[13,"NoTransform","","\"no-transform\"",26,null],[13,"OnlyIfCached","","\"only-if-cached\"",26,null],[13,"MaxAge","","\"max-age=delta\"",26,null],[13,"MaxStale","","\"max-stale=delta\"",26,null],[13,"MinFresh","","\"min-fresh=delta\"",26,null],[13,"MustRevalidate","","\"must-revalidate\"",26,null],[13,"Public","","\"public\"",26,null],[13,"Private","","\"private\"",26,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",26,null],[13,"SMaxAge","","\"s-maxage=delta\"",26,null],[13,"Extension","","Extension directives. Optionally include an argument.",26,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",27,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",28,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",29,null],[13,"Items","","Only the listed items are a match",29,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",30,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",31,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",32,null],[13,"Items","","Only the listed items are a match",32,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",33,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",34,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",35,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",36,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",37,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",38,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",39,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",40,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",40,null],[3,"Link","","The `Link` header, defined in RFC5988",null,null],[3,"Raw","","A raw header value.",null,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",41,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[3,"ProxyAuthorization","","`Proxy-Authorization` header, defined in RFC7235",null,null],[12,"0","","",42,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",43,null],[5,"qitem","","Convenience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float or integer.",null,{"inputs":[{"name":"t"}],"output":{"name":"quality"}}],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",44,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",45,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",46,null],[13,"ReturnRepresentation","","\"return=representation\"",46,null],[13,"ReturnMinimal","","\"return=minimal\"",46,null],[13,"HandlingStrict","","\"handling=strict\"",46,null],[13,"HandlingLenient","","\"handling=lenient\"",46,null],[13,"Wait","","\"wait=delta\"",46,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",46,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",47,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",48,null],[12,"range","reqwest::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",48,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",48,null],[13,"Unregistered","reqwest::header","Custom range, with unit not registered at IANA",48,null],[12,"unit","reqwest::header::ContentRangeSpec","other-range-unit",48,null],[12,"resp","","other-range-resp",48,null],[4,"ConnectionOption","reqwest::header","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",49,null],[13,"Close","","The `close` connection value.",49,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",49,null],[4,"DispositionParam","","A parameter to the disposition type.",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",50,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",50,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",51,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",51,null],[13,"Unregistered","","The given range unit is not registered at IANA.",51,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",52,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",52,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",53,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",54,null],[3,"Warning","","`Warning` header, defined in RFC7234",null,null],[12,"code","","The 3 digit warn code.",55,null],[12,"agent","","The name or pseudonym of the server adding this header.",55,null],[12,"text","","The warning message describing the error.",55,null],[12,"date","","An optional warning date.",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",56,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",57,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[4,"ProtocolName","","A protocol name used to identify a specific protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",58,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",58,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",58,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",58,null],[13,"Unregistered","","Any other protocol name not known to hyper",58,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",59,null],[13,"Null","","A hidden origin",59,null],[13,"Value","","Allow one particular origin",59,null],[3,"Origin","","The `Origin` header.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",60,null],[13,"Iso_8859_1","","ISO-8859-1",60,null],[13,"Iso_8859_2","","ISO-8859-2",60,null],[13,"Iso_8859_3","","ISO-8859-3",60,null],[13,"Iso_8859_4","","ISO-8859-4",60,null],[13,"Iso_8859_5","","ISO-8859-5",60,null],[13,"Iso_8859_6","","ISO-8859-6",60,null],[13,"Iso_8859_7","","ISO-8859-7",60,null],[13,"Iso_8859_8","","ISO-8859-8",60,null],[13,"Iso_8859_9","","ISO-8859-9",60,null],[13,"Iso_8859_10","","ISO-8859-10",60,null],[13,"Shift_Jis","","Shift_JIS",60,null],[13,"Euc_Jp","","EUC-JP",60,null],[13,"Iso_2022_Kr","","ISO-2022-KR",60,null],[13,"Euc_Kr","","EUC-KR",60,null],[13,"Iso_2022_Jp","","ISO-2022-JP",60,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",60,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",60,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",60,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",60,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",60,null],[13,"Gb2312","","GB2312",60,null],[13,"Big5","","Big5",60,null],[13,"Koi8_R","","KOI8-R",60,null],[13,"Ext","","An arbitrary charset specified as a string",60,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",61,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body.",null,null],[13,"Inline","","Inline implies default processing",62,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",62,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",62,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",63,null],[3,"LinkValue","","A single `link-value` of a `Link` header, based on: RFC5988",null,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",64,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",65,null],[13,"Ext","","Every value other than `no-cache`.",65,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",66,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",67,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",67,null],[13,"Last","","Get last x bytes (\"-x\")",67,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266.",null,null],[12,"disposition","","The disposition",68,null],[12,"parameters","","Disposition parameters",68,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",69,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",70,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[3,"Mime","reqwest::mime","A parsed mime or media type.",null,null],[3,"Name","","A section of a `Mime`.",null,null],[3,"FromStrError","","An error when parsing a `Mime` from a string.",null,null],[3,"Params","","An iterator over the parameters of a MIME.",null,null],[17,"STAR","","",null,null],[17,"TEXT","","text",null,null],[17,"IMAGE","","image",null,null],[17,"AUDIO","","audio",null,null],[17,"VIDEO","","video",null,null],[17,"APPLICATION","","application",null,null],[17,"MULTIPART","","multipart",null,null],[17,"MESSAGE","","message",null,null],[17,"MODEL","","model",null,null],[17,"FONT","","font",null,null],[17,"PLAIN","","plain",null,null],[17,"HTML","","html",null,null],[17,"XML","","xml",null,null],[17,"JAVASCRIPT","","javascript",null,null],[17,"CSS","","css",null,null],[17,"CSV","","csv",null,null],[17,"EVENT_STREAM","","event-stream",null,null],[17,"JSON","","json",null,null],[17,"WWW_FORM_URLENCODED","","x-www-form-urlencoded",null,null],[17,"MSGPACK","","msgpack",null,null],[17,"OCTET_STREAM","","octet-stream",null,null],[17,"FORM_DATA","","form-data",null,null],[17,"PNG","","png",null,null],[17,"GIF","","gif",null,null],[17,"BMP","","bmp",null,null],[17,"JPEG","","jpeg",null,null],[17,"BASIC","","basic",null,null],[17,"MPEG","","mpeg",null,null],[17,"MP4","","mp4",null,null],[17,"OGG","","ogg",null,null],[17,"CHARSET","","charset",null,null],[17,"BOUNDARY","","boundary",null,null],[17,"UTF_8","","utf-8",null,null],[17,"STAR_STAR","","`*/*`",null,null],[17,"TEXT_STAR","","`text/*`",null,null],[17,"TEXT_PLAIN","","`text/plain`",null,null],[17,"TEXT_PLAIN_UTF_8","","`text/plain; charset=utf-8`",null,null],[17,"TEXT_HTML","","`text/html`",null,null],[17,"TEXT_HTML_UTF_8","","`text/html; charset=utf-8`",null,null],[17,"TEXT_CSS","","`text/css`",null,null],[17,"TEXT_JAVASCRIPT","","`text/javascript`",null,null],[17,"TEXT_XML","","`text/xml`",null,null],[17,"TEXT_EVENT_STREAM","","`text/event-stream`",null,null],[17,"TEXT_CSV","","`text/csv`",null,null],[17,"TEXT_CSV_UTF_8","","`text/csv; charset=utf-8`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES","","`text/tab-separated-values`",null,null],[17,"TEXT_TAB_SEPARATED_VALUES_UTF_8","","`text/tab-separated-values; charset=utf-8`",null,null],[17,"IMAGE_STAR","","`image/*`",null,null],[17,"IMAGE_JPEG","","`image/jpeg`",null,null],[17,"IMAGE_GIF","","`image/gif`",null,null],[17,"IMAGE_PNG","","`image/png`",null,null],[17,"IMAGE_BMP","","`image/bmp`",null,null],[17,"APPLICATION_JSON","","`application/json`",null,null],[17,"APPLICATION_JAVASCRIPT","","`application/javascript`",null,null],[17,"APPLICATION_JAVASCRIPT_UTF_8","","`application/javascript; charset=utf-8`",null,null],[17,"APPLICATION_WWW_FORM_URLENCODED","","`application/x-www-form-urlencoded`",null,null],[17,"APPLICATION_OCTET_STREAM","","`application/octet-stream`",null,null],[17,"APPLICATION_MSGPACK","","`application/msgpack`",null,null],[17,"MULTIPART_FORM_DATA","","`multipart/form-data`",null,null],[4,"Method","reqwest","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",71,null],[13,"Get","","GET",71,null],[13,"Post","","POST",71,null],[13,"Put","","PUT",71,null],[13,"Delete","","DELETE",71,null],[13,"Head","","HEAD",71,null],[13,"Trace","","TRACE",71,null],[13,"Connect","","CONNECT",71,null],[13,"Patch","","PATCH",71,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",71,null],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",72,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",72,null],[13,"Processing","","102 Processing [RFC2518]",72,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",72,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",72,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",72,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",72,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",72,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",72,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",72,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",72,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",72,null],[13,"ImUsed","","226 IM Used [RFC3229]",72,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",72,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",72,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",72,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",72,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",72,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",72,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",72,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",72,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",72,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",72,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",72,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",72,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",72,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",72,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",72,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",72,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",72,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",72,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",72,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",72,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",72,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",72,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",72,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",72,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",72,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",72,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",72,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",72,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",72,null],[13,"Locked","","423 Locked [RFC4918]",72,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",72,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",72,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",72,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",72,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",72,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",72,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",72,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",72,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",72,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",72,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",72,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",72,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",72,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",72,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",72,null],[13,"NotExtended","","510 Not Extended [RFC2774]",72,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",72,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",72,null],[3,"Url","","A parsed URL record.",null,null],[4,"UrlError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",73,null],[13,"IdnaError","","",73,null],[13,"InvalidPort","","",73,null],[13,"InvalidIpv4Address","","",73,null],[13,"InvalidIpv6Address","","",73,null],[13,"InvalidDomainCharacter","","",73,null],[13,"RelativeUrlWithoutBase","","",73,null],[13,"RelativeUrlWithCannotBeABaseBase","","",73,null],[13,"SetHostOnCannotBeABaseUrl","","",73,null],[13,"Overflow","","",73,null],[3,"Client","","A `Client` to make Requests with.",null,null],[3,"ClientBuilder","","A `ClientBuilder` can be used to create a `Client` with  custom configuration.",null,null],[3,"Error","","The Errors that may occur when processing a `Request`.",null,null],[3,"Body","","The body of a `Request`.",null,null],[3,"Proxy","","Configuration of a proxy that a `Client` should pass requests to.",null,null],[3,"RedirectAction","","An action to perform when a redirect status code is found.",null,null],[3,"RedirectAttempt","","A type that holds information on the next request and previous requests in redirect chain.",null,null],[3,"RedirectPolicy","","A type that controls the policy on how to handle the following of redirects.",null,null],[3,"Request","","A request which can be executed with `Client::execute()`.",null,null],[3,"RequestBuilder","","A builder to construct the properties of a `Request`.",null,null],[3,"Response","","A Response to a submitted `Request`.",null,null],[3,"Certificate","","Represent an X509 certificate.",null,null],[3,"Identity","","Represent a private key and X509 cert as a client certificate.",null,null],[5,"get","","Shortcut method to quickly make a `GET` request.",null,{"inputs":[{"name":"t"}],"output":{"generics":["response"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"url","","Returns a possible URL related to this error.",74,{"inputs":[{"name":"self"}],"output":{"generics":["url"],"name":"option"}}],[11,"get_ref","","Returns a reference to the internal error, if available.",74,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"is_http","","Returns true if the error is related to HTTP.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_serialization","","Returns true if the error is serialization related.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirect","","Returns true if the error is from a `RedirectPolicy`.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Returns true if the error is from a request returning a 4xx error.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Returns true if the error is from a request returning a 5xx error.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"status","","Returns the status code, if the error was generated from a response.",74,{"inputs":[{"name":"self"}],"output":{"generics":["statuscode"],"name":"option"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Instantiate a `Body` from a reader.",75,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"sized","","Create a `Body` from a `Read` where the size is known in advance but the data should not be fully loaded into memory. This will set the `Content-Length` header and stream from the `Read`.",75,{"inputs":[{"name":"r"},{"name":"u64"}],"output":{"name":"body"}}],[11,"from","","",75,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"body"}}],[11,"from","","",75,{"inputs":[{"name":"string"}],"output":{"name":"body"}}],[11,"from","","",75,null],[11,"from","","",75,{"inputs":[{"name":"str"}],"output":{"name":"body"}}],[11,"from","","",75,{"inputs":[{"name":"file"}],"output":{"name":"body"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"new","","Constructs a new `ClientBuilder`",77,{"inputs":[],"output":{"name":"clientbuilder"}}],[11,"build","","Returns a `Client` that uses this `ClientBuilder` configuration.",77,{"inputs":[{"name":"self"}],"output":{"generics":["client"],"name":"result"}}],[11,"add_root_certificate","","Add a custom root certificate.",77,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"clientbuilder"}}],[11,"identity","","Sets the identity to be used for client certificate authentication.",77,{"inputs":[{"name":"self"},{"name":"identity"}],"output":{"name":"clientbuilder"}}],[11,"danger_disable_hostname_verification","","Disable hostname verification.",77,{"inputs":[{"name":"self"}],"output":{"name":"clientbuilder"}}],[11,"enable_hostname_verification","","Enable hostname verification.",77,{"inputs":[{"name":"self"}],"output":{"name":"clientbuilder"}}],[11,"default_headers","","Sets the default headers for every request.",77,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"clientbuilder"}}],[11,"gzip","","Enable auto gzip decompression by checking the ContentEncoding response header.",77,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"clientbuilder"}}],[11,"proxy","","Add a `Proxy` to the list of proxies the `Client` will use.",77,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"name":"clientbuilder"}}],[11,"redirect","","Set a `RedirectPolicy` for this client.",77,{"inputs":[{"name":"self"},{"name":"redirectpolicy"}],"output":{"name":"clientbuilder"}}],[11,"referer","","Enable or disable automatic setting of the `Referer` header.",77,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"clientbuilder"}}],[11,"timeout","","Set a timeout for connect, read and write operations of a `Client`.",77,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"clientbuilder"}}],[11,"new","","Constructs a new `Client`.",76,{"inputs":[],"output":{"name":"client"}}],[11,"builder","","Creates a `ClientBuilder` to configure a `Client`.",76,{"inputs":[],"output":{"name":"clientbuilder"}}],[11,"get","","Convenience method to make a `GET` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Convenience method to make a `POST` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Convenience method to make a `PUT` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Convenience method to make a `PATCH` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Convenience method to make a `DELETE` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Convenience method to make a `HEAD` request to a URL.",76,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Start building a `Request` with the `Method` and `Url`.",76,{"inputs":[{"name":"self"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"execute","","Executes a `Request`.",76,{"inputs":[{"name":"self"},{"name":"request"}],"output":{"generics":["response"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"proxy"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"http","","Proxy all HTTP traffic to the passed URL.",78,{"inputs":[{"name":"u"}],"output":{"generics":["proxy"],"name":"result"}}],[11,"https","","Proxy all HTTPS traffic to the passed URL.",78,{"inputs":[{"name":"u"}],"output":{"generics":["proxy"],"name":"result"}}],[11,"all","","Proxy all traffic to the passed URL.",78,{"inputs":[{"name":"u"}],"output":{"generics":["proxy"],"name":"result"}}],[11,"custom","","Provide a custom function to determine what traffix to proxy to where.",78,{"inputs":[{"name":"f"}],"output":{"name":"proxy"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limited","","Create a RedirectPolicy with a maximum number of redirects.",79,{"inputs":[{"name":"usize"}],"output":{"name":"redirectpolicy"}}],[11,"none","","Create a RedirectPolicy that does not follow any redirect.",79,{"inputs":[],"output":{"name":"redirectpolicy"}}],[11,"custom","","Create a custom RedirectPolicy using the passed function.",79,{"inputs":[{"name":"t"}],"output":{"name":"redirectpolicy"}}],[11,"redirect","","Apply this policy to a given [`RedirectAttempt`] to produce a [`RedirectAction`].",79,{"inputs":[{"name":"self"},{"name":"redirectattempt"}],"output":{"name":"redirectaction"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"redirectpolicy"}}],[11,"status","","Get the type of redirect.",80,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"url","","Get the next URL to redirect to.",80,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"previous","","Get the list of previous URLs that have already been requested in this chain.",80,null],[11,"follow","","Returns an action meaning reqwest should follow the next URL.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"stop","","Returns an action meaning reqwest should not follow the next URL.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"loop_detected","","Returns an action meaning there was a loop of redirects found.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"too_many_redirects","","Returns an action meaning there was a loop of redirects found.",80,{"inputs":[{"name":"self"}],"output":{"name":"redirectaction"}}],[11,"new","","Constructs a new request.",82,{"inputs":[{"name":"method"},{"name":"url"}],"output":{"name":"self"}}],[11,"method","","Get the method.",82,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"method_mut","","Get a mutable reference to the method.",82,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"url","","Get the url.",82,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"url_mut","","Get a mutable reference to the url.",82,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"headers","","Get the headers.",82,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"headers_mut","","Get a mutable reference to the headers.",82,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"body","","Get the body.",82,{"inputs":[{"name":"self"}],"output":{"generics":["body"],"name":"option"}}],[11,"body_mut","","Get a mutable reference to the body.",82,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"header","","Add a `Header` to this Request.",83,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add a set of Headers to the existing ones on this Request.",83,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"basic_auth","","Enable HTTP basic authentication.",83,{"inputs":[{"name":"self"},{"name":"u"},{"name":"option"}],"output":{"name":"requestbuilder"}}],[11,"body","","Set the request body.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"query","","Modify the query string of the URL.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"form","","Send a form body.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"json","","Send a JSON body.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"multipart","","Sends a multipart/form-data body.",83,{"inputs":[{"name":"self"},{"name":"form"}],"output":{"name":"requestbuilder"}}],[11,"build","","Build a `Request`, which can be inspected, modified and executed with `Client::execute()`.",83,{"inputs":[{"name":"self"}],"output":{"generics":["request"],"name":"result"}}],[11,"send","","Constructs the Request and sends it the target URL, returning a Response.",83,{"inputs":[{"name":"self"}],"output":{"generics":["response"],"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"url","","Get the final `Url` of this `Response`.",84,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"status","","Get the `StatusCode` of this `Response`.",84,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers","","Get the `Headers` of this `Response`.",84,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"json","","Try and deserialize the response body as JSON using `serde`.",84,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"text","","Get the response text.",84,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"copy_to","","Copy the response body into a writer.",84,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["u64"],"name":"result"}}],[11,"error_for_status","","Turn a response into an error if the server returned an error.",84,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",84,null],[11,"from_der","","Create a `Certificate` from a binary DER encoded certificate",85,null],[11,"from_pem","","Create a `Certificate` from a PEM encoded certificate",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_pkcs12_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"multipart","","multipart/form-data",null,null],[3,"Form","reqwest::multipart","A multipart/form-data request.",null,null],[3,"Part","","A field in a multipart form.",null,null],[6,"Result","reqwest","A `Result` alias where the `Err` case is `reqwest::Error`.",null,null],[8,"IntoUrl","","A trait to try to convert some type into a `Url`.",null,null],[11,"clone","reqwest::header","",87,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"te"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mediadesc"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"link"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"proxyauthorization"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"warning"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"linkvalue"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"lasteventid"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"clone","reqwest","",72,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"clone","reqwest::header","",45,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"retryafter"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"relationtype"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"clone","reqwest","",71,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"clone","reqwest::header","",14,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"contentlocation"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"clone","reqwest::header::parsing","",0,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"clone","reqwest::header","",60,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"from_str","","",89,{"inputs":[{"name":"str"}],"output":{"generics":["link","error"],"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["entitytag","error"],"name":"result"}}],[11,"from_str","","",90,{"inputs":[{"name":"str"}],"output":{"generics":["host","error"],"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["mediadesc","error"],"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"generics":["contentrangespec","error"],"name":"result"}}],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"generics":["connectionoption"],"name":"result"}}],[11,"from_str","","",98,{"inputs":[{"name":"str"}],"output":{"generics":["httpdate","error"],"name":"result"}}],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"generics":["rangeunit","error"],"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"generics":["stricttransportsecurity","error"],"name":"result"}}],[11,"from_str","","",67,{"inputs":[{"name":"str"}],"output":{"generics":["byterangespec","error"],"name":"result"}}],[11,"from_str","","",97,{"inputs":[{"name":"str"}],"output":{"generics":["origin","error"],"name":"result"}}],[11,"from_str","reqwest","",71,{"inputs":[{"name":"str"}],"output":{"generics":["method","error"],"name":"result"}}],[11,"from_str","reqwest::header","",58,{"inputs":[{"name":"str"}],"output":{"generics":["protocolname"],"name":"result"}}],[11,"from_str","","",22,{"inputs":[{"name":"str"}],"output":{"generics":["encoding","error"],"name":"result"}}],[11,"from_str","","",46,{"inputs":[{"name":"str"}],"output":{"generics":["preference","option"],"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"generics":["cachedirective","option"],"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"generics":["qualityitem","error"],"name":"result"}}],[11,"from_str","","",55,{"inputs":[{"name":"str"}],"output":{"generics":["warning","error"],"name":"result"}}],[11,"from_str","","",40,{"inputs":[{"name":"str"}],"output":{"generics":["protocol"],"name":"result"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"generics":["range","error"],"name":"result"}}],[11,"from_str","","",47,{"inputs":[{"name":"str"}],"output":{"generics":["bearer","error"],"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"generics":["relationtype","error"],"name":"result"}}],[11,"from_str","","",60,{"inputs":[{"name":"str"}],"output":{"generics":["charset","error"],"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"generics":["basic","error"],"name":"result"}}],[11,"hash","reqwest","",72,null],[11,"hash","","",71,null],[11,"from_iter","reqwest::header","",96,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"next","","",101,{"inputs":[{"name":"self"}],"output":{"generics":["headerview"],"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header::parsing","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",91,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",91,{"inputs":[{"name":"raw"}],"output":{"generics":["cookie","error"],"name":"result"}}],[11,"fmt_header","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",87,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",87,{"inputs":[{"name":"raw"}],"output":{"generics":["referer","error"],"name":"result"}}],[11,"fmt_header","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",9,{"inputs":[{"name":"raw"}],"output":{"generics":["contenttype","error"],"name":"result"}}],[11,"fmt_header","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",70,{"inputs":[{"name":"raw"}],"output":{"generics":["contentencoding","error"],"name":"result"}}],[11,"fmt_header","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",93,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",93,{"inputs":[{"name":"raw"}],"output":{"generics":["server","error"],"name":"result"}}],[11,"fmt_header","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,{"inputs":[{"name":"raw"}],"output":{"generics":["ifmodifiedsince","error"],"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,{"inputs":[{"name":"raw"}],"output":{"generics":["connection","error"],"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",90,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",90,{"inputs":[{"name":"raw"}],"output":{"generics":["host","error"],"name":"result"}}],[11,"fmt_header","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",68,{"inputs":[{"name":"raw"}],"output":{"generics":["contentdisposition","error"],"name":"result"}}],[11,"fmt_header","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolalloworigin","error"],"name":"result"}}],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,{"inputs":[{"name":"raw"}],"output":{"generics":["lastmodified","error"],"name":"result"}}],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",12,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlanguage","error"],"name":"result"}}],[11,"fmt_header","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,{"inputs":[{"name":"raw"}],"output":{"generics":["lasteventid","error"],"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,{"inputs":[{"name":"raw"}],"output":{"generics":["from","error"],"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",95,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",95,{"inputs":[{"name":"raw"}],"output":{"generics":["location","error"],"name":"result"}}],[11,"fmt_header","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,{"inputs":[{"name":"raw"}],"output":{"generics":["proxyauthorization","error"],"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,{"inputs":[{"name":"raw"}],"output":{"generics":["date","error"],"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",65,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",65,{"inputs":[{"name":"raw"}],"output":{"generics":["pragma","error"],"name":"result"}}],[11,"fmt_header","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,{"inputs":[{"name":"raw"}],"output":{"generics":["prefer","error"],"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",18,{"inputs":[{"name":"raw"}],"output":{"generics":["retryafter","error"],"name":"result"}}],[11,"fmt_header","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolrequestmethod","error"],"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",19,{"inputs":[{"name":"raw"}],"output":{"generics":["te","error"],"name":"result"}}],[11,"fmt_header","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",97,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",97,{"inputs":[{"name":"raw"}],"output":{"generics":["origin","error"],"name":"result"}}],[11,"fmt_header","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",4,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",4,{"inputs":[{"name":"raw"}],"output":{"generics":["referrerpolicy","error"],"name":"result"}}],[11,"fmt_header","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",69,{"inputs":[{"name":"raw"}],"output":{"generics":["authorization","error"],"name":"result"}}],[11,"fmt_header","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",89,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",89,{"inputs":[{"name":"raw"}],"output":{"generics":["link","error"],"name":"result"}}],[11,"fmt_header","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,{"inputs":[{"name":"raw"}],"output":{"generics":["transferencoding","error"],"name":"result"}}],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,{"inputs":[{"name":"raw"}],"output":{"generics":["upgrade","error"],"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",17,{"inputs":[{"name":"raw"}],"output":{"generics":["ifrange","error"],"name":"result"}}],[11,"fmt_header","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolexposeheaders","error"],"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlocation","error"],"name":"result"}}],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",6,{"inputs":[{"name":"raw"}],"output":{"generics":["ifnonematch","error"],"name":"result"}}],[11,"fmt_header","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",13,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolmaxage","error"],"name":"result"}}],[11,"fmt_header","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,{"inputs":[{"name":"raw"}],"output":{"generics":["ifunmodifiedsince","error"],"name":"result"}}],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",5,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptcharset","error"],"name":"result"}}],[11,"fmt_header","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",94,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",94,{"inputs":[{"name":"raw"}],"output":{"generics":["useragent","error"],"name":"result"}}],[11,"fmt_header","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,{"inputs":[{"name":"raw"}],"output":{"generics":["contentlength","error"],"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptranges","error"],"name":"result"}}],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowheaders","error"],"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,{"inputs":[{"name":"raw"}],"output":{"generics":["preferenceapplied","error"],"name":"result"}}],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",8,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",8,{"inputs":[{"name":"raw"}],"output":{"generics":["expires","error"],"name":"result"}}],[11,"fmt_header","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,{"inputs":[{"name":"raw"}],"output":{"generics":["etag","error"],"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptencoding","error"],"name":"result"}}],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,{"inputs":[{"name":"raw"}],"output":{"generics":["vary","error"],"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,{"inputs":[{"name":"raw"}],"output":{"generics":["warning","error"],"name":"result"}}],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",64,{"inputs":[{"name":"raw"}],"output":{"generics":["allow","error"],"name":"result"}}],[11,"fmt_header","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",34,{"inputs":[{"name":"raw"}],"output":{"generics":["setcookie","error"],"name":"result"}}],[11,"fmt_header","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,{"inputs":[{"name":"raw"}],"output":{"generics":["range","error"],"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,{"inputs":[{"name":"raw"}],"output":{"generics":["contentrange","error"],"name":"result"}}],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowmethods","error"],"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,{"inputs":[{"name":"raw"}],"output":{"generics":["ifmatch","error"],"name":"result"}}],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,{"inputs":[{"name":"raw"}],"output":{"generics":["cachecontrol","error"],"name":"result"}}],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolrequestheaders","error"],"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",88,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",88,{"inputs":[{"name":"raw"}],"output":{"generics":["accesscontrolallowcredentials","error"],"name":"result"}}],[11,"fmt_header","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",11,{"inputs":[{"name":"raw"}],"output":{"generics":["stricttransportsecurity","error"],"name":"result"}}],[11,"fmt_header","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,{"inputs":[{"name":"raw"}],"output":{"generics":["expect","error"],"name":"result"}}],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,{"inputs":[{"name":"raw"}],"output":{"generics":["accept","error"],"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"header_name","","",7,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",7,{"inputs":[{"name":"raw"}],"output":{"generics":["acceptlanguage","error"],"name":"result"}}],[11,"fmt_header","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","reqwest","",72,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","reqwest::header","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"as_ref","reqwest","",71,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","reqwest::header","",100,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",100,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"raw"}}],[11,"from","","",100,null],[11,"from","","",100,{"inputs":[{"name":"string"}],"output":{"name":"raw"}}],[11,"from","","",100,{"inputs":[{"name":"str"}],"output":{"name":"raw"}}],[11,"from","","",100,{"inputs":[{"name":"bytes"}],"output":{"name":"raw"}}],[11,"from","","",98,{"inputs":[{"name":"systemtime"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"index","","",100,null],[11,"cmp","reqwest","",72,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","reqwest::header","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"extend","","",96,null],[11,"extend","","",96,null],[11,"scheme","","",14,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"scheme","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"fmt_scheme","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"contentlocation"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"bool"}}],[11,"eq","","",100,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header::parsing","",0,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header","",38,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"linkvalue"}],"output":{"name":"bool"}}],[11,"eq","","",100,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"retryafter"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"raw"}],"output":{"name":"bool"}}],[11,"eq","reqwest","",71,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"warning"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"eq","","",100,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"eq","","",100,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"te"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"proxyauthorization"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"link"}],"output":{"name":"bool"}}],[11,"eq","reqwest","",72,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header","",26,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"lasteventid"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"eq","","",100,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header::parsing","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest::header","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","reqwest","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"deref","reqwest::header","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",94,null],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",95,null],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",2,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",2,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",2,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",2,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",2,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"type_","reqwest::mime","Get the top level media type for this `Mime`.",104,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"subtype","","Get the subtype of this `Mime`.",104,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"suffix","","Get an optional +suffix for this `Mime`.",104,{"inputs":[{"name":"self"}],"output":{"generics":["name"],"name":"option"}}],[11,"get_param","","Look up a parameter by name.",104,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["name"],"name":"option"}}],[11,"params","","Returns an iterator over the parameters.",104,{"inputs":[{"name":"self"}],"output":{"name":"params"}}],[11,"deref","reqwest::header","",9,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"safe","reqwest","Whether a method is considered \"safe\", meaning the request is essentially read-only.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","reqwest::header","",54,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",93,null],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",87,null],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","reqwest","",72,{"inputs":[],"output":{"name":"statuscode"}}],[11,"default","reqwest::header","",99,{"inputs":[],"output":{"name":"quality"}}],[11,"default","reqwest","",71,{"inputs":[],"output":{"name":"method"}}],[11,"default","reqwest::header","",96,{"inputs":[],"output":{"name":"headers"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"generics":["languagetag","error"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"languagetag"}}],[11,"partial_cmp","reqwest::mime","",104,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"as_ref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"from_str","","",104,{"inputs":[{"name":"str"}],"output":{"generics":["mime"],"name":"result"}}],[11,"hash","","",105,null],[11,"hash","","",104,null],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"next","","",106,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"partial_cmp","reqwest","",108,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"as_ref","","",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",73,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",108,{"inputs":[{"name":"self"},{"generics":["position"],"name":"range"}],"output":{"name":"str"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"from_str","","",108,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"hash","","",108,null],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"to_socket_addrs","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt_line","reqwest::header","Format one 'line' of a header.",109,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Creates a new, empty headers map.",96,{"inputs":[],"output":{"name":"headers"}}],[11,"with_capacity","","Creates a new `Headers` struct with space reserved for `len` headers.",96,{"inputs":[{"name":"usize"}],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",96,null],[11,"get","","Get a reference to the header field's value, if it exists.",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns the header, if one has been removed and could be parsed.",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over the header fields.",96,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",96,null],[11,"get_raw","","Access the raw value of a header.",96,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["raw"],"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",96,null],[11,"append_raw","","Append a value to raw value of this header.",96,null],[11,"remove_raw","","Remove a header by name.",96,null],[11,"is","","Check if a HeaderView is a certain Header.",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",103,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"raw","","Access the raw value of the header.",103,{"inputs":[{"name":"self"}],"output":{"name":"raw"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text","","A constructor  to easily create a `Content-Type: text/plain` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"text_utf8","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"xml","","A constructor  to easily create a `Content-Type: text/xml` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"octet_stream","","A constructor  to easily create a `Content-Type: application/octet-stream` header.",9,{"inputs":[],"output":{"name":"contenttype"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",10,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",10,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",11,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",11,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"new","","Create a `Host` header, providing the hostname and optional port.",90,{"inputs":[{"name":"h"},{"name":"p"}],"output":{"name":"host"}}],[11,"hostname","","Get the hostname, such as example.domain.",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"port","","Get the optional port number.",90,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",15,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"new","","Creates a new $id",93,{"inputs":[{"name":"i"}],"output":{"name":"server"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",23,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",23,{"inputs":[],"output":{"name":"connection"}}],[11,"chunked","","Constructor for the most common Transfer-Encoding, `chunked`.",35,{"inputs":[],"output":{"name":"transferencoding"}}],[11,"new","","Creates a new Protocol with the given name and version",40,{"inputs":[{"name":"protocolname"},{"generics":["string"],"name":"option"}],"output":{"name":"protocol"}}],[11,"new","","Create `Link` from a `Vec<LinkValue>`.",89,{"inputs":[{"generics":["linkvalue"],"name":"vec"}],"output":{"name":"link"}}],[11,"values","","Get the `Link` header's `LinkValue`s.",89,null],[11,"push_value","","Add a `LinkValue` instance to the `Link` header's values.",89,null],[11,"len","","Returns the amount of lines.",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"one","","Returns the line if there is only 1.",100,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterate the lines of raw bytes.",100,{"inputs":[{"name":"self"}],"output":{"name":"rawlines"}}],[11,"push","","Append a line to this `Raw` header value.",100,null],[11,"new","","Creates a new $id",95,{"inputs":[{"name":"i"}],"output":{"name":"location"}}],[11,"star","","A constructor to easily create `Accept: */*`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",45,{"inputs":[],"output":{"name":"accept"}}],[11,"new","","Creates a new $id",94,{"inputs":[{"name":"i"}],"output":{"name":"useragent"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",52,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",52,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"new","","Creates a new $id",87,{"inputs":[{"name":"i"}],"output":{"name":"referer"}}],[11,"new","","Creates a new `Origin` header.",97,{"inputs":[{"name":"s"},{"name":"h"},{"generics":["u16"],"name":"option"}],"output":{"name":"origin"}}],[11,"null","","Creates a `Null` `Origin` header.",97,{"inputs":[],"output":{"name":"origin"}}],[11,"is_null","","Checks if `Origin` is `Null`.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scheme","","The scheme, such as http or https.",97,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","The host, such as `Host { hostname: \"hyper.rs\".to_owned(), port: None}`.",97,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"new","","Create `LinkValue` from URI-Reference.",92,{"inputs":[{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"link","","Get the `LinkValue`'s value.",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rel","","Get the `LinkValue`'s `rel` parameter(s).",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"anchor","","Get the `LinkValue`'s `anchor` parameter.",92,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"rev","","Get the `LinkValue`'s `rev` parameter(s).",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"href_lang","","Get the `LinkValue`'s `hreflang` parameter(s).",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"media_desc","","Get the `LinkValue`'s `media` parameter(s).",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"title","","Get the `LinkValue`'s `title` parameter.",92,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"title_star","","Get the `LinkValue`'s `title*` parameter.",92,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"media_type","","Get the `LinkValue`'s `type` parameter.",92,{"inputs":[{"name":"self"}],"output":{"generics":["mime"],"name":"option"}}],[11,"push_rel","","Add a `RelationType` to the `LinkValue`'s `rel` parameter.",92,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"set_anchor","","Set `LinkValue`'s `anchor` parameter.",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"push_rev","","Add a `RelationType` to the `LinkValue`'s `rev` parameter.",92,{"inputs":[{"name":"self"},{"name":"relationtype"}],"output":{"name":"linkvalue"}}],[11,"push_href_lang","","Add a `LanguageTag` to the `LinkValue`'s `hreflang` parameter.",92,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"linkvalue"}}],[11,"push_media_desc","","Add a `MediaDesc` to the `LinkValue`'s `media_desc` parameter.",92,{"inputs":[{"name":"self"},{"name":"mediadesc"}],"output":{"name":"linkvalue"}}],[11,"set_title","","Set `LinkValue`'s `title` parameter.",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_title_star","","Set `LinkValue`'s `title*` parameter.",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linkvalue"}}],[11,"set_media_type","","Set `LinkValue`'s `type` parameter.",92,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"linkvalue"}}],[11,"to_satisfiable_range","","Given the full length of the entity, attempt to normalize the byte range into an satisfiable end-inclusive (from, to) range.",67,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"option"}}],[11,"new","","Creates a new `Cookie` header.",91,{"inputs":[],"output":{"name":"cookie"}}],[11,"set","","Sets a name and value for the `Cookie`.",91,null],[11,"append","","Append a name and value for the `Cookie`.",91,null],[11,"get","","Get a value for the name, if it exists.",91,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[11,"iter","","Iterate cookies.",91,{"inputs":[{"name":"self"}],"output":{"name":"cookieiter"}}],[11,"as_str","reqwest::mime","Get the value of this `Name` as a string.",105,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"try_from","reqwest","Try to convert a `u16` into a `StatusCode`.",72,{"inputs":[{"name":"u16"}],"output":{"generics":["statuscode","invalidstatuscode"],"name":"result"}}],[11,"as_u16","","Get the `u16` code from this `StatusCode`.",72,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",72,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_informational","","Check if this `StatusCode` is within 100-199.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if this `StatusCode` is within 200-299.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if this `StatusCode` is within 300-399.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if this `StatusCode` is within 400-499.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if this `StatusCode` is within 500-599.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if this `StatusCode` is not within 100-599.",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse","","Parse an absolute URL from a string.",108,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",108,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",108,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",108,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",108,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",108,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",108,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",108,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["hostandport","error"],"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",108,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"generics":["split"],"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",108,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",108,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",108,null],[11,"set_query","","Change this URL’s query string.",108,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",108,{"inputs":[{"name":"self"}],"output":{"generics":["urlquery"],"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",108,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",108,{"inputs":[{"name":"self"}],"output":{"generics":["pathsegmentsmut"],"name":"result"}}],[11,"set_port","","Change this URL’s port number.",108,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",108,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",108,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",108,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",108,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",108,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",108,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",108,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"new","reqwest::multipart","Creates a new Form without any content.",110,{"inputs":[],"output":{"name":"form"}}],[11,"boundary","","Get the boundary that this form will use.",110,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"text","","Add a data field with supplied name and value.",110,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"name":"form"}}],[11,"file","","Adds a file field.",110,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u"}],"output":{"generics":["form"],"name":"result"}}],[11,"part","","Adds a customized Part.",110,{"inputs":[{"name":"self"},{"name":"t"},{"name":"part"}],"output":{"name":"form"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"text","","Makes a text parameter.",111,{"inputs":[{"name":"t"}],"output":{"name":"part"}}],[11,"reader","","Adds a generic reader.",111,{"inputs":[{"name":"t"}],"output":{"name":"part"}}],[11,"reader_with_length","","Adds a generic reader with known length.",111,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"part"}}],[11,"file","","Makes a file parameter.",111,{"inputs":[{"name":"t"}],"output":{"generics":["part"],"name":"result"}}],[11,"mime","","Sets the mime, builder style.",111,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"part"}}],[11,"file_name","","Sets the filename, builder style.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"part"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ExtendedValue"],[8,"Header"],[3,"EntityTag"],[4,"MediaDesc"],[4,"ReferrerPolicy"],[3,"AcceptCharset"],[4,"IfNoneMatch"],[3,"AcceptLanguage"],[3,"Expires"],[3,"ContentType"],[3,"LanguageTag"],[3,"StrictTransportSecurity"],[3,"ContentLanguage"],[3,"AccessControlMaxAge"],[3,"Basic"],[3,"QualityItem"],[4,"RelationType"],[4,"IfRange"],[4,"RetryAfter"],[3,"Te"],[3,"ContentLocation"],[3,"AcceptEncoding"],[4,"Encoding"],[3,"Connection"],[3,"CacheControl"],[3,"LastEventId"],[4,"CacheDirective"],[4,"Expect"],[3,"From"],[4,"IfMatch"],[3,"AcceptRanges"],[3,"AccessControlExposeHeaders"],[4,"Vary"],[3,"ETag"],[3,"SetCookie"],[3,"TransferEncoding"],[8,"Scheme"],[3,"IfModifiedSince"],[3,"Upgrade"],[3,"AccessControlAllowHeaders"],[3,"Protocol"],[3,"Date"],[3,"ProxyAuthorization"],[3,"IfUnmodifiedSince"],[3,"ContentLength"],[3,"Accept"],[4,"Preference"],[3,"Bearer"],[4,"ContentRangeSpec"],[4,"ConnectionOption"],[4,"DispositionParam"],[4,"RangeUnit"],[4,"Range"],[3,"Prefer"],[3,"AccessControlRequestMethod"],[3,"Warning"],[3,"LastModified"],[3,"AccessControlAllowMethods"],[4,"ProtocolName"],[4,"AccessControlAllowOrigin"],[4,"Charset"],[3,"PreferenceApplied"],[4,"DispositionType"],[3,"ContentRange"],[3,"Allow"],[4,"Pragma"],[3,"AccessControlRequestHeaders"],[4,"ByteRangeSpec"],[3,"ContentDisposition"],[3,"Authorization"],[3,"ContentEncoding"],[4,"Method"],[4,"StatusCode"],[4,"UrlError"],[3,"Error"],[3,"Body"],[3,"Client"],[3,"ClientBuilder"],[3,"Proxy"],[3,"RedirectPolicy"],[3,"RedirectAttempt"],[3,"RedirectAction"],[3,"Request"],[3,"RequestBuilder"],[3,"Response"],[3,"Certificate"],[3,"Identity"],[3,"Referer"],[3,"AccessControlAllowCredentials"],[3,"Link"],[3,"Host"],[3,"Cookie"],[3,"LinkValue"],[3,"Server"],[3,"UserAgent"],[3,"Location"],[3,"Headers"],[3,"Origin"],[3,"HttpDate"],[3,"Quality"],[3,"Raw"],[3,"HeadersItems"],[3,"CookieIter"],[3,"HeaderView"],[3,"Mime"],[3,"Name"],[3,"Params"],[3,"FromStrError"],[3,"Url"],[3,"Formatter"],[3,"Form"],[3,"Part"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"generics":["demangle","trydemangleerror"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["safemem"] = {"doc":"Safe wrappers for memory-accessing functions like `std::ptr::copy()`.","items":[[5,"copy_over","safemem","Copy `len` elements from `src_idx` to `dest_idx`. Ranges may overlap.",null,null],[5,"write_bytes","","Safe wrapper for `std::ptr::write_bytes()`/`memset()`.",null,null],[5,"prepend","","Prepend `elems` to `vec`, resizing if necessary.",null,null]],"paths":[]};
searchIndex["scoped_tls"] = {"doc":"Scoped thread-local storage","items":[[3,"ScopedKey","scoped_tls","Type representing a thread local storage key corresponding to a reference to the type parameter `T`.",null,null],[11,"set","","Inserts a value into this scoped thread local storage slot for a duration of a closure.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"scoped_thread_local","","",null,null]],"paths":[[3,"ScopedKey"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"custom","","",1,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",1,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",3,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",3,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",3,null],[11,"deserialize_enum","","",3,null],[11,"deserialize_identifier","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",3,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",4,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",4,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",4,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",5,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",5,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_identifier","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",5,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",6,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",6,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_identifier","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",6,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",7,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_identifier","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",8,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",8,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_identifier","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",8,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",9,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",9,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_identifier","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",9,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",10,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",10,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_identifier","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",10,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",11,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",11,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_identifier","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",11,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",12,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",12,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_identifier","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",12,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",13,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",13,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",13,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",14,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",14,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",14,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",15,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",15,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",15,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",16,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",16,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",16,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",17,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",17,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",17,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_bool","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",18,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",18,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_identifier","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",18,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",18,null],[11,"variant_seed","","",18,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",19,null],[11,"deserialize_bool","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",19,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",19,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_identifier","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",19,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",19,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given string.",20,{"i":[{"n":"str"}],"o":{"n":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",20,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",20,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_identifier","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",20,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",20,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",21,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",21,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_identifier","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",21,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",21,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"deserialize_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",22,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",22,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_identifier","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",22,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant_seed","","",22,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,null],[11,"deserialize_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",23,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",23,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_identifier","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",23,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",23,null],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"seqdeserializer"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",24,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",24,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_element_seed","","",24,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",24,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"seqaccessdeserializer"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",25,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",25,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",25,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"deserialize_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",26,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",26,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",26,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_key_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"next_entry_seed","","",26,{"i":[{"n":"self"},{"n":"tk"},{"n":"tv"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"next_element_seed","","",26,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","",26,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"mapaccessdeserializer"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"deserialize_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",27,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",27,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_identifier","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",27,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"clone","serde::de","",28,{"i":[{"n":"self"}],"o":{"n":"ignoredany"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"default","","",28,{"o":{"n":"ignoredany"}}],[11,"expecting","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","",28,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i64","","",28,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_u64","","",28,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_f64","","",28,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_str","","",28,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_none","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","",28,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","",28,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_seq","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","",28,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_bytes","","",28,null],[11,"deserialize","","",28,{"i":[{"n":"d"}],"o":{"g":["ignoredany"],"n":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"i":[{"n":"usize"},{"n":"expected"}],"o":{"n":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"i":[{"n":"str"}],"o":{"n":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"visit_bool","","The input contains a boolean.",34,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"visit_i8","","The input contains an `i8`.",34,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[11,"visit_i16","","The input contains an `i16`.",34,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[11,"visit_i32","","The input contains an `i32`.",34,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[11,"visit_i64","","The input contains an `i64`.",34,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"visit_i128","","The input contains a `i128`.",34,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[11,"visit_u8","","The input contains a `u8`.",34,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[11,"visit_u16","","The input contains a `u16`.",34,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[11,"visit_u32","","The input contains a `u32`.",34,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"visit_u64","","The input contains a `u64`.",34,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"visit_u128","","The input contains a `u128`.",34,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[11,"visit_f32","","The input contains an `f32`.",34,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[11,"visit_f64","","The input contains an `f64`.",34,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[11,"visit_char","","The input contains a `char`.",34,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,{"i":[{"n":"self"},{"g":["u8"],"n":"vec"}],"o":{"n":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_some","","The input contains an optional that is present.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",34,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,{"i":[{"n":"self"},{"n":"d"}],"o":{"n":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_map","","The input contains a key-value map.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[11,"visit_enum","","The input contains an enum.",34,{"i":[{"n":"self"},{"n":"a"}],"o":{"n":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["option"],"n":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["option"],"n":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"g":["option"],"n":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,null],[10,"unit_variant","","Called when deserializing a variant with no values.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",39,null],[10,"into_deserializer","","Convert this value into a deserializer.",39,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"unexpected"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"unexpected"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_element","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_key","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_value","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"serialize_field","","",40,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"end","","",40,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,{"i":[{"n":"t"}],"o":{"n":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a sequence element.",44,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a sequence.",44,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_element","","Serialize a tuple element.",45,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple.",45,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple struct field.",46,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple struct.",46,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_field","","Serialize a tuple variant field.",47,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a tuple variant.",47,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_key","","Serialize a map key.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_value","","Serialize a map value.",48,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,{"i":[{"n":"self"},{"n":"k"},{"n":"v"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a map.",48,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct field.",49,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",49,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct.",49,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,null],[10,"serialize_field","","Serialize a struct variant field.",50,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"end","","Finish serializing a struct variant.",50,{"i":[{"n":"self"}],"o":{"n":"result"}}],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"i":[{"n":"d"}],"o":{"n":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",42,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,null],[16,"Error","","The error type when some error occurs during serialization.",43,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,null],[10,"serialize_bool","","Serialize a `bool` value.",43,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",43,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",43,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",43,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",43,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"result"}}],[11,"serialize_i128","","Serialize an `i128` value.",43,{"i":[{"n":"self"},{"n":"i128"}],"o":{"n":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",43,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",43,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",43,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",43,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"result"}}],[11,"serialize_u128","","Serialize a `u128` value.",43,{"i":[{"n":"self"},{"n":"u128"}],"o":{"n":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",43,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",43,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"result"}}],[10,"serialize_char","","Serialize a character.",43,{"i":[{"n":"self"},{"n":"char"}],"o":{"n":"result"}}],[10,"serialize_str","","Serialize a `&str`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,null],[10,"serialize_none","","Serialize a [`None`] value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",43,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"}],"o":{"n":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"t"}],"o":{"n":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,{"i":[{"n":"self"},{"g":["usize"],"n":"option"}],"o":{"n":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"u32"},{"n":"str"},{"n":"usize"}],"o":{"n":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_map","","Collect an iterator as a map.",43,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",null,null]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}],[5,"derive_deserialize","","",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"i":[{"n":"r"}],"o":{"n":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"i":[{"n":"str"}],"o":{"n":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"i":[{"n":"value"}],"o":{"g":["error"],"n":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"i":[{"n":"t"}],"o":{"g":["value","error"],"n":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"i":[{"n":"r"}],"o":{"n":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"i":[{"n":"str"}],"o":{"n":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"i":[{"n":"self"}],"o":{"n":"streamdeserializer"}}],[11,"from_str","serde_json","",2,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",3,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"column","","One-based column number at which the error was detected.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"classify","","Categorizes the cause of this error.",5,{"i":[{"n":"self"}],"o":{"n":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"category"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"category"}],"o":{"n":"bool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"custom","","",5,{"i":[{"n":"t"}],"o":{"n":"error"}}],[11,"invalid_type","","",5,{"i":[{"n":"unexpected"},{"n":"expected"}],"o":{"n":"self"}}],[11,"custom","","",5,{"i":[{"n":"t"}],"o":{"n":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",6,null],[13,"Occupied","","An occupied Entry.",6,null],[11,"new","","Makes a new empty Map.",7,{"o":{"n":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"clear","","Clears the map, removing all values.",7,{"i":[{"n":"self"}]}],[11,"get","","Returns a reference to the value corresponding to the key.",7,{"i":[{"n":"self"},{"n":"q"}],"o":{"g":["value"],"n":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,{"i":[{"n":"self"},{"n":"q"}],"o":{"g":["value"],"n":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",7,{"i":[{"n":"self"},{"n":"string"},{"n":"value"}],"o":{"g":["value"],"n":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,{"i":[{"n":"self"},{"n":"q"}],"o":{"g":["value"],"n":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"entry"}}],[11,"len","","Returns the number of elements in the map.",7,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",7,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",7,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",7,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,{"i":[{"n":"self"}],"o":{"n":"valuesmut"}}],[11,"default","","",7,{"o":{"n":"self"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"self"}],"o":{"n":"bool"}}],[11,"index","","",7,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"value"}}],[11,"index_mut","","",7,{"i":[{"n":"self"},{"n":"q"}],"o":{"n":"value"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"serialize","","",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",7,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"from_iter","","",7,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"extend","","",7,{"i":[{"n":"self"},{"n":"t"}]}],[11,"key","","Returns a reference to this entry's key.",6,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"value"}}],[11,"key","","Gets a reference to the key in the entry.",9,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"get","","Gets a reference to the value in the entry.",9,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"next","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",10,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_iter","","",7,null],[11,"next","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",13,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",14,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",15,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",16,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,null],[13,"Solidus","","An escaped solidus `/`",16,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"i":[{"n":"w"},{"n":"t"}],"o":{"n":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"i":[{"n":"t"}],"o":{"g":["vec"],"n":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"i":[{"n":"t"}],"o":{"g":["string"],"n":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"i8"}],"o":{"n":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"i16"}],"o":{"n":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"i32"}],"o":{"n":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"i64"}],"o":{"n":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"u8"}],"o":{"n":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"u16"}],"o":{"n":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"u32"}],"o":{"n":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"u64"}],"o":{"n":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"f32"}],"o":{"n":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"f64"}],"o":{"n":"result"}}],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"str"}],"o":{"n":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"str"}],"o":{"n":"result"}}],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"charescape"}],"o":{"n":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"end_array_value","","Called after every array value.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object_key","","Called before every object key.",17,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object_value","","Called after every object value.",17,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"new","","Creates a new JSON serializer.",18,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",18,{"i":[{"n":"w"}],"o":{"n":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,{"i":[{"n":"w"},{"n":"f"}],"o":{"n":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,{"i":[{"n":"self"}],"o":{"n":"w"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"compactformatter"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"prettyformatter"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,{"o":{"n":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,null],[11,"default","","",20,{"o":{"n":"self"}}],[11,"begin_array","","",20,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_array","","",20,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_array_value","","",20,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"end_array_value","","",20,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object","","",20,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object","","",20,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"begin_object_key","","",20,{"i":[{"n":"self"},{"n":"w"},{"n":"bool"}],"o":{"n":"result"}}],[11,"begin_object_value","","",20,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[11,"end_object_value","","",20,{"i":[{"n":"self"},{"n":"w"}],"o":{"n":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"i":[{"n":"t"}],"o":{"g":["value","error"],"n":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"i":[{"n":"value"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize","","",0,{"i":[{"n":"d"}],"o":{"g":["value"],"n":"result"}}],[11,"from_str","","",0,{"i":[{"n":"str"}],"o":{"g":["value","error"],"n":"result"}}],[11,"deserialize_any","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i8","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i16","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u8","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u16","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_f32","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_f64","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i128","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u128","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_option","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",0,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",0,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",0,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"from","","",0,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",0,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"i":[{"g":["str"],"n":"cow"}],"o":{"n":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"i":[{"g":["string","value"],"n":"map"}],"o":{"n":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"n":"value"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"bool"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"serialize","","",0,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",null,null],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["value"],"n":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"i":[{"n":"self"},{"n":"i"}],"o":{"g":["value"],"n":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["map"],"n":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["map"],"n":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["vec"],"n":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["value"],"n":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["value"],"n":"option"}}],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"default","","",0,{"o":{"n":"value"}}],[11,"clone","serde_json","",2,{"i":[{"n":"self"}],"o":{"n":"number"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,{"i":[{"n":"self"}],"o":{"g":["i64"],"n":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,{"i":[{"n":"self"}],"o":{"g":["u64"],"n":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,{"i":[{"n":"f64"}],"o":{"g":["number"],"n":"option"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"serialize","","",2,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",2,{"i":[{"n":"d"}],"o":{"g":["number"],"n":"result"}}],[11,"deserialize_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u8","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u16","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_f32","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_f64","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_i128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_u128","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"g":["error"],"n":"result"}}],[11,"deserialize_bool","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",2,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",2,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",2,null],[11,"deserialize_enum","","",2,null],[11,"deserialize_identifier","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",2,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"from","","",2,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"u64"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"i64"}],"o":{"n":"self"}}],[11,"from","","",2,{"i":[{"n":"isize"}],"o":{"n":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,{"i":[{"n":"r"}],"o":{"n":"self"}}],[11,"next","","",21,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"peek","","",21,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"discard","","",21,{"i":[{"n":"self"}]}],[11,"position","","",21,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"peek_position","","",21,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"byte_offset","","",21,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"parse_str","","",21,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"parse_str_raw","","",21,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"ignore_str","","",21,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,null],[11,"next","","",22,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"peek","","",22,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"discard","","",22,{"i":[{"n":"self"}]}],[11,"position","","",22,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"peek_position","","",22,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"byte_offset","","",22,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"parse_str","","",22,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"parse_str_raw","","",22,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"ignore_str","","",22,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"next","","",23,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"peek","","",23,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"discard","","",23,{"i":[{"n":"self"}]}],[11,"position","","",23,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"peek_position","","",23,{"i":[{"n":"self"}],"o":{"n":"position"}}],[11,"byte_offset","","",23,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"parse_str","","",23,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"parse_str_raw","","",23,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["reference"],"n":"result"}}],[11,"ignore_str","","",23,{"i":[{"n":"self"}],"o":{"n":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_urlencoded"] = {"doc":"`x-www-form-urlencoded` meets Serde","items":[[3,"Deserializer","serde_urlencoded","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[0,"de","","Deserialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Error","serde_urlencoded::de","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"Deserializer","","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Returns a new `Deserializer`.",0,{"inputs":[{"name":"urlencodedparse"}],"output":{"name":"self"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[0,"ser","serde_urlencoded","Serialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","serde_urlencoded::ser","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"SeqSerializer","","Sequence serializer.",null,null],[3,"TupleSerializer","","Tuple serializer.",null,null],[3,"TupleStructSerializer","","Tuple struct serializer.",null,null],[3,"TupleVariantSerializer","","Tuple variant serializer.",null,null],[3,"MapSerializer","","Map serializer.",null,null],[3,"StructSerializer","","Struct serializer.",null,null],[3,"StructVariantSerializer","","Struct variant serializer.",null,null],[4,"Error","","Errors returned during serializing to `application/x-www-form-urlencoded`.",null,null],[13,"Custom","","",1,null],[13,"Utf8","","",1,null],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string","error"],"name":"result"}}],[11,"new","","Returns a new `Serializer`.",2,{"inputs":[{"name":"urlencodedserializer"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, in the case of a `Utf8` error.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"serialize_bool","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_i64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_u64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_f64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_char","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_str","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_bytes","","Returns an error.",2,null],[11,"serialize_unit","","Returns an error.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_unit_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_struct","","Serializes the inner value, ignoring the newtype name.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_newtype_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_none","","Returns `Ok`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_some","","Serializes the given value.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_seq","","Serialize a sequence, given length (if any) is ignored.",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_tuple_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_map","","Serializes a map, given length is ignored.",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct","","Serializes a struct, given length is ignored.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_struct_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_element","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_element","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_entry","","",7,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_key","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_value","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"end","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","serde_urlencoded::de","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"custom","","",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Deserializer"],[4,"Error"],[3,"Serializer"],[3,"SeqSerializer"],[3,"TupleSerializer"],[3,"TupleStructSerializer"],[3,"TupleVariantSerializer"],[3,"MapSerializer"],[3,"StructSerializer"],[3,"StructVariantSerializer"],[3,"Error"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"Entry","","A handle to an occupied slot in the `Slab`",null,null],[3,"VacantEntry","","A handle to a vacant slot in the `Slab`",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"with_capacity","","Returns an empty `Slab` with the requested capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"len","","Returns the number of values stored by the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the total capacity of the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Slab` is storing no values",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"available","","Returns the number of available slots remaining in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_available","","Returns true if the `Slab` has available slots",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if the `Slab` contains a value for the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","Get a reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","Insert a value into the slab, returning the associated token",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"entry","","Returns a handle to an entry.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["entry"],"name":"option"}}],[11,"vacant_entry","","Returns a handle to a vacant entry.",0,{"inputs":[{"name":"self"}],"output":{"generics":["vacantentry"],"name":"option"}}],[11,"remove","","Releases the given slot",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"retain","","Retain only the elements specified by the predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"iter","","An iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","A mutable iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Empty the slab, by freeing all entries",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Slab`. Does nothing if the capacity is already sufficient.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace","","Replace the value stored in the entry",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Apply the function to the current value, replacing it with the result of the function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"remove","","Remove and return the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Get a reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_mut","","Convert the entry handle to a mutable reference",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index","","Return the entry index",1,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"insert","","Insert a value into the entry",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"entry"}}],[11,"index","","Returns the entry index",2,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline and fall back to the heap for larger allocations.","items":[[3,"Drain","smallvec","",null,null],[3,"SmallVec","","",null,null],[3,"IntoIter","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","",null,null],[10,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Array","","",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","",3,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","",3,null],[11,"push_all_move","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","",3,null],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","",3,null],[11,"insert","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"from","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",3,null]],"paths":[[8,"VecLike"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stdweb"] = {"doc":"The goal of this crate is to provide Rust bindings to the Web APIs and to allow a high degree of interoperability between Rust and JavaScript.","items":[[3,"Undefined","stdweb","A unit type representing JavaScript's `undefined`.",null,null],[3,"Null","","A unit type representing JavaScript's `null`.",null,null],[3,"Reference","","A type representing a reference to a JavaScript value.",null,null],[3,"Number","","A type representing a JavaScript number.",null,null],[3,"Object","","A type representing a JavaScript object.",null,null],[3,"Array","","A type representing a JavaScript array.",null,null],[3,"Symbol","","A type representing a JavaScript `Symbol`.",null,null],[3,"UnsafeTypedArray","","A wrapper type for exposing raw Rust slices as `TypedArray`s at zero cost without copying.",null,null],[3,"Once","","A wrapper for passing `FnOnce` callbacks into the `js!` macro.",null,null],[12,"0","","",0,null],[3,"DiscardOnDrop","","If you have a value which implements `Discard`, you can use `DiscardOnDrop::new(value)` which will wrap the value. When the wrapper is dropped it will automatically call `value.discard()`.",null,null],[4,"Value","","A type representing a JavaScript value.",null,null],[13,"Undefined","","",1,null],[13,"Null","","",1,null],[13,"Bool","","",1,null],[13,"Number","","",1,null],[13,"Symbol","","",1,null],[13,"String","","",1,null],[13,"Reference","","",1,null],[5,"initialize","","Initializes the library.",null,{}],[5,"event_loop","","Runs Emscripten's event loop.",null,{}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"undefined"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"undefined"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",2,{"i":[{"n":"self"},{"n":"undefined"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",2,{"i":[{"n":"self"},{"n":"undefined"}],"o":{"n":"ordering"}}],[11,"hash","","",2,null],[11,"default","","",2,{"o":{"n":"undefined"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"null"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"null"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"null"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"null"}],"o":{"n":"ordering"}}],[11,"hash","","",3,null],[11,"default","","",3,{"o":{"n":"null"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"downcast","","Converts this reference into the given type `T`; checks whenever the reference is really of type `T` and returns `None` if it's not.",4,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"reference"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"drop","","",4,{"i":[{"n":"self"}]}],[11,"as_ref","","",4,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"is_null","","Checks whenever the Value is of the Null variant.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_symbol","","Checks whenever the Value is of the Symbol variant.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_reference","","Checks whenever the Value is of the Reference variant.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_object","","Checks whenever the Value is a reference to an `Object`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_array","","Checks whenever the Value is a reference to an `Array`.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_reference","","Gets a reference to the Reference inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"option"}}],[11,"as_object","","Gets a reference to the Object inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"as_array","","Gets a reference to the Array inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"into_reference","","Returns the Reference inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"option"}}],[11,"into_object","","Returns the Object inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["object"],"n":"option"}}],[11,"into_array","","Returns the Array inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["array"],"n":"option"}}],[11,"into_reference_unchecked","","Converts a Reference inside this `Value` into the given type `T`; doesn't check whenever the reference is really of type `T`.",1,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_string","","Returns the `String` inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"as_str","","Returns a borrow of the string inside this `Value`.",1,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"as_ref","","",1,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"undefined"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"undefined"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"undefined"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"null"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"null"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"null"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"bool"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"char"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"char"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"char"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","",1,null],[11,"from","","",1,null],[11,"from","","",1,{"i":[{"n":"btreemap"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"btreemap"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"btreemap"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"hashmap"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"hashmap"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"hashmap"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"i8"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"i16"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"i32"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"u8"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"u16"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"u32"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"f32"}],"o":{"n":"result"}}],[11,"from","","",1,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"from","","",1,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"try_from","","",1,{"i":[{"n":"f64"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"undefined"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"undefined"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"undefined"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"null"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"null"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"null"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"bool"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"bool"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"bool"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"str"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"string"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"string"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"string"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"char"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"char"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"char"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"vec"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"vec"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"vec"}],"o":{"n":"result"}}],[11,"try_from","","",1,null],[11,"try_from","","",1,null],[11,"try_from","","",1,{"i":[{"n":"btreemap"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"btreemap"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"btreemap"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"hashmap"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"hashmap"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"hashmap"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"symbol"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"btreemap"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"btreemap"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"btreemap"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"hashmap"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"hashmap"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"hashmap"}],"o":{"n":"result"}}],[11,"try_from","","",6,{"i":[{"n":"vec"}],"o":{"n":"result"}}],[11,"try_from","","",6,{"i":[{"n":"vec"}],"o":{"n":"result"}}],[11,"try_from","","",6,{"i":[{"n":"vec"}],"o":{"n":"result"}}],[11,"try_from","","",6,null],[11,"try_from","","",6,null],[11,"try_from","","",1,{"i":[{"n":"i64"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"u64"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"usize"}],"o":{"n":"result"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"undefined"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"null"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"undefined"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"null"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"string"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"value"}],"o":{"n":"bool"}}],[11,"try_from","","",2,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",3,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",8,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",4,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"number"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"ne","","",7,{"i":[{"n":"self"},{"n":"number"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_ref","","",7,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"i8"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"i16"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"i32"}],"o":{"n":"self"}}],[11,"try_from","","",7,{"i":[{"n":"i64"}],"o":{"n":"result"}}],[11,"from","","",7,{"i":[{"n":"u8"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"u16"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"u32"}],"o":{"n":"self"}}],[11,"try_from","","",7,{"i":[{"n":"u64"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"usize"}],"o":{"n":"result"}}],[11,"from","","",7,{"i":[{"n":"f32"}],"o":{"n":"self"}}],[11,"from","","",7,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"try_from","","",7,{"i":[{"n":"i8"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"i16"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"i32"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"u8"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"u16"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"u32"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"f32"}],"o":{"n":"result"}}],[11,"try_from","","",7,{"i":[{"n":"f64"}],"o":{"n":"result"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"i8"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"i16"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"i64"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"u8"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"f32"}],"o":{"n":"bool"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"f64"}],"o":{"n":"bool"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"object"}}],[11,"eq","","",5,{"i":[{"n":"self"},{"n":"object"}],"o":{"n":"bool"}}],[11,"ne","","",5,{"i":[{"n":"self"},{"n":"object"}],"o":{"n":"bool"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"instance_of","","",5,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",5,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",5,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"object"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"object"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",5,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"len","","Returns the number of elements in this particular object.",5,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from","","",5,{"i":[{"n":"btreemap"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"btreemap"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"btreemap"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"hashmap"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"hashmap"}],"o":{"n":"self"}}],[11,"from","","",5,{"i":[{"n":"hashmap"}],"o":{"n":"self"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"array"}}],[11,"eq","","",6,{"i":[{"n":"self"},{"n":"array"}],"o":{"n":"bool"}}],[11,"ne","","",6,{"i":[{"n":"self"},{"n":"array"}],"o":{"n":"bool"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"instance_of","","",6,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",6,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",6,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"from","","",4,{"i":[{"n":"array"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"array"}],"o":{"n":"result"}}],[11,"try_from","","",6,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",6,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",6,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",6,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"len","","Returns the number of elements in this particular array.",6,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"from","","",6,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","",6,{"i":[{"n":"vec"}],"o":{"n":"self"}}],[11,"from","","",6,null],[11,"from","","",6,null],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"symbol"}],"o":{"n":"bool"}}],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"from","","",1,{"i":[{"n":"symbol"}],"o":{"n":"self"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new","","Creates a new `UnsafeTypedArray`.",9,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"instance_of","","",4,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `DiscardOnDrop`.",10,{"i":[{"n":"a"}],"o":{"n":"self"}}],[11,"leak","","Returns the wrapped `discarder`.",10,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[11,"from","","",4,{"i":[{"n":"date"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"date"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"document"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"document"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"window"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"window"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"eventtarget"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"node"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"element"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"rect"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"rect"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"htmlelement"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"htmlelement"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"canvaselement"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"canvaselement"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"imageelement"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"imageelement"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"inputelement"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"inputelement"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"textareaelement"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"textareaelement"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"selectelement"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"selectelement"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"optionelement"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"optionelement"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"tokenlist"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"tokenlist"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"documentfragment"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"documentfragment"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"textnode"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"textnode"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"nodelist"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"nodelist"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"stringmap"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"stringmap"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"location"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"location"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"storage"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"storage"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"blob"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"blob"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"filelist"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"filelist"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"filereader"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"filereader"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"arraybuffer"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"arraybuffer"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"typedarray"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"typedarray"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"xmlhttprequest"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"xmlhttprequest"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"history"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"history"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"websocket"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"websocket"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"canvasrenderingcontext2d"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"canvasrenderingcontext2d"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"canvasgradient"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"canvasgradient"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"canvaspattern"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"canvaspattern"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"imagedata"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"imagedata"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"textmetrics"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"textmetrics"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mutationobserver"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mutationobserver"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"error"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"domexception"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"hierarchyrequesterror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"hierarchyrequesterror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"invalidaccesserror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"invalidaccesserror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"notfounderror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"notfounderror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"securityerror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"securityerror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"syntaxerror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"syntaxerror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"indexsizeerror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"indexsizeerror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"invalidstateerror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"invalidstateerror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"typeerror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"typeerror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"notsupportederror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"notsupportederror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"invalidcharactererror"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"invalidcharactererror"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"changeevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"changeevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"inputevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"inputevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"resourceloadevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"resourceloadevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"resourceabortevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"resourceabortevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"resourceerrorevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"resourceerrorevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"resizeevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"resizeevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"readystatechangeevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"readystatechangeevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"submitevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"submitevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"selectionchangeevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"selectionchangeevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"focusevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"focusevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"blurevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"blurevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"gamepadconnectedevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"gamepadconnectedevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"gamepaddisconnectedevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"gamepaddisconnectedevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"hashchangeevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"hashchangeevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"popstateevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"popstateevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"keypressevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"keypressevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"keydownevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"keydownevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"keyupevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"keyupevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"clickevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"clickevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"auxclickevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"auxclickevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"contextmenuevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"contextmenuevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"doubleclickevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"doubleclickevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mousedownevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mousedownevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mouseupevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mouseupevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mousemoveevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mousemoveevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mouseoverevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mouseoverevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mouseoutevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mouseoutevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mouseenterevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mouseenterevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"mouseleaveevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"mouseleaveevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointeroverevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointeroverevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointerenterevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointerenterevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointerdownevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointerdownevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointermoveevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointermoveevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointerupevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointerupevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointercancelevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointercancelevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointeroutevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointeroutevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"pointerleaveevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"pointerleaveevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"gotpointercaptureevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"gotpointercaptureevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"lostpointercaptureevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"lostpointercaptureevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"progressevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"progressevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"progressloadevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"progressloadevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"loadstartevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"loadstartevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"loadendevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"loadendevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"progressabortevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"progressabortevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"progresserrorevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"progresserrorevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"socketcloseevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"socketcloseevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"socketerrorevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"socketerrorevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"socketopenevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"socketopenevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"socketmessageevent"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"socketmessageevent"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"htmlcollection"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"htmlcollection"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"gamepadbutton"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"gamepadbutton"}],"o":{"n":"result"}}],[11,"from","","",4,{"i":[{"n":"gamepad"}],"o":{"n":"self"}}],[11,"try_from","","",4,{"i":[{"n":"gamepad"}],"o":{"n":"result"}}],[11,"serialize","","",2,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",2,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"serialize","","",3,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",3,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"serialize","","",7,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",7,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"serialize","","",1,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"result"}}],[11,"deserialize","","",1,{"i":[{"n":"d"}],"o":{"n":"result"}}],[11,"deserialize_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_newtype_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",7,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_identifier","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",7,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_any","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_option","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_enum","","",1,null],[11,"deserialize_newtype_struct","","",1,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bool","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u8","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u16","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u32","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_u64","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i8","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i16","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i32","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_i64","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f32","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_f64","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_char","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_str","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_string","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_seq","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_bytes","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_byte_buf","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_map","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_unit_struct","","",1,{"i":[{"n":"self"},{"n":"str"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple_struct","","",1,{"i":[{"n":"self"},{"n":"str"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_struct","","",1,null],[11,"deserialize_identifier","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_tuple","","",1,{"i":[{"n":"self"},{"n":"usize"},{"n":"v"}],"o":{"n":"result"}}],[11,"deserialize_ignored_any","","",1,{"i":[{"n":"self"},{"n":"v"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"serde"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"serde"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"serde"}],"o":{"n":"result"}}],[11,"try_from","","",1,{"i":[{"n":"jsonvalue"}],"o":{"n":"result"}}],[0,"serde","","A module with serde-related APIs.",null,null],[3,"ConversionError","stdweb::serde","A structure denoting a conversion error encountered during serialization or deserialization.",null,null],[3,"Serde","","A newtype which makes it possible to pass a value which implements Serde's `Serializable` into the js! macro.",null,null],[12,"0","","",11,null],[0,"web","stdweb","A module with bindings to the Web APIs.",null,null],[3,"Window","stdweb::web","The `Window` object represents a window containing a DOM document.",null,null],[3,"Document","","The `Document` interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",null,null],[3,"Date","","(JavaScript docs) https://www.ecma-international.org/ecma-262/6.0/#sec-date-constructor",null,null],[3,"EventTarget","","A reference to a JavaScript object which implements the IEventTarget interface.",null,null],[3,"EventListenerHandle","","A handle to a particular event listener.",null,null],[3,"RequestAnimationFrameHandle","","A handle to a pending animation frame request.",null,null],[3,"Node","","A reference to a JavaScript object which implements the INode interface.",null,null],[3,"Element","","A reference to a JavaScript object which implements the IElement interface.",null,null],[3,"DocumentFragment","","A reference to a JavaScript object DocumentFragment.",null,null],[3,"TextNode","","The `TextNode` represents the textual content of an IElement",null,null],[3,"HtmlElement","","A reference to a JavaScript object which implements the IHtmlElement interface.",null,null],[3,"Rect","","Represents a rectangle. (JavaScript docs)",null,null],[3,"TokenList","","The `TokenList` represents a set of space-separated tokens.",null,null],[3,"NodeList","","`NodeList` objects are collections of nodes such as those returned by properties such as INode::child_nodes and the Document::query_selector_all method.",null,null],[3,"StringMap","","Used by the `dataset` HTML attribute to represent data for custom attributes added to elements.",null,null],[3,"Storage","","The `Storage` interface of the Web Storage API provides access to the session storage or local storage for a particular domain.",null,null],[3,"Location","","The `Location` interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked `Location`, accessible via Document::location and Window::location respectively.",null,null],[3,"ArrayBuffer","","The `ArrayBuffer` object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an ArrayBuffer; instead, you create an TypedArray to do it.",null,null],[3,"TypedArray","","JavaScript typed arrays are array-like objects and provide a mechanism for accessing raw binary data.",null,null],[3,"FileReader","","The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.",null,null],[3,"FileList","","An object of this type is returned by the files property of the HTML `<input>` element; this lets you access the list of files selected with the `<input type=\"file\">` element. It's also used for a list of files dropped into web content when using the drag and drop API.",null,null],[3,"History","","(JavaScript docs)",null,null],[3,"WebSocket","","The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.",null,null],[3,"SocketCloseCode","","Wrapper type around a CloseEvent code, indicating why the WebSocket was closed",null,null],[12,"0","","",12,null],[3,"CanvasRenderingContext2d","","Used for drawing rectangles, text, images and other objects onto the canvas element.",null,null],[3,"CanvasGradient","","The CanvasGradient struct represents an opaque object describing a gradient.  It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or  CanvasRenderingContext2D.createRadialGradient().",null,null],[3,"CanvasPattern","","The CanvasPattern struct represents an opaque object describing a pattern, based on an image,  a canvas or a video, created by the CanvasRenderingContext2D.createPattern() method. Intentionally blank, no non-experimental properties or methods.",null,null],[3,"ImageData","","The ImageData struct represents the underlying pixel data of an area of a `<canvas>` element. You can create a new instance by calling `CanvasRenderingContext2d::create_image_data` or `CanvasRenderingContext2d::create_image_data_size_of`.",null,null],[3,"TextMetrics","","The TextMetrics struct represents the dimension of a text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.",null,null],[3,"MutationObserver","","Provides a way to receive notifications about changes to the DOM.",null,null],[3,"MutationObserverHandle","","A wrapper which ensures that memory is properly cleaned up when it's no longer needed.",null,null],[3,"MutationObserverInit","","Specifies which changes should be observed for the target.",null,null],[12,"child_list","","If `true` it will observe all inserts and removals of the target's children (including text nodes).",13,null],[12,"attributes","","If `true` it will observe all changes to the target's attributes.",13,null],[12,"character_data","","If `true` it will observe all changes to the `CharacterData`'s data.",13,null],[12,"subtree","","If `true` it will observe all changes to the target, the target's children, and the target's sub-children.",13,null],[12,"attribute_old_value","","If `true` it will store the target's old attribute value in `old_value`.",13,null],[12,"character_data_old_value","","If `true` it will store the `CharacterData`'s old data in `old_data`.",13,null],[12,"attribute_filter","","If `Some` it will only observe the specified attributes. The attributes should be specified without a namespace.",13,null],[3,"XmlHttpRequest","","Use XmlHttpRequest (XHR) objects to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. XmlHttpRequest is used heavily in Ajax programming.",null,null],[3,"Blob","","A reference to a JavaScript object which implements the IBlob interface.",null,null],[3,"HtmlCollection","","The `HtmlCollection` interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.",null,null],[3,"Gamepad","","An individual gamepad/controller.",null,null],[3,"GamepadButton","","The state of an individual button on a gamepad device.",null,null],[4,"CrossOriginSetting","","Represents CORS (Cross Origin Resource Sharing) setting for an HTML element.",null,null],[13,"None","","CORS is not used for this element.",14,null],[13,"Anonymous","","CORS requests for this element will not have the credentials flag set.",14,null],[13,"UseCredentials","","CORS requests for this element will have the credentials flag set; this means the request will provide credentials.",14,null],[4,"CloneKind","","An enum which determines whenever the DOM Node's children will also be cloned or not.",null,null],[13,"Shallow","","Will not clone the children.",15,null],[13,"Deep","","Will clone the children.",15,null],[4,"NodeType","","Determines the type of a `Node`.",null,null],[13,"Element","","An `Element` such as `<p>` or `<div>`.",16,null],[13,"Text","","The actual `Text` of `Element` or `Attr`.",16,null],[13,"ProcessingInstruction","","A `ProcessingInstruction` of an XML document.",16,null],[13,"Comment","","A `Comment` node.",16,null],[13,"Document","","A 'Document' node.",16,null],[13,"DocumentType","","A 'DocumentType' node such as `<!DOCTYPE html>`",16,null],[13,"DocumentFragment","","A 'DocumentFragment' node.",16,null],[13,"Attribute","","Deprecated.",16,null],[13,"CDataSection","","Deprecated.",16,null],[13,"XmlEntityReference","","Deprecated.",16,null],[13,"XmlEntity","","Deprecated.",16,null],[13,"XmlNotation","","Deprecated.",16,null],[4,"FileReaderResult","","The result of a read operation performed with a FileReader.",null,null],[13,"String","","A string; a result of calling FileReader::read_as_text.",17,null],[13,"ArrayBuffer","","An ArrayBuffer; a result of calling FileReader::read_as_array_buffer.",17,null],[4,"FileReaderReadyState","","A number indicating the state of the `FileReader`.",null,null],[13,"Empty","","No data has been loaded yet.",18,null],[13,"Loading","","Data is currently being loaded.",18,null],[13,"Done","","The entire read request has been completed.",18,null],[4,"SocketBinaryType","","The type of binary data being transmitted by the WebSocket connection.",null,null],[13,"Blob","","A Blob object represents a file-like object of immutable, raw data. (Javascript docs)",19,null],[13,"ArrayBuffer","","The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. (Javascript docs)",19,null],[4,"SocketReadyState","","A number indicating the state of the `WebSocket`.",null,null],[13,"Connecting","","",20,null],[13,"Open","","",20,null],[13,"Closing","","",20,null],[13,"Closed","","",20,null],[4,"CanvasStyle","","Certain style functions can return multiple types",null,null],[13,"String","","String representing the style",21,null],[13,"CanvasGradient","","CanvasGradient representing the style",21,null],[13,"CanvasPattern","","CanvasPattern representing the style",21,null],[4,"CompositeOperation","","The type of compositing operation to apply when drawing new shapes",null,null],[13,"SourceOver","","Draws new shapes over existing canvas content",22,null],[13,"SourceIn","","Draws new shapes over existing canvas content, but only where existing canvas content overlaps. Anything not in that area becomes transparent.",22,null],[13,"SourceOut","","New shapes are drawn where there is no existing canvas content. Everything else (including old canvas content) is made transparent.",22,null],[13,"SourceAtop","","Draws new shapes only where there is existing canvas content, over existing canvas content",22,null],[13,"DestinationOver","","Draws new shapes behind existing canvas content",22,null],[13,"DestinationIn","","Keeps existing canvas content where it overlaps with the new shape. Everything outside the overlap is made transparent.",22,null],[13,"DestinationOut","","The existing content is kept where it doesn't overlap with the new shape. Everything else, including the new shape area, is made transparent.",22,null],[13,"DestinationAtop","","Existing content is kept only where it overlaps with the new shape. The new shape is drawn behind the existing content.",22,null],[13,"Lighter","","Where both shapes overlap, the new color is determined by adding color values",22,null],[13,"Copy","","Only the new shape is shown",22,null],[13,"Xor","","Where both shapes overlap, make it transparent",22,null],[13,"Multiply","","The pixels of the new and old layer are multiplied. (Pixel values are in the range of [0,1], so this makes a darker picture)",22,null],[13,"Screen","","Pixels from both new and old are inverted, multiplied together, then inverted again. (Pixel values are in the range of [0,1], so this makes a lighter picture)",22,null],[13,"Overlay","","Applies Multiply to dark colors in the existing content, and Screen to bright colors in the existing content",22,null],[13,"Darken","","Retains the darkest pixels",22,null],[13,"Lighten","","Retains the lighest pixels",22,null],[13,"ColorDodge","","Divides the bottom layer by the inverted top layer.",22,null],[13,"ColorBurn","","Divides the inverted bottom layer by the top layer, and then inverts the result.",22,null],[13,"HardLight","","A combination of multiply and screen like overlay, but with top and bottom layer swapped.",22,null],[13,"SoftLight","","A softer version of hard-light. Pure black or white does not result in pure black or white.",22,null],[13,"Difference","","Subtracts the bottom layer from the top layer or the other way round to always get a positive value.",22,null],[13,"Exclusion","","Like difference, but with lower contrast.",22,null],[13,"Hue","","Preserves the luma and chroma of the bottom layer, while adopting the hue of the top layer.",22,null],[13,"Saturation","","Preserves the luma and hue of the bottom layer, while adopting the chroma of the top layer.",22,null],[13,"Color","","Preserves the luma of the bottom layer, while adopting the hue and chroma of the top layer.",22,null],[13,"Luminosity","","Preserves the hue and chroma of the bottom layer, while adopting the luma of the top layer.",22,null],[4,"FillRule","","The algorithm by which to determine if a point is inside a path or outside a path.",null,null],[13,"NonZero","","Non-zero winding rule",23,null],[13,"EvenOdd","","Even-odd winding rule",23,null],[4,"LineCap","","How the end points of every line are drawn.",null,null],[13,"Butt","","The ends of lines are squared off at the endpoints",24,null],[13,"Round","","The ends of lines are rounded",24,null],[13,"Square","","The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.",24,null],[4,"LineJoin","","determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are  joined together (degenerate segments with zero lengths, whose specified endpoints and control points are  exactly at the same position, are skipped).",null,null],[13,"Bevel","","Fills an additional triangular area",25,null],[13,"Round","","Rounds off the corners of a shape",25,null],[13,"Miter","","Connected segments are joined by extending their outside edges to connect at a single point",25,null],[4,"Repetition","","An enum indicating how to repeat the image.",null,null],[13,"Repeat","","Repeat in both directions",26,null],[13,"RepeatX","","Repeat horizontally",26,null],[13,"RepeatY","","Repeat vertically",26,null],[13,"NoRepeat","","Don't repeat",26,null],[4,"TextAlign","","Specifies text alignment",null,null],[13,"Left","","Text is left-aligned",27,null],[13,"Right","","Text is right-aligned",27,null],[13,"Center","","Text is centered",27,null],[13,"Start","","Text is aligned at the normal start of the line for the current locale",27,null],[13,"End","","Text is aligned at the normal end of the line for the current locale",27,null],[4,"TextBaseline","","Text baseline being used when drawing text",null,null],[13,"Top","","Text baseline is top of the em square",28,null],[13,"Hanging","","Text baseline is the hanging baseline.",28,null],[13,"Middle","","Text baseline is the middle of the em square",28,null],[13,"Alphabetic","","Text baseline is the normal alphabetic baseline. (default)",28,null],[13,"Ideographic","","Text baseline is the ideographic baseline",28,null],[13,"Bottom","","Text baseline is the bottom of the bounding box.",28,null],[4,"MutationRecord","","Contains information about an individual change to the DOM.",null,null],[13,"Attribute","","One of the target's attributes was changed.",29,null],[12,"target","stdweb::web::MutationRecord","The `Node` whose attribute changed.",29,null],[12,"name","","The name of the changed attribute.",29,null],[12,"namespace","","The namespace of the changed attribute.",29,null],[12,"old_value","","The value of the changed attribute before the change.",29,null],[13,"CharacterData","stdweb::web","The target's data was changed.",29,null],[12,"target","stdweb::web::MutationRecord","The `CharacterData` node whose data changed.",29,null],[12,"old_data","","The data of the target before the change.",29,null],[13,"ChildList","stdweb::web","The children of the target were changed.",29,null],[12,"target","stdweb::web::MutationRecord","The `Node` whose children changed.",29,null],[12,"inserted_nodes","","The nodes which were inserted. Will be an empty `NodeList` if no nodes were inserted.",29,null],[12,"removed_nodes","","The nodes which were removed. Will be an empty `NodeList` if no nodes were removed.",29,null],[12,"previous_sibling","","The previous sibling of the inserted or removed nodes, or `None`.",29,null],[12,"next_sibling","","The next sibling of the inserted or removed nodes, or `None`.",29,null],[4,"XhrReadyState","stdweb::web","An enum indicating the state of the `XmlHttpRequest`.",null,null],[13,"Unsent","","Client has been created. open() not called yet.",30,null],[13,"Opened","","open() has been called.",30,null],[13,"HeadersReceived","","send() has been called, and headers and status() are available.",30,null],[13,"Loading","","Downloading; reponse_text() holds partial data.",30,null],[13,"Done","","The operation is complete.",30,null],[4,"GamepadMappingType","","The set of known gamepad layout mappings.",null,null],[13,"NoMapping","","No mapping is in use for this gamepad",31,null],[13,"Standard","","This gamepad is mapped to the Standard Gamepad layout",31,null],[5,"window","","A global instance of Window.",null,{"o":{"n":"window"}}],[5,"document","","A global instance of Document.",null,{"o":{"n":"document"}}],[5,"set_timeout","","An alias for window.set_timeout.",null,{"i":[{"n":"f"},{"n":"u32"}]}],[5,"alert","","An alias for window.alert.",null,{"i":[{"n":"str"}]}],[0,"error","","A module containing error types.",null,null],[3,"DomException","stdweb::web::error","A reference to a JavaScript `DOMException` object.",null,null],[3,"HierarchyRequestError","","Occurs when an operation would result in an incorrect node tree.",null,null],[3,"IndexSizeError","","Occurs when an argument is out of range.",null,null],[3,"InvalidAccessError","","Occurs when an object does not support an operation or argument.",null,null],[3,"InvalidStateError","","Occurs when an object is in an invalid state.",null,null],[3,"NotFoundError","","Occurs when the specified object cannot be found.",null,null],[3,"NotSupportedError","","Used to indicate an unsuccessful operation when none of the other NativeError objects are an appropriate indication of the failure cause.",null,null],[3,"SecurityError","","Occurs when the requested operation is insecure.",null,null],[3,"SyntaxError","","Occurs when an argument does not match the expected pattern.",null,null],[3,"TypeError","","Used to indicate an unsuccessful operation when none of the other NativeError objects are an appropriate indication of the failure cause.",null,null],[3,"InvalidCharacterError","","Used to indicate the string contains one or more characters which are invalid.",null,null],[3,"Error","","A reference to a JavaScript `Error` object. An `Error` is thrown whenever a run-time error occurs.",null,null],[3,"UnknownValueError","","Indicates that an invalid value is setted to an `SelectElement`. It means there is no `<option>` element that has the given value.",null,null],[4,"AddColorStopError","","A enum of the exceptions that CanvasGradient.add_color_stop() may throw",null,null],[13,"SyntaxError","","A SyntaxError if the color could not be parsed as a valid CSS color",32,null],[13,"IndexSizeError","","An IndexSizeError if the offset was not between 0 and 1, inclusive",32,null],[4,"DrawImageError","","A enum of the exceptions that CanvasRenderingContext2D.draw_image() and similar may throw",null,null],[13,"IndexSizeError","","An IndexSizeError if the source or destination rectangle has an width or height of 0",33,null],[13,"InvalidStateError","","An InvalidStateError if the image has no image data",33,null],[13,"NotSupportedError","","A NotSupportedError",33,null],[13,"TypeError","","A TypeError if the specified source element isn't supported",33,null],[4,"GetImageDataError","","A enum of the exceptions that CanvasRenderingContext2D.get_image_data() may throw",null,null],[13,"IndexSizeError","","An IndexSizeError if thw width or height is 0",34,null],[13,"SecurityError","","A SecurityError",34,null],[8,"IDomException","","The `IDomException` interface represents an abnormal event which occurs as the result of calling a web API.",null,null],[8,"IError","","Represents the JavaScript `Error` interface. An `Error` is thrown whenever a run-time error occurs.",null,null],[11,"message","","Returns a human-readable description of the error.",35,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"name","","Returns a name specifiying the type of error.",35,{"i":[{"n":"self"}],"o":{"n":"string"}}],[0,"html_element","stdweb::web","A module containing HTML DOM elements.",null,null],[3,"ImageElement","stdweb::web::html_element","The HTML image element is used to manipulate the layout and presentation of `<img>` elements.",null,null],[3,"InputElement","","The HTML input element is used to create interactive controls for web-based forms in order to accept data from the user.",null,null],[3,"TextAreaElement","","The HTML `<textarea>` element represents a multi-line plain-text editing control.",null,null],[3,"CanvasElement","","The HTML `<canvas>` element provides an empty graphic zone on which specific JavaScript APIs can draw (such as Canvas 2D or WebGL).",null,null],[3,"SelectElement","","The HTML `<select>` element represents a control that provides a menu of options.",null,null],[3,"OptionElement","","The HTML `<option>` element is used to define an item contained in a `<select>`, an `<optgroup>`, or a `<datalist>` element.",null,null],[0,"event","stdweb::web","A module containing JavaScript DOM events.",null,null],[3,"ClickEvent","stdweb::web::event","The `ClickEvent` is fired when a pointing device button (usually a mouse's primary button) is pressed and released on a single element.",null,null],[3,"AuxClickEvent","","The `AuxClickEvent` event is fired when a non-primary pointing device button (e.g. any non-left mouse button) has been pressed and released on an element.",null,null],[3,"ContextMenuEvent","","The `ContextMenuEvent` event is fired when the right button of the mouse is clicked (before the context menu is displayed), or when the context menu key is pressed.",null,null],[3,"DoubleClickEvent","","The `DoubleClickEvent` is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element.",null,null],[3,"MouseDownEvent","","The `MouseDownEvent` is fired when a pointing device button is pressed on an element.",null,null],[3,"MouseUpEvent","","The `MouseUpEvent` is fired when a pointing device button is released over an element.",null,null],[3,"MouseMoveEvent","","The `MouseMoveEvent` is fired when a pointing device (usually a mouse) is moved while over an element.",null,null],[3,"MouseOverEvent","","The `MouseOverEvent` is fired when a pointing device (usually a mouse) is moved onto the element that has the listener attached or onto one of its children.",null,null],[3,"MouseOutEvent","","The `MouseOutEvent` is fired when a pointing device (usually a mouse) is moved off the element that has the listener attached or off one of its children.",null,null],[3,"MouseEnterEvent","","The `MouseEnterEvent` is fired when a pointing device (usually a mouse) is moved over the element that has the listener attached.",null,null],[3,"MouseLeaveEvent","","The `MouseLeaveEvent` is fired when a pointing device (usually a mouse) is moved out of an element that has the listener attached to it.",null,null],[3,"PointerOverEvent","","The `PointerOverEvent` is fired when a pointing device is moved into a element's hit test boundaries.",null,null],[3,"PointerEnterEvent","","The `PointerEnterEvent` is fired when a pointing device is moved into the hit test boundaries of an element or its descendants. This event does not bubble.",null,null],[3,"PointerDownEvent","","The `PointerDownEvent` is fired when a pointer becomes active",null,null],[3,"PointerMoveEvent","","The `PointerMoveEvent` is fired when a pointer changes coordinates",null,null],[3,"PointerUpEvent","","The `PointerUpEvent` is fired when a pointer is no longer active",null,null],[3,"PointerCancelEvent","","The `PointerCancelEvent` is fired when a pointer will no longer produce events (for example the device is deactivated), or if the pointer starts a gesture after a pointerdown event (for example panning, zooming, or drag and drop)",null,null],[3,"PointerOutEvent","","The `PointerOutEvent` is fired when the pointer moves out of the hit test boundaries of an element. This can include when a finger leaves a touch screen or a pen leaves the detectable hover range.",null,null],[3,"PointerLeaveEvent","","The `PointerLeaveEvent` is fired when the pointer moves out of the hit test boundaries of an element and it's descendants. This can include when a finger leaves a touch screen or a pen leaves the detectable hover range. This event does not bubble.",null,null],[3,"GotPointerCaptureEvent","","The `GotPointerCaptureEvent` fires when an element receives pointer capture",null,null],[3,"LostPointerCaptureEvent","","The `LostPointerCaptureEvent` fires when an element loses pointer capture",null,null],[3,"KeyPressEvent","","The `KeyPressEvent` is fired when a key is pressed down. It's only fired for keys which produce a character value.",null,null],[3,"KeyDownEvent","","The `KeyDownEvent` is fired when a key is pressed down. Unlike the `KeyPressEvent` event it's also fired for keys which do not produce a character value.",null,null],[3,"KeyUpEvent","","The `KeyUpEvent` is fired when a key is released.",null,null],[3,"ProgressEvent","","The `ProgressEvent` is fired to indicate that an operation is in progress.",null,null],[3,"LoadStartEvent","","The `LoadStartEvent` is fired when progress has begun.",null,null],[3,"LoadEndEvent","","The `LoadEndEvent` is fired when progress has stopped, e.g. after `ProgressErrorEvent`, `ProgressAbortEvent` or `ProgressLoadEvent` have been dispatched.",null,null],[3,"ProgressLoadEvent","","The `ProgressLoadEvent` is fired when progress has successful finished.",null,null],[3,"ProgressAbortEvent","","The `ProgressAbortEvent` is fired when the progress has been aborted.",null,null],[3,"ProgressErrorEvent","","The `ProgressErrorEvent` is fired when the progress has failed.",null,null],[3,"SocketCloseEvent","","A SocketCloseEvent is sent to clients using WebSockets when the connection is closed.",null,null],[3,"SocketErrorEvent","","The error event is fired when an error occurred; the exact circumstances vary, events by this name are used from a variety of APIs.",null,null],[3,"SocketOpenEvent","","An open event informs the target that a data connection, has been established.",null,null],[3,"SocketMessageEvent","","A message event informs a WebSocket object that a message has been received.",null,null],[3,"HashChangeEvent","","The `HashChangeEvent` is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol).",null,null],[3,"PopStateEvent","","A `PopStateEvent` is dispatched to the window every time the active history entry changes between two history entries for the same document. If the history entry being activated was created by a call to `history.push_state()` or was affected by a call to `history.replace_state()`, the `PopStateEvent`'s state property contains a copy of the history entry's state object.",null,null],[3,"ChangeEvent","","The `ChangeEvent` is fired for input, select, and textarea elements when a change to the element's value is committed by the user. Unlike the input event, the change event is not necessarily fired for each change to an element's value.",null,null],[3,"ResourceLoadEvent","","The `ResourceLoadEvent` is fired when a resource and its dependent resources have finished loading.",null,null],[3,"ResourceAbortEvent","","The `ResourceAbortEvent` is fired when the loading of a resource has been aborted.",null,null],[3,"ResourceErrorEvent","","The `ResourceErrorEvent` is fired when an error occurred; the exact circumstances vary, since this event is used from a variety of APIs.",null,null],[3,"ResizeEvent","","The resize event is fired when the document view has been resized.",null,null],[3,"InputEvent","","The `InputEvent` is fired synchronously when the value of an input, select, or textarea element is changed. For input elements with type=checkbox or type=radio, the input event should fire when a user toggles the control (via touch, mouse or keyboard) per the HTML5 specification, but historically, this has not been the case. Check compatibility, or attach to the change event instead for elements of these types.",null,null],[3,"ReadyStateChangeEvent","","The readystatechange event is fired when the readyState attribute of a document has changed.",null,null],[3,"SubmitEvent","","The submit event is fired when a form is submitted.",null,null],[3,"SelectionChangeEvent","","The selectionchange event of the Selection API is fired when the current text selection on a document is changed.",null,null],[3,"FocusEvent","","The `FocusEvent` is fired when an element has received focus. The main difference between this event and focusin is that only the latter bubbles.",null,null],[3,"BlurEvent","","The `BlurEvent` is fired when an element has lost focus. The main difference between this event and focusout is that only the latter bubbles.",null,null],[3,"GamepadConnectedEvent","","The `GamepadConnected` event is fired on the window object, when the first input is received for a gamepad.",null,null],[3,"GamepadDisconnectedEvent","","The `GamepadDisconnected` event is fired on the window object, when a gamepad is disconnected.",null,null],[4,"EventPhase","","Indicates the phase of event flow during event proessing.",null,null],[13,"None","","No event is currently being processed.",36,null],[13,"Capturing","","The event is being propagated down through the target's ancestors.",36,null],[13,"AtTarget","","The target is currently processing the event.",36,null],[13,"Bubbling","","The event is propagating back up through the target's ancestors.",36,null],[4,"MouseButton","","Represents buttons on a mouse during mouse events.",null,null],[13,"Left","","The left mouse button.",37,null],[13,"Wheel","","The mouse wheel/middle mouse button.",37,null],[13,"Right","","The right mouse button.",37,null],[13,"Button4","","The fourth mouse button (browser back).",37,null],[13,"Button5","","The fifth mouse button (browser forward).",37,null],[4,"KeyboardLocation","","The location on the keyboard of a key.",null,null],[13,"Standard","","The key has only one version, or the location can't be distinguished.",38,null],[13,"Left","","The left-hand version of a key.",38,null],[13,"Right","","The right-hand version of a key.",38,null],[13,"Numpad","","The key was on a numeric pad.",38,null],[13,"Mobile","","The key was on a mobile device.",38,null],[13,"Joystick","","The key was on a joystick.",38,null],[4,"ModifierKey","","A modifier key on the keyboard.",null,null],[13,"Alt","","",39,null],[13,"AltGr","","",39,null],[13,"CapsLock","","",39,null],[13,"Ctrl","","",39,null],[13,"Function","","",39,null],[13,"FunctionLock","","",39,null],[13,"Hyper","","",39,null],[13,"Meta","","",39,null],[13,"NumLock","","",39,null],[13,"OS","","",39,null],[13,"ScrollLock","","",39,null],[13,"Shift","","",39,null],[13,"Super","","",39,null],[13,"Symbol","","",39,null],[13,"SymbolLock","","",39,null],[4,"SocketMessageData","","Represents the types of data which can be received on a web socket. Messages are transmitted tagged as either binary or text: text messages are always received as strings. Binary messages may be received as either blobs or array buffers as preferred by the receiver. This choice is indicated via the `binary_type` field on the web socket.",null,null],[13,"Text","","Text message",40,null],[13,"Blob","","Binary message received as a blob",40,null],[13,"ArrayBuffer","","Binary message received as an array buffer",40,null],[8,"IEvent","","The `IEvent` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of event, some of which use other interfaces based on the main `IEvent` interface. `IEvent` itself contains the properties and methods which are common to all events.",null,null],[11,"bubbles","","Indicates whether this event bubbles upward through the DOM.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cancel_bubble","","A historical alias to `Event.stopPropagation()`.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_cancel_bubble","","A historical alias to `Event.stopPropagation()`. Setting this to `true` before returning from an event handler will stop propagation of the event.",41,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"cancelable","","Indicates whether the event is cancelable.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"current_target","","A reference to the currently registered target of this event.",41,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"default_prevented","","Indicates whether `preventDefault` has been called on this event.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"event_phase","","Indicates which phase of event flow is currently being evaluated.",41,{"i":[{"n":"self"}],"o":{"n":"eventphase"}}],[11,"stop_immediate_propagation","","Prevents any further listeners from being called for this event.",41,{"i":[{"n":"self"}]}],[11,"stop_propagation","","Stops the propagation of this event to descendants in the DOM.",41,{"i":[{"n":"self"}]}],[11,"target","","Returns a reference to the target to which this event was originally registered.",41,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"time_stamp","","Returns the time in milliseconds at which this event was created.",41,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_trusted","","Indicates whether the event was generated by a user action.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"event_type","","Returns a string containing the type of event. It is set when the event is constructed and is the name commonly used to refer to the specific event.",41,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"prevent_default","","Cancels the event if it is cancelable, without stopping further propagation of the event.",41,{"i":[{"n":"self"}]}],[8,"IUiEvent","","The `IUiEvent` interface represents simple user interface events.",null,null],[11,"detail","","Provides the current click count for this event, if applicable.",42,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"view","","Returns the `WindowProxy` that generated the event.",42,{"i":[{"n":"self"}],"o":{"g":["window"],"n":"option"}}],[8,"ConcreteEvent","","A trait representing a concrete event type.",null,null],[18,"EVENT_TYPE","","A string representing the event type.",43,null],[8,"IMouseEvent","","The `IMouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse).",null,null],[11,"alt_key","","Returns whether the Alt key was down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"button","","Indicates the mouse button that fired this event.",44,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"buttons","","Indicates which mouse buttons were down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"mousebuttonsstate"}}],[11,"client_x","","Returns the X position in the application's client area where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"client_y","","Returns the Y position in the application's client area where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"offset_x","","Returns the X position on the target element where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"offset_y","","Returns the Y position on the target element where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"ctrl_key","","Indicates whether the Ctrl key was down when this event fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns the current state of the specified modifier key.",44,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"movement_x","","Returns the change in X coordinate of the pointer between this event and the previous MouseMove event.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"movement_y","","Returns the change in Y coordinate of the pointer between this event and the previous MouseMove event.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"region","","Returns the ID of the hit region affected by the event.",44,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"related_target","","Returns the secondary target of this event, if any.",44,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"screen_x","","Returns the X position of the pointer in screen coordinates.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"screen_y","","Returns the Y position of the pointer in screen coordinates.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"IPointerEvent","","The `IPointerEvent` interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.",null,null],[11,"pointer_id","","Returns a unique identifier for the pointer causing the event.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"width","","Returns the width, in CSS pixels, of the contact geometry of the pointer.",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"height","","Returns the height, in CSS pixels, of the contact geometry of the pointer.",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"pressure","","Returns the normalized pressure of the pointer in the range [0, 1]",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"tangential_pressure","","Returns the normalized tangential pressure of the pointer in the range [-1, 1], where 0 is the hardware's neutral position",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"tilt_x","","Returns the angle, in the range of [-90, 90] degrees, between the Y-Z plane and the plane containing the transducer (e.g. pen stylus) and the Y axis.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"tilt_y","","Returns the angle, in the range of [-90, 90] degrees, between the X-Z plane and the plane containing the transducer (e.g. pen stylus) and the X axis.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"twist","","Returns the clockwise rotation, in the range of [0, 359] degrees, of the transducer (e.g. pen stylus) around it's own major axis",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"pointer_type","","Indicates the device type that caused the event.",45,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"is_primary","","Indicates if the pointer represents the primary pointer of this pointer type",45,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"IKeyboardEvent","","`IKeyboardEvent` objects describe a user interaction with the keyboard. Each event describes a key; the event type identifies what kind of activity was performed.",null,null],[11,"alt_key","","Indicates whether the Alt key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"code","","Returns a code value that indicates the physical key pressed on the keyboard.",46,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"ctrl_key","","Returns whether the Ctrl key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns whether a modifier key was down when this event was fired.",46,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"is_composing","","Returns whether this event was fired during composition.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"location","","Returns the location of the key on the keyboard.",46,{"i":[{"n":"self"}],"o":{"n":"keyboardlocation"}}],[11,"key","","Returns the value of a key or keys pressed by the user.",46,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"repeat","","Indicates whether the key is held down such that it is repeating.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"IProgressEvent","","The `IProgressEvent` interface represents progress-related events.",null,null],[11,"length_computable","","Indicates whether the progress is measureable.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"loaded","","Returns the amount of work already performed by the underlying process.",47,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total","","Returns the total amount of work that the underlying process will perform.",47,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[8,"IMessageEvent","","The MessageEvent interface represents a message received by a target object.",null,null],[16,"Data","","The type of data received with this MessageEvent",48,null],[11,"data","","The data sent by the message emitter.",48,null],[11,"origin","","A string representing the origin of the message emitter.",48,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"last_event_id","","A string representing a unique ID for the event.",48,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"source","","A MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.",48,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"option"}}],[11,"ports","","An array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",48,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"vec"}}],[8,"IFocusEvent","","The `IFocusEvent` interface represents focus-related events.",null,null],[11,"related_target","","Returns the secondary target of this event, if any.",49,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[8,"IGamepadEvent","","A GamepadEvent is fired on the window object, when a gamepad is connected or disconnected to the system.",null,null],[11,"gamepad","","Returns the gamepad associated with this event.",50,{"i":[{"n":"self"}],"o":{"n":"gamepad"}}],[8,"IEventTarget","stdweb::web","`IEventTarget` is an interface implemented by objects that can receive events and may have listeners for them.",null,null],[11,"add_event_listener","","Adds given event handler to the list of event listeners for the specified `EventTarget` on which it's called.",51,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"eventlistenerhandle"}}],[11,"dispatch_event","","Dispatches an `Event` at this `EventTarget`, invoking the affected event listeners in the appropriate order.",51,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["bool","todo"],"n":"result"}}],[8,"INode","","`INode` is an interface from which a number of DOM API object types inherit.",null,null],[11,"as_node","","Casts a reference to this object into a reference to a Node.",52,{"i":[{"n":"self"}],"o":{"n":"node"}}],[11,"append_child","","Adds a node to the end of the list of children of a specified parent node.",52,{"i":[{"n":"self"},{"n":"t"}]}],[11,"remove_child","","Removes a child node from the DOM.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["node","notfounderror"],"n":"result"}}],[11,"clone_node","","Returns a duplicate of the node on which this method was called.",52,{"i":[{"n":"self"},{"n":"clonekind"}],"o":{"g":["todo"],"n":"result"}}],[11,"contains","","Checks whenever a given node is a descendant of this one or not.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"insert_before","","Inserts the specified node before the reference node as a child of the current node.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"u"}],"o":{"g":["node","insertnodeerror"],"n":"result"}}],[11,"replace_child","","Replaces one hild node of the specified node with another.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"u"}],"o":{"g":["node","insertnodeerror"],"n":"result"}}],[11,"parent_node","","Returns the parent of this node in the DOM tree.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"first_child","","Returns the node's first child in the tree, or `None` if the node is childless.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"last_child","","Returns the node's last child in the tree, or `None` if the node is childless.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"next_sibling","","Returns the node's next sibling in the tree, or `None` if there isn't such a node.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"node_name","","Returns the name of the node.",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"node_type","","Returns the type of the node.",52,{"i":[{"n":"self"}],"o":{"n":"nodetype"}}],[11,"node_value","","Returns the value of the node.",52,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"set_node_value","","Sets the value of the node.",52,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"owner_document","","Returns the `Document` that this node belongs to.",52,{"i":[{"n":"self"}],"o":{"g":["document"],"n":"option"}}],[11,"parent_element","","Returns an `Element` that is the parent of this node. Returns `null` if the node has no parent or the parent is not an `Element`.",52,{"i":[{"n":"self"}],"o":{"g":["element"],"n":"option"}}],[11,"previous_sibling","","Returns the node's previous sibling in the tree, or `None` if there isn't such a node.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"text_content","","A property which represents the text content of a node and its descendants.",52,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"set_text_content","","Sets the text content of this node; calling thil removes all of node's children and replaces them with a single text node with the given value.",52,{"i":[{"n":"self"},{"n":"str"}]}],[11,"child_nodes","","Returns a live collection of child nodes of this node.",52,{"i":[{"n":"self"}],"o":{"n":"nodelist"}}],[11,"base_uri","","Gets the base URL.",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"has_child_nodes","","Returns whether this node has children nodes.",52,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_default_namespace","","Determines whether the given namespace is the default namespace of this node.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"is_equal_node","","Tests whether this node is equal to another node. Two nodes are equal if they have the same type, defining characteristics, matching attributes, and so on.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"is_same_node","","Test whether two `Node` references are the same.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"lookup_prefix","","Returns the prefix for the given namespace URI, if present.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"lookup_namespace_uri","","Returns the namespace URI for the given prefix.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"normalize","","Merges any adjacent text nodes and removes empty text nodes under this node.",52,{"i":[{"n":"self"}]}],[8,"IElement","","The `IElement` interface represents an object of a Document. This interface describes methods and properties common to all kinds of elements.",null,null],[11,"class_list","","The Element.classList is a read-only property which returns a live TokenList collection of the class attributes of the element.",53,{"i":[{"n":"self"}],"o":{"n":"tokenlist"}}],[11,"has_attribute","","The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",53,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"get_attribute","","Element.getAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string);",53,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"set_attribute","","Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.",53,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["invalidcharactererror"],"n":"result"}}],[11,"scroll_top","","Gets the the number of pixels that an element's content is scrolled vertically.",53,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_scroll_top","","Sets the the number of pixels that an element's content is scrolled vertically.",53,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"scroll_left","","Gets the the number of pixels that an element's content is scrolled to the left.",53,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_scroll_left","","Sets the the number of pixels that an element's content is scrolled to the left.",53,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_attribute_names","","Element.getAttributeNames() returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.",53,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"vec"}}],[11,"remove_attribute","","Element.removeAttribute removes an attribute from the specified element.",53,{"i":[{"n":"self"},{"n":"str"}]}],[11,"has_attributes","","The Element.hasAttributes() method returns Boolean value, indicating if the current element has any attributes or not.",53,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_pointer_capture","","Designates a specific element as the capture target of future pointer events.",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["invalidpointerid"],"n":"result"}}],[11,"release_pointer_capture","","Releases pointer capture that was previously set for a specific pointer",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["invalidpointerid"],"n":"result"}}],[11,"has_pointer_capture","","Returns a boolean indicating if the element has captured the specified pointer",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[8,"IHtmlElement","","The `IHtmlElement` interface represents any HTML element.",null,null],[11,"focus","","Sets focus on the specified element, if it can be focused.",54,{"i":[{"n":"self"}]}],[11,"blur","","Removes keyboard focus from the current element.",54,{"i":[{"n":"self"}]}],[11,"dataset","","Allows access, both in reading and writing, to all of the custom data attributes (data-*) set on the element, either in HTML or in the DOM.",54,{"i":[{"n":"self"}],"o":{"n":"stringmap"}}],[11,"get_bounding_client_rect","","Returns the size of an element and its position relative to the viewport. (JavaScript docs)",54,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"offset_width","","Returns the layout width of an element. Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width.",54,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"offset_height","","Returns the height of the element including vertical padding and borders, as an integer.",54,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"inner_text","","A property which represents the \"rendered\" text content of a node and its descendants. It approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied to the clipboard.",54,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"IWindowOrWorker","","The `IWindowOrWorker` mixin describes several features common to the `Window` and the global scope of web workers.",null,null],[11,"set_timeout","","Sets a timer which executes a function once after the timer expires.",55,{"i":[{"n":"self"},{"n":"f"},{"n":"u32"}]}],[8,"IParentNode","","The `ParentNode` mixin contains methods and properties that are common to all types of `Node` objects that can have children.",null,null],[11,"query_selector","","Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",56,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option","todo"],"n":"result"}}],[11,"query_selector_all","","Returns a non-live NodeList of all elements descended from the element on which it is invoked that matches the specified group of CSS selectors.",56,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["nodelist","todo"],"n":"result"}}],[8,"INonElementParentNode","","The `INonElementParentNode` mixin contains methods and properties that are common to `Document` and `DocumentFragment`.",null,null],[11,"get_element_by_id","","Returns a reference to the element by its ID; the ID is a string which can be used to uniquely identify the element, found in the HTML `id` attribute.",57,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["element"],"n":"option"}}],[8,"RenderingContext","","Trait implemented by rendering contexts which can be obtained from a canvas.",null,null],[16,"Error","","Type of error which can occur whilst creating this context",58,null],[10,"from_canvas","","Name which identifies this kind of rendering context.",58,{"i":[{"n":"canvaselement"}],"o":{"n":"result"}}],[8,"IBlob","","A blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format.",null,null],[11,"len","","The size, in bytes, of the data contained in the Blob object.",59,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"mime","","A string indicating the MIME type of the data contained in the `Blob`.",59,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[8,"IChildNode","","The `ChildNode` interface contains methods that are particular to `Node` objects that can have a parent.",null,null],[11,"remove","","The `ChildNode.remove()` method removes the object from the tree it belongs to.",60,{"i":[{"n":"self"}]}],[0,"unstable","stdweb","A module containing stable counterparts to currently unstable Rust features.",null,null],[4,"Void","stdweb::unstable","An uninhabited type for use in statically impossible cases.",null,null],[8,"TryFrom","","Attempt to construct Self via a conversion.",null,null],[16,"Error","","The type returned in the event of a conversion error.",61,null],[10,"try_from","","Performs the conversion.",61,{"i":[{"n":"t"}],"o":{"n":"result"}}],[8,"TryInto","","An attempted conversion that consumes self, which may or may not be expensive.",null,null],[16,"Error","","The type returned in the event of a conversion error.",62,null],[10,"try_into","","Performs the conversion.",62,{"i":[{"n":"self"}],"o":{"n":"result"}}],[0,"traits","stdweb","A module containing reexports of all of our interface traits.",null,null],[8,"IEventTarget","stdweb::traits","`IEventTarget` is an interface implemented by objects that can receive events and may have listeners for them.",null,null],[11,"add_event_listener","stdweb::web","Adds given event handler to the list of event listeners for the specified `EventTarget` on which it's called.",51,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"eventlistenerhandle"}}],[11,"dispatch_event","","Dispatches an `Event` at this `EventTarget`, invoking the affected event listeners in the appropriate order.",51,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["bool","todo"],"n":"result"}}],[8,"INode","stdweb::traits","`INode` is an interface from which a number of DOM API object types inherit.",null,null],[11,"as_node","stdweb::web","Casts a reference to this object into a reference to a Node.",52,{"i":[{"n":"self"}],"o":{"n":"node"}}],[11,"append_child","","Adds a node to the end of the list of children of a specified parent node.",52,{"i":[{"n":"self"},{"n":"t"}]}],[11,"remove_child","","Removes a child node from the DOM.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["node","notfounderror"],"n":"result"}}],[11,"clone_node","","Returns a duplicate of the node on which this method was called.",52,{"i":[{"n":"self"},{"n":"clonekind"}],"o":{"g":["todo"],"n":"result"}}],[11,"contains","","Checks whenever a given node is a descendant of this one or not.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"insert_before","","Inserts the specified node before the reference node as a child of the current node.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"u"}],"o":{"g":["node","insertnodeerror"],"n":"result"}}],[11,"replace_child","","Replaces one hild node of the specified node with another.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"u"}],"o":{"g":["node","insertnodeerror"],"n":"result"}}],[11,"parent_node","","Returns the parent of this node in the DOM tree.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"first_child","","Returns the node's first child in the tree, or `None` if the node is childless.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"last_child","","Returns the node's last child in the tree, or `None` if the node is childless.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"next_sibling","","Returns the node's next sibling in the tree, or `None` if there isn't such a node.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"node_name","","Returns the name of the node.",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"node_type","","Returns the type of the node.",52,{"i":[{"n":"self"}],"o":{"n":"nodetype"}}],[11,"node_value","","Returns the value of the node.",52,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"set_node_value","","Sets the value of the node.",52,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"owner_document","","Returns the `Document` that this node belongs to.",52,{"i":[{"n":"self"}],"o":{"g":["document"],"n":"option"}}],[11,"parent_element","","Returns an `Element` that is the parent of this node. Returns `null` if the node has no parent or the parent is not an `Element`.",52,{"i":[{"n":"self"}],"o":{"g":["element"],"n":"option"}}],[11,"previous_sibling","","Returns the node's previous sibling in the tree, or `None` if there isn't such a node.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"text_content","","A property which represents the text content of a node and its descendants.",52,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"set_text_content","","Sets the text content of this node; calling thil removes all of node's children and replaces them with a single text node with the given value.",52,{"i":[{"n":"self"},{"n":"str"}]}],[11,"child_nodes","","Returns a live collection of child nodes of this node.",52,{"i":[{"n":"self"}],"o":{"n":"nodelist"}}],[11,"base_uri","","Gets the base URL.",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"has_child_nodes","","Returns whether this node has children nodes.",52,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_default_namespace","","Determines whether the given namespace is the default namespace of this node.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"is_equal_node","","Tests whether this node is equal to another node. Two nodes are equal if they have the same type, defining characteristics, matching attributes, and so on.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"is_same_node","","Test whether two `Node` references are the same.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"lookup_prefix","","Returns the prefix for the given namespace URI, if present.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"lookup_namespace_uri","","Returns the namespace URI for the given prefix.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"normalize","","Merges any adjacent text nodes and removes empty text nodes under this node.",52,{"i":[{"n":"self"}]}],[8,"IElement","stdweb::traits","The `IElement` interface represents an object of a Document. This interface describes methods and properties common to all kinds of elements.",null,null],[11,"class_list","stdweb::web","The Element.classList is a read-only property which returns a live TokenList collection of the class attributes of the element.",53,{"i":[{"n":"self"}],"o":{"n":"tokenlist"}}],[11,"has_attribute","","The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",53,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"get_attribute","","Element.getAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string);",53,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"set_attribute","","Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.",53,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["invalidcharactererror"],"n":"result"}}],[11,"scroll_top","","Gets the the number of pixels that an element's content is scrolled vertically.",53,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_scroll_top","","Sets the the number of pixels that an element's content is scrolled vertically.",53,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"scroll_left","","Gets the the number of pixels that an element's content is scrolled to the left.",53,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_scroll_left","","Sets the the number of pixels that an element's content is scrolled to the left.",53,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_attribute_names","","Element.getAttributeNames() returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.",53,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"vec"}}],[11,"remove_attribute","","Element.removeAttribute removes an attribute from the specified element.",53,{"i":[{"n":"self"},{"n":"str"}]}],[11,"has_attributes","","The Element.hasAttributes() method returns Boolean value, indicating if the current element has any attributes or not.",53,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_pointer_capture","","Designates a specific element as the capture target of future pointer events.",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["invalidpointerid"],"n":"result"}}],[11,"release_pointer_capture","","Releases pointer capture that was previously set for a specific pointer",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["invalidpointerid"],"n":"result"}}],[11,"has_pointer_capture","","Returns a boolean indicating if the element has captured the specified pointer",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[8,"IHtmlElement","stdweb::traits","The `IHtmlElement` interface represents any HTML element.",null,null],[11,"focus","stdweb::web","Sets focus on the specified element, if it can be focused.",54,{"i":[{"n":"self"}]}],[11,"blur","","Removes keyboard focus from the current element.",54,{"i":[{"n":"self"}]}],[11,"dataset","","Allows access, both in reading and writing, to all of the custom data attributes (data-*) set on the element, either in HTML or in the DOM.",54,{"i":[{"n":"self"}],"o":{"n":"stringmap"}}],[11,"get_bounding_client_rect","","Returns the size of an element and its position relative to the viewport. (JavaScript docs)",54,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"offset_width","","Returns the layout width of an element. Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width.",54,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"offset_height","","Returns the height of the element including vertical padding and borders, as an integer.",54,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"inner_text","","A property which represents the \"rendered\" text content of a node and its descendants. It approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied to the clipboard.",54,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"IBlob","stdweb::traits","A blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format.",null,null],[11,"len","stdweb::web","The size, in bytes, of the data contained in the Blob object.",59,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"mime","","A string indicating the MIME type of the data contained in the `Blob`.",59,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[8,"IWindowOrWorker","stdweb::traits","The `IWindowOrWorker` mixin describes several features common to the `Window` and the global scope of web workers.",null,null],[11,"set_timeout","stdweb::web","Sets a timer which executes a function once after the timer expires.",55,{"i":[{"n":"self"},{"n":"f"},{"n":"u32"}]}],[8,"IParentNode","stdweb::traits","The `ParentNode` mixin contains methods and properties that are common to all types of `Node` objects that can have children.",null,null],[11,"query_selector","stdweb::web","Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",56,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option","todo"],"n":"result"}}],[11,"query_selector_all","","Returns a non-live NodeList of all elements descended from the element on which it is invoked that matches the specified group of CSS selectors.",56,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["nodelist","todo"],"n":"result"}}],[8,"INonElementParentNode","stdweb::traits","The `INonElementParentNode` mixin contains methods and properties that are common to `Document` and `DocumentFragment`.",null,null],[11,"get_element_by_id","stdweb::web","Returns a reference to the element by its ID; the ID is a string which can be used to uniquely identify the element, found in the HTML `id` attribute.",57,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["element"],"n":"option"}}],[8,"IChildNode","stdweb::traits","The `ChildNode` interface contains methods that are particular to `Node` objects that can have a parent.",null,null],[11,"remove","stdweb::web","The `ChildNode.remove()` method removes the object from the tree it belongs to.",60,{"i":[{"n":"self"}]}],[8,"IDomException","stdweb::traits","The `IDomException` interface represents an abnormal event which occurs as the result of calling a web API.",null,null],[8,"IError","","Represents the JavaScript `Error` interface. An `Error` is thrown whenever a run-time error occurs.",null,null],[11,"message","stdweb::web::error","Returns a human-readable description of the error.",35,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"name","","Returns a name specifiying the type of error.",35,{"i":[{"n":"self"}],"o":{"n":"string"}}],[8,"IEvent","stdweb::traits","The `IEvent` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of event, some of which use other interfaces based on the main `IEvent` interface. `IEvent` itself contains the properties and methods which are common to all events.",null,null],[11,"bubbles","stdweb::web::event","Indicates whether this event bubbles upward through the DOM.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cancel_bubble","","A historical alias to `Event.stopPropagation()`.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_cancel_bubble","","A historical alias to `Event.stopPropagation()`. Setting this to `true` before returning from an event handler will stop propagation of the event.",41,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"cancelable","","Indicates whether the event is cancelable.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"current_target","","A reference to the currently registered target of this event.",41,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"default_prevented","","Indicates whether `preventDefault` has been called on this event.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"event_phase","","Indicates which phase of event flow is currently being evaluated.",41,{"i":[{"n":"self"}],"o":{"n":"eventphase"}}],[11,"stop_immediate_propagation","","Prevents any further listeners from being called for this event.",41,{"i":[{"n":"self"}]}],[11,"stop_propagation","","Stops the propagation of this event to descendants in the DOM.",41,{"i":[{"n":"self"}]}],[11,"target","","Returns a reference to the target to which this event was originally registered.",41,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"time_stamp","","Returns the time in milliseconds at which this event was created.",41,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_trusted","","Indicates whether the event was generated by a user action.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"event_type","","Returns a string containing the type of event. It is set when the event is constructed and is the name commonly used to refer to the specific event.",41,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"prevent_default","","Cancels the event if it is cancelable, without stopping further propagation of the event.",41,{"i":[{"n":"self"}]}],[8,"IUiEvent","stdweb::traits","The `IUiEvent` interface represents simple user interface events.",null,null],[11,"detail","stdweb::web::event","Provides the current click count for this event, if applicable.",42,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"view","","Returns the `WindowProxy` that generated the event.",42,{"i":[{"n":"self"}],"o":{"g":["window"],"n":"option"}}],[8,"IMouseEvent","stdweb::traits","The `IMouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse).",null,null],[11,"alt_key","stdweb::web::event","Returns whether the Alt key was down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"button","","Indicates the mouse button that fired this event.",44,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"buttons","","Indicates which mouse buttons were down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"mousebuttonsstate"}}],[11,"client_x","","Returns the X position in the application's client area where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"client_y","","Returns the Y position in the application's client area where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"offset_x","","Returns the X position on the target element where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"offset_y","","Returns the Y position on the target element where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"ctrl_key","","Indicates whether the Ctrl key was down when this event fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns the current state of the specified modifier key.",44,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"movement_x","","Returns the change in X coordinate of the pointer between this event and the previous MouseMove event.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"movement_y","","Returns the change in Y coordinate of the pointer between this event and the previous MouseMove event.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"region","","Returns the ID of the hit region affected by the event.",44,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"related_target","","Returns the secondary target of this event, if any.",44,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"screen_x","","Returns the X position of the pointer in screen coordinates.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"screen_y","","Returns the Y position of the pointer in screen coordinates.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"IPointerEvent","stdweb::traits","The `IPointerEvent` interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.",null,null],[11,"pointer_id","stdweb::web::event","Returns a unique identifier for the pointer causing the event.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"width","","Returns the width, in CSS pixels, of the contact geometry of the pointer.",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"height","","Returns the height, in CSS pixels, of the contact geometry of the pointer.",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"pressure","","Returns the normalized pressure of the pointer in the range [0, 1]",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"tangential_pressure","","Returns the normalized tangential pressure of the pointer in the range [-1, 1], where 0 is the hardware's neutral position",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"tilt_x","","Returns the angle, in the range of [-90, 90] degrees, between the Y-Z plane and the plane containing the transducer (e.g. pen stylus) and the Y axis.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"tilt_y","","Returns the angle, in the range of [-90, 90] degrees, between the X-Z plane and the plane containing the transducer (e.g. pen stylus) and the X axis.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"twist","","Returns the clockwise rotation, in the range of [0, 359] degrees, of the transducer (e.g. pen stylus) around it's own major axis",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"pointer_type","","Indicates the device type that caused the event.",45,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"is_primary","","Indicates if the pointer represents the primary pointer of this pointer type",45,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"IKeyboardEvent","stdweb::traits","`IKeyboardEvent` objects describe a user interaction with the keyboard. Each event describes a key; the event type identifies what kind of activity was performed.",null,null],[11,"alt_key","stdweb::web::event","Indicates whether the Alt key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"code","","Returns a code value that indicates the physical key pressed on the keyboard.",46,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"ctrl_key","","Returns whether the Ctrl key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns whether a modifier key was down when this event was fired.",46,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"is_composing","","Returns whether this event was fired during composition.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"location","","Returns the location of the key on the keyboard.",46,{"i":[{"n":"self"}],"o":{"n":"keyboardlocation"}}],[11,"key","","Returns the value of a key or keys pressed by the user.",46,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"repeat","","Indicates whether the key is held down such that it is repeating.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"IProgressEvent","stdweb::traits","The `IProgressEvent` interface represents progress-related events.",null,null],[11,"length_computable","stdweb::web::event","Indicates whether the progress is measureable.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"loaded","","Returns the amount of work already performed by the underlying process.",47,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total","","Returns the total amount of work that the underlying process will perform.",47,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[8,"IMessageEvent","stdweb::traits","The MessageEvent interface represents a message received by a target object.",null,null],[16,"Data","","The type of data received with this MessageEvent",48,null],[11,"data","stdweb::web::event","The data sent by the message emitter.",48,null],[11,"origin","","A string representing the origin of the message emitter.",48,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"last_event_id","","A string representing a unique ID for the event.",48,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"source","","A MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.",48,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"option"}}],[11,"ports","","An array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",48,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"vec"}}],[8,"IFocusEvent","stdweb::traits","The `IFocusEvent` interface represents focus-related events.",null,null],[11,"related_target","stdweb::web::event","Returns the secondary target of this event, if any.",49,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[8,"InstanceOf","stdweb","A trait to check whenever a given Reference is of a certain type.",null,null],[10,"instance_of","","Checks whenever a given Reference if of type `Self`.",63,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[8,"ReferenceType","","A trait for types which wrap a reference to a JavaScript object.",null,null],[10,"from_reference_unchecked","","Converts a given reference into a concrete reference-like wrapper. Doesn't do any type checking; highly unsafe to use!",64,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[8,"JsSerialize","","A trait for types which can be serialized through the `js!` macro.",null,null],[14,"js","","Embeds JavaScript code into your Rust program.",null,null],[14,"console","","Calls methods on the JavaScript `console` object.",null,null],[14,"js_serializable","","A macro which makes it possible to pass an instance of a given type implementing Serde's `Serialize` into the js! macro.",null,null],[14,"js_deserializable","","A macro which makes it possible to convert an instance of a given type implementing Serde's `Deserialize` into a Value using TryInto.",null,null],[11,"fmt","stdweb::unstable","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",65,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","stdweb::web","",14,{"i":[{"n":"self"}],"o":{"n":"crossoriginsetting"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",14,{"i":[{"n":"self"},{"n":"crossoriginsetting"}],"o":{"n":"bool"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"date"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"date"}],"o":{"n":"bool"}}],[11,"instance_of","","",66,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",66,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",66,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",66,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",66,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",66,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",66,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"new","","Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.",66,{"o":{"n":"self"}}],[11,"from_datetime","","Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.",66,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"self"}}],[11,"from_iso8601","","Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.",66,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"from_time","","Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.",66,{"i":[{"n":"f64"}],"o":{"n":"self"}}],[11,"utc","","The Date.UTC() method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.",66,{"i":[{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"},{"n":"i32"}],"o":{"n":"f64"}}],[11,"parse","","The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).",66,{"i":[{"n":"str"}],"o":{"n":"f64"}}],[11,"now","","The Date.now() method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.",66,{"o":{"n":"f64"}}],[11,"get_date","","The getDate() method returns the day of the month for the specified date according to local time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_day","","The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday. For the day of the month see getDate().",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_full_year","","The getFullYear() method returns the year of the specified date according to local time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_hours","","The getHours() method returns the hour for the specified date, according to local time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_milliseconds","","The getMilliseconds() method returns the milliseconds in the specified date according to local time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_minutes","","The getMinutes() method returns the minutes in the specified date according to local time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_month","","The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_seconds","","The getSeconds() method returns the seconds in the specified date according to local time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_time","","The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.",66,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_timezone_offset","","The getTimezoneOffset() method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_date","","The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_day","","The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_full_year","","The getUTCFullYear() method returns the year in the specified date according to universal time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_hours","","The getUTCHours() method returns the hours in the specified date according to universal time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_milliseconds","","The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_minutes","","The getUTCMinutes() method returns the minutes in the specified date according to universal time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_month","","The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"get_utc_seconds","","The getUTCSeconds() method returns the seconds in the specified date according to universal time.",66,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"set_date","","The setDate() method sets the day of the Date object relative to the beginning of the currently set month.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_full_year","","The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_hours","","The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_milliseconds","","The setMilliseconds() method sets the milliseconds for a specified date according to local time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_minutes","","The setMinutes() method sets the minutes for a specified date according to local time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_month","","The setMonth() method sets the month for a specified date according to the currently set year.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_seconds","","The setSeconds() method sets the seconds for a specified date according to local time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_time","","The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.",66,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"set_utc_date","","The setUTCDate() method sets the day of the month for a specified date according to universal time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_utc_full_year","","The setUTCFullYear() method sets the full year for a specified date according to universal time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_utc_hours","","The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_utc_milliseconds","","The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_utc_minutes","","The setUTCMinutes() method sets the minutes for a specified date according to universal time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_utc_month","","The setUTCMonth() method sets the month for a specified date according to universal time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"set_utc_seconds","","The setUTCSeconds() method sets the seconds for a specified date according to universal time.",66,{"i":[{"n":"self"},{"n":"i32"}]}],[11,"to_date_string","","The toDateString() method returns the date portion of a Date object in human readable form in American English.",66,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_iso_string","","The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".",66,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_json","","The toJSON() method returns a string representation of the Date object.",66,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_string","","The toString() method returns a string representing the specified Date object.",66,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_time_string","","The toTimeString() method returns the time portion of a Date object in human readable form in American English.",66,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"to_utc_string","","The toUTCString() method converts a date to a string, using the UTC time zone.",66,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"value_of","","The valueOf() method returns the primitive value of a Date object.",66,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"document"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"document"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"document"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"document"}],"o":{"n":"self"}}],[11,"try_from","","",67,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","","",69,{"i":[{"n":"document"}],"o":{"n":"self"}}],[11,"try_from","","",67,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"instance_of","","",67,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",67,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",67,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",67,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",67,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",67,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",67,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"create_document_fragment","","In an HTML document, the Document.createDocumentFragment() method creates a new empty DocumentFragment.",67,{"i":[{"n":"self"}],"o":{"n":"documentfragment"}}],[11,"create_element","","In an HTML document, the Document.createElement() method creates the HTML element specified by `tag`, or an HTMLUnknownElement if `tag` isn't recognized. In other documents, it creates an element with a null namespace URI.",67,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["element","todo"],"n":"result"}}],[11,"create_text_node","","Creates a new text node.",67,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"textnode"}}],[11,"location","","Returns a Location object which contains information about the URL of the document and provides methods for changing that URL and loading another URL.",67,{"i":[{"n":"self"}],"o":{"g":["location"],"n":"option"}}],[11,"body","","Returns the `<body>` or `<frameset>` node of the current document, or null if no such element exists.",67,{"i":[{"n":"self"}],"o":{"g":["htmlelement"],"n":"option"}}],[11,"head","","Returns the `<head>` element of the current document. If there are more than one `<head>` elements, the first one is returned.",67,{"i":[{"n":"self"}],"o":{"g":["htmlelement"],"n":"option"}}],[11,"title","","Gets the title of the document.",67,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_title","","Sets the title of the document.",67,{"i":[{"n":"self"},{"n":"str"}]}],[11,"document_element","","Returns the Element that is the root element of the document (for example, the `<html>` element for HTML documents).",67,{"i":[{"n":"self"}],"o":{"g":["element"],"n":"option"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"cancel","","Cancels an animation frame request.",70,{"i":[{"n":"self"}]}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"window"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"window"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"window"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"window"}],"o":{"n":"self"}}],[11,"try_from","","",71,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"instance_of","","",71,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",71,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",71,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",71,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",71,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",71,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",71,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"alert","","The Window.alert() method displays an alert dialog with the optional specified content and an OK button.",71,{"i":[{"n":"self"},{"n":"str"}]}],[11,"local_storage","","The `local_storage` property allows you to access a local Storage object.",71,{"i":[{"n":"self"}],"o":{"n":"storage"}}],[11,"session_storage","","The `session_storage` property allows you to access a session Storage object for the current origin.",71,{"i":[{"n":"self"}],"o":{"n":"storage"}}],[11,"location","","Returns a Location object which contains information about the URL of the document and provides methods for changing that URL and loading another URL.",71,{"i":[{"n":"self"}],"o":{"g":["location"],"n":"option"}}],[11,"request_animation_frame","","You should call this method whenever you're ready to update your animation onscreen. This will request that your animation function be called before the browser performs the next repaint. The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. request_animation_frame() calls are paused in most browsers when running in background tabs or hidden iframes in order to improve performance and battery life.",71,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"requestanimationframehandle"}}],[11,"history","","Returns the global History object, which provides methods to manipulate the browser history.",71,{"i":[{"n":"self"}],"o":{"n":"history"}}],[11,"inner_width","","Returns the width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.",71,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"inner_height","","Returns the height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.",71,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"outer_width","","Returns the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",71,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"outer_height","","Returns the height of the outside of the browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.",71,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"page_y_offset","","The read-only Window property pageYOffset is an alias for scrollY; as such, it returns the number of pixels the document is currently scrolled along the vertical axis (that is, up or down), with a value of 0.0 indicating that the top edge of the Document is currently aligned with the top edge of the window's content area.",71,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"page_x_offset","","This is an alias for scrollX.",71,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"bubbles","stdweb::web::event","Indicates whether this event bubbles upward through the DOM.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cancel_bubble","","A historical alias to `Event.stopPropagation()`.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_cancel_bubble","","A historical alias to `Event.stopPropagation()`. Setting this to `true` before returning from an event handler will stop propagation of the event.",41,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"cancelable","","Indicates whether the event is cancelable.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"current_target","","A reference to the currently registered target of this event.",41,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"default_prevented","","Indicates whether `preventDefault` has been called on this event.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"event_phase","","Indicates which phase of event flow is currently being evaluated.",41,{"i":[{"n":"self"}],"o":{"n":"eventphase"}}],[11,"stop_immediate_propagation","","Prevents any further listeners from being called for this event.",41,{"i":[{"n":"self"}]}],[11,"stop_propagation","","Stops the propagation of this event to descendants in the DOM.",41,{"i":[{"n":"self"}]}],[11,"target","","Returns a reference to the target to which this event was originally registered.",41,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"time_stamp","","Returns the time in milliseconds at which this event was created.",41,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"option"}}],[11,"is_trusted","","Indicates whether the event was generated by a user action.",41,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"event_type","","Returns a string containing the type of event. It is set when the event is constructed and is the name commonly used to refer to the specific event.",41,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"prevent_default","","Cancels the event if it is cancelable, without stopping further propagation of the event.",41,{"i":[{"n":"self"}]}],[18,"EVENT_TYPE","","A string representing the event type.",43,null],[11,"detail","","Provides the current click count for this event, if applicable.",42,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"view","","Returns the `WindowProxy` that generated the event.",42,{"i":[{"n":"self"}],"o":{"g":["window"],"n":"option"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"eventphase"}}],[11,"fmt","","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",36,{"i":[{"n":"self"},{"n":"eventphase"}],"o":{"n":"bool"}}],[11,"add_event_listener","stdweb::web","Adds given event handler to the list of event listeners for the specified `EventTarget` on which it's called.",51,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"eventlistenerhandle"}}],[11,"dispatch_event","","Dispatches an `Event` at this `EventTarget`, invoking the affected event listeners in the appropriate order.",51,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["bool","todo"],"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"remove","","Removes the listener from the IEventTarget on which it was previously registered.",72,{"i":[{"n":"self"}]}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"eventtarget"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"eventtarget"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"eventtarget"}],"o":{"n":"bool"}}],[11,"instance_of","","",68,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",68,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",68,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",68,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",68,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",68,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",68,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"as_node","","Casts a reference to this object into a reference to a Node.",52,{"i":[{"n":"self"}],"o":{"n":"node"}}],[11,"append_child","","Adds a node to the end of the list of children of a specified parent node.",52,{"i":[{"n":"self"},{"n":"t"}]}],[11,"remove_child","","Removes a child node from the DOM.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["node","notfounderror"],"n":"result"}}],[11,"clone_node","","Returns a duplicate of the node on which this method was called.",52,{"i":[{"n":"self"},{"n":"clonekind"}],"o":{"g":["todo"],"n":"result"}}],[11,"contains","","Checks whenever a given node is a descendant of this one or not.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"insert_before","","Inserts the specified node before the reference node as a child of the current node.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"u"}],"o":{"g":["node","insertnodeerror"],"n":"result"}}],[11,"replace_child","","Replaces one hild node of the specified node with another.",52,{"i":[{"n":"self"},{"n":"t"},{"n":"u"}],"o":{"g":["node","insertnodeerror"],"n":"result"}}],[11,"parent_node","","Returns the parent of this node in the DOM tree.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"first_child","","Returns the node's first child in the tree, or `None` if the node is childless.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"last_child","","Returns the node's last child in the tree, or `None` if the node is childless.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"next_sibling","","Returns the node's next sibling in the tree, or `None` if there isn't such a node.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"node_name","","Returns the name of the node.",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"node_type","","Returns the type of the node.",52,{"i":[{"n":"self"}],"o":{"n":"nodetype"}}],[11,"node_value","","Returns the value of the node.",52,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"set_node_value","","Sets the value of the node.",52,{"i":[{"n":"self"},{"g":["str"],"n":"option"}]}],[11,"owner_document","","Returns the `Document` that this node belongs to.",52,{"i":[{"n":"self"}],"o":{"g":["document"],"n":"option"}}],[11,"parent_element","","Returns an `Element` that is the parent of this node. Returns `null` if the node has no parent or the parent is not an `Element`.",52,{"i":[{"n":"self"}],"o":{"g":["element"],"n":"option"}}],[11,"previous_sibling","","Returns the node's previous sibling in the tree, or `None` if there isn't such a node.",52,{"i":[{"n":"self"}],"o":{"g":["node"],"n":"option"}}],[11,"text_content","","A property which represents the text content of a node and its descendants.",52,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"set_text_content","","Sets the text content of this node; calling thil removes all of node's children and replaces them with a single text node with the given value.",52,{"i":[{"n":"self"},{"n":"str"}]}],[11,"child_nodes","","Returns a live collection of child nodes of this node.",52,{"i":[{"n":"self"}],"o":{"n":"nodelist"}}],[11,"base_uri","","Gets the base URL.",52,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"has_child_nodes","","Returns whether this node has children nodes.",52,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_default_namespace","","Determines whether the given namespace is the default namespace of this node.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"is_equal_node","","Tests whether this node is equal to another node. Two nodes are equal if they have the same type, defining characteristics, matching attributes, and so on.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"is_same_node","","Test whether two `Node` references are the same.",52,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"lookup_prefix","","Returns the prefix for the given namespace URI, if present.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"lookup_namespace_uri","","Returns the namespace URI for the given prefix.",52,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"normalize","","Merges any adjacent text nodes and removes empty text nodes under this node.",52,{"i":[{"n":"self"}]}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"clonekind"}}],[11,"eq","","",15,{"i":[{"n":"self"},{"n":"clonekind"}],"o":{"n":"bool"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"node"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"node"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"node"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"node"}],"o":{"n":"self"}}],[11,"try_from","","",69,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"instance_of","","",69,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",69,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",69,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",69,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",69,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",69,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",69,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"from_html","","Attempt to create the `Node` from raw html. The html string must contain exactly one root node.",69,{"i":[{"n":"str"}],"o":{"g":["node","syntaxerror"],"n":"result"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"nodetype"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",16,{"i":[{"n":"self"},{"n":"nodetype"}],"o":{"n":"bool"}}],[11,"class_list","","The Element.classList is a read-only property which returns a live TokenList collection of the class attributes of the element.",53,{"i":[{"n":"self"}],"o":{"n":"tokenlist"}}],[11,"has_attribute","","The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",53,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"get_attribute","","Element.getAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string);",53,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"set_attribute","","Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.",53,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["invalidcharactererror"],"n":"result"}}],[11,"scroll_top","","Gets the the number of pixels that an element's content is scrolled vertically.",53,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_scroll_top","","Sets the the number of pixels that an element's content is scrolled vertically.",53,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"scroll_left","","Gets the the number of pixels that an element's content is scrolled to the left.",53,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_scroll_left","","Sets the the number of pixels that an element's content is scrolled to the left.",53,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_attribute_names","","Element.getAttributeNames() returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.",53,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"vec"}}],[11,"remove_attribute","","Element.removeAttribute removes an attribute from the specified element.",53,{"i":[{"n":"self"},{"n":"str"}]}],[11,"has_attributes","","The Element.hasAttributes() method returns Boolean value, indicating if the current element has any attributes or not.",53,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_pointer_capture","","Designates a specific element as the capture target of future pointer events.",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["invalidpointerid"],"n":"result"}}],[11,"release_pointer_capture","","Releases pointer capture that was previously set for a specific pointer",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["invalidpointerid"],"n":"result"}}],[11,"has_pointer_capture","","Returns a boolean indicating if the element has captured the specified pointer",53,{"i":[{"n":"self"},{"n":"i32"}],"o":{"n":"bool"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"element"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"element"}],"o":{"n":"self"}}],[11,"try_from","","",73,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","","",69,{"i":[{"n":"element"}],"o":{"n":"self"}}],[11,"try_from","","",73,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"instance_of","","",73,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",73,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",73,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",73,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",73,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",73,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",73,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"focus","","Sets focus on the specified element, if it can be focused.",54,{"i":[{"n":"self"}]}],[11,"blur","","Removes keyboard focus from the current element.",54,{"i":[{"n":"self"}]}],[11,"dataset","","Allows access, both in reading and writing, to all of the custom data attributes (data-*) set on the element, either in HTML or in the DOM.",54,{"i":[{"n":"self"}],"o":{"n":"stringmap"}}],[11,"get_bounding_client_rect","","Returns the size of an element and its position relative to the viewport. (JavaScript docs)",54,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"offset_width","","Returns the layout width of an element. Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width.",54,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"offset_height","","Returns the height of the element including vertical padding and borders, as an integer.",54,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"inner_text","","A property which represents the \"rendered\" text content of a node and its descendants. It approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied to the clipboard.",54,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"rect"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"instance_of","","",74,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",74,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",74,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",74,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",74,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",74,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",74,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"get_x","","Represents the x coordinate of the DOMRect's origin (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_y","","Represents the y coordinate of the DOMRect's origin. (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_width","","Represents the width of the DOMRect. (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_height","","Represents the height of the DOMRect. (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_top","","Returns the top coordinate value of the DOMRect. (Has the same value as y, or y + height if height is negative.) (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_right","","Returns the right coordinate value of the DOMRect. (Has the same value as x + width, or x if width is negative.) (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_bottom","","Returns the bottom coordinate value of the DOMRect. (Has the same value as y + height, or y if height is negative.) (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"get_left","","Returns the left coordinate value of the DOMRect. (Has the same value as x, or x + width if width is negative.) (JavaScript docs)",74,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"htmlelement"}}],[11,"fmt","","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",75,{"i":[{"n":"self"},{"n":"htmlelement"}],"o":{"n":"bool"}}],[11,"ne","","",75,{"i":[{"n":"self"},{"n":"htmlelement"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"htmlelement"}],"o":{"n":"self"}}],[11,"try_from","","",75,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","","",69,{"i":[{"n":"htmlelement"}],"o":{"n":"self"}}],[11,"try_from","","",75,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","","",73,{"i":[{"n":"htmlelement"}],"o":{"n":"self"}}],[11,"try_from","","",75,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"instance_of","","",75,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",75,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",75,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",75,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",75,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",75,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",75,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","stdweb::web::html_element","",76,{"i":[{"n":"self"}],"o":{"n":"canvaselement"}}],[11,"fmt","","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",76,{"i":[{"n":"self"},{"n":"canvaselement"}],"o":{"n":"bool"}}],[11,"ne","","",76,{"i":[{"n":"self"},{"n":"canvaselement"}],"o":{"n":"bool"}}],[11,"from","stdweb::web","",68,{"i":[{"n":"canvaselement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",76,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",69,{"i":[{"n":"canvaselement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",76,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",73,{"i":[{"n":"canvaselement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",76,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",75,{"i":[{"n":"canvaselement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",76,{"i":[{"n":"htmlelement"}],"o":{"n":"result"}}],[11,"instance_of","","",76,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",76,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",76,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",76,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",76,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",76,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",76,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"height","","Returns a positive integer reflecting the height HTML attribute of the  element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.",76,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"set_height","","Sets a positive integer reflecting the height HTML attribute of the  element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.",76,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"width","","Returns a positive integer reflecting the width HTML attribute of the  element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.",76,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"set_width","","Sets a positive integer reflecting the width HTML attribute of the  element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.",76,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"get_context","","Returns a drawing context on the canvas, or None if the context identifier is not supported.",76,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"to_data_url","","Returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi.",76,{"i":[{"n":"self"},{"g":["str"],"n":"option"},{"g":["f64"],"n":"option"}],"o":{"g":["string","todo"],"n":"result"}}],[11,"to_blob","","Creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.",76,{"i":[{"n":"self"},{"n":"f"},{"g":["str"],"n":"option"},{"g":["f64"],"n":"option"}],"o":{"g":["todo"],"n":"result"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"imageelement"}}],[11,"fmt","","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",77,{"i":[{"n":"self"},{"n":"imageelement"}],"o":{"n":"bool"}}],[11,"ne","","",77,{"i":[{"n":"self"},{"n":"imageelement"}],"o":{"n":"bool"}}],[11,"from","stdweb::web","",68,{"i":[{"n":"imageelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",77,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",69,{"i":[{"n":"imageelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",77,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",73,{"i":[{"n":"imageelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",77,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",75,{"i":[{"n":"imageelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",77,{"i":[{"n":"htmlelement"}],"o":{"n":"result"}}],[11,"instance_of","","",77,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",77,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",77,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",77,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",77,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",77,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",77,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"new","","Constructs a new ImageElement.",77,{"o":{"n":"imageelement"}}],[11,"with_size","","Constructs a new ImageElement with the given width and height.",77,{"i":[{"n":"u32"},{"n":"u32"}],"o":{"n":"imageelement"}}],[11,"alt","","Returns the HTML `alt` attribute, representing the fallback context for the image.",77,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_alt","","Sets the HTML `alt` attribute, representing the fallback context for the image.",77,{"i":[{"n":"self"},{"n":"str"}]}],[11,"complete","","Returns true if the browser has finished fetching the image, whether successful or not. It also return true if the image has no src value.",77,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cross_origin","","Returns the Cross-Origin Resource Sharing (CORS) setting for the image.",77,{"i":[{"n":"self"}],"o":{"n":"crossoriginsetting"}}],[11,"set_cross_origin","","Sets the Cross-Origin Resource Sharing (CORS) setting for the image.",77,{"i":[{"n":"self"},{"n":"crossoriginsetting"}]}],[11,"height","","Returns the the rendered height of the image in CSS pixels.",77,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"set_height","","Sets the the rendered height of the image in CSS pixels.",77,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"is_map","","Indicates whether the image is part of a server-side image map.",77,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"set_is_map","","Sets whether the image is part of a server-side image map.",77,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"natural_height","","Returns the intrinsic height of the image in CSS pixels, if it is available.",77,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"natural_width","","Returns the intrinsic width of the image in CSS pixels, if it is available.",77,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"src","","Returns the full URL of the image, including the base URI.",77,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_src","","Sets the full URL of the image, including the base URI.",77,{"i":[{"n":"self"},{"n":"str"}]}],[11,"use_map","","Returns the `usemap` HTML attribute, containing a partial URL of a map element.",77,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_use_map","","Sets the `usemap` HTML attribute, containing a partial URL of a map element.",77,{"i":[{"n":"self"},{"n":"str"}]}],[11,"width","","Returns the rendered width of the image in CSS pixels.",77,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"set_width","","Sets the rendered width of the image in CSS pixels.",77,{"i":[{"n":"self"},{"n":"u32"}]}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"inputelement"}}],[11,"fmt","","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",78,{"i":[{"n":"self"},{"n":"inputelement"}],"o":{"n":"bool"}}],[11,"ne","","",78,{"i":[{"n":"self"},{"n":"inputelement"}],"o":{"n":"bool"}}],[11,"from","stdweb::web","",68,{"i":[{"n":"inputelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",78,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",69,{"i":[{"n":"inputelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",78,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",73,{"i":[{"n":"inputelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",78,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",75,{"i":[{"n":"inputelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",78,{"i":[{"n":"htmlelement"}],"o":{"n":"result"}}],[11,"instance_of","","",78,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",78,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",78,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",78,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",78,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",78,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",78,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"raw_value","","The value of the control. This attribute is optional except when the input is a radio button or a checkbox.",78,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_raw_value","","Sets the value of the control.",78,{"i":[{"n":"self"},{"n":"str"}]}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"textareaelement"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",79,{"i":[{"n":"self"},{"n":"textareaelement"}],"o":{"n":"bool"}}],[11,"ne","","",79,{"i":[{"n":"self"},{"n":"textareaelement"}],"o":{"n":"bool"}}],[11,"from","stdweb::web","",68,{"i":[{"n":"textareaelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",79,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",69,{"i":[{"n":"textareaelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",79,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",73,{"i":[{"n":"textareaelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",79,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",75,{"i":[{"n":"textareaelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",79,{"i":[{"n":"htmlelement"}],"o":{"n":"result"}}],[11,"instance_of","","",79,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",79,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",79,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",79,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",79,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",79,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",79,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"value","","The value of the control.",79,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_value","","Sets the value of the control.",79,{"i":[{"n":"self"},{"n":"str"}]}],[11,"clone","stdweb::web::error","",80,{"i":[{"n":"self"}],"o":{"n":"unknownvalueerror"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",80,{"i":[{"n":"self"},{"n":"unknownvalueerror"}],"o":{"n":"bool"}}],[11,"ne","","",80,{"i":[{"n":"self"},{"n":"unknownvalueerror"}],"o":{"n":"bool"}}],[11,"fmt","","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",80,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","stdweb::web::html_element","",81,{"i":[{"n":"self"}],"o":{"n":"selectelement"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",81,{"i":[{"n":"self"},{"n":"selectelement"}],"o":{"n":"bool"}}],[11,"ne","","",81,{"i":[{"n":"self"},{"n":"selectelement"}],"o":{"n":"bool"}}],[11,"from","stdweb::web","",68,{"i":[{"n":"selectelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",81,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",69,{"i":[{"n":"selectelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",81,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",73,{"i":[{"n":"selectelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",81,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",75,{"i":[{"n":"selectelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",81,{"i":[{"n":"htmlelement"}],"o":{"n":"result"}}],[11,"instance_of","","",81,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",81,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",81,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",81,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",81,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",81,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",81,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"raw_value","","Returns the value attribute of the first selected `<option>` element or if it is missing, the text attribute. If there is no selection, return empty string. This method is just a wrapper for getting `HTMLSelectElement.value` directly",81,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_raw_value","","Set the given value to `HTMLSelectElement.value` directly.",81,{"i":[{"n":"self"},{"n":"str"}]}],[11,"selected_index","","Returns the `Some(index)` of the first selected item, if any, or `None` if there is no selected item.",81,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"option"}}],[11,"set_selected_index","","Change selected index to the given value.",81,{"i":[{"n":"self"},{"g":["u32"],"n":"option"}]}],[11,"value","","Returns the `Some(value)` of the first selected item, if any, or `None` if there is no selected item.",81,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"set_value","","Change the selected value to the given value. If you provide an invalid value, the `<select>` element will have no item selected, and an `UnknownValueError` is returned.",81,{"i":[{"n":"self"},{"g":["str"],"n":"option"}],"o":{"g":["unknownvalueerror"],"n":"result"}}],[11,"multiple","","Indicates whether multiple items can be selected",81,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"selected_options","","An `HtmlCollection` representing the set of `<option>` elements that are selected.",81,{"i":[{"n":"self"}],"o":{"n":"htmlcollection"}}],[11,"selected_values","","A convenience method to get values of all selected `<option>` elements",81,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"vec"}}],[11,"selected_indices","","A convenience method to get indices of all selected `<option>` elements",81,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"vec"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"optionelement"}}],[11,"fmt","","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",82,{"i":[{"n":"self"},{"n":"optionelement"}],"o":{"n":"bool"}}],[11,"ne","","",82,{"i":[{"n":"self"},{"n":"optionelement"}],"o":{"n":"bool"}}],[11,"from","stdweb::web","",68,{"i":[{"n":"optionelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",82,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",69,{"i":[{"n":"optionelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",82,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",73,{"i":[{"n":"optionelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",82,{"i":[{"n":"element"}],"o":{"n":"result"}}],[11,"from","stdweb::web","",75,{"i":[{"n":"optionelement"}],"o":{"n":"self"}}],[11,"try_from","stdweb::web::html_element","",82,{"i":[{"n":"htmlelement"}],"o":{"n":"result"}}],[11,"instance_of","","",82,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",82,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",82,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",82,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",82,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",82,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",82,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"index","","The position of the option within the list of options it belongs to, in tree-order. If the option is not part of a list of options, like when it is part of the `<datalist>` element, the value is 0.",82,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"value","","Reflects the value of the value HTML attribute, if it exists; otherwise reflects value of the `Node.textContent` property.",82,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_timeout","stdweb::web","Sets a timer which executes a function once after the timer expires.",55,{"i":[{"n":"self"},{"n":"f"},{"n":"u32"}]}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"tokenlist"}}],[11,"fmt","","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",83,{"i":[{"n":"self"},{"n":"tokenlist"}],"o":{"n":"bool"}}],[11,"ne","","",83,{"i":[{"n":"self"},{"n":"tokenlist"}],"o":{"n":"bool"}}],[11,"instance_of","","",83,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",83,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",83,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",83,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",83,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",83,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",83,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"len","","Gets the number of tokens in the list.",83,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"add","","Adds token to the underlying string.",83,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"remove","","Removes token from the underlying string.",83,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"contains","","Returns `true` if the underlying string contains token, otherwise `false`.",83,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"documentfragment"}}],[11,"fmt","","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",84,{"i":[{"n":"self"},{"n":"documentfragment"}],"o":{"n":"bool"}}],[11,"ne","","",84,{"i":[{"n":"self"},{"n":"documentfragment"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"documentfragment"}],"o":{"n":"self"}}],[11,"try_from","","",84,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","","",69,{"i":[{"n":"documentfragment"}],"o":{"n":"self"}}],[11,"try_from","","",84,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"instance_of","","",84,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",84,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",84,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",84,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",84,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",84,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",84,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"textnode"}}],[11,"fmt","","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",85,{"i":[{"n":"self"},{"n":"textnode"}],"o":{"n":"bool"}}],[11,"ne","","",85,{"i":[{"n":"self"},{"n":"textnode"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"textnode"}],"o":{"n":"self"}}],[11,"try_from","","",85,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"from","","",69,{"i":[{"n":"textnode"}],"o":{"n":"self"}}],[11,"try_from","","",85,{"i":[{"n":"node"}],"o":{"n":"result"}}],[11,"instance_of","","",85,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",85,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",85,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",85,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",85,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",85,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",85,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"nodelist"}}],[11,"fmt","","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",86,{"i":[{"n":"self"},{"n":"nodelist"}],"o":{"n":"bool"}}],[11,"ne","","",86,{"i":[{"n":"self"},{"n":"nodelist"}],"o":{"n":"bool"}}],[11,"instance_of","","",86,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",86,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",86,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",86,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",86,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",86,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",86,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"len","","Returns the number of Nodes contained in this list.",86,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"item","","Returns a node from a NodeList by index.",86,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["node"],"n":"option"}}],[11,"iter","","Returns an iterator over the list.",86,{"i":[{"n":"self"}],"o":{"n":"nodeiter"}}],[11,"into_iter","","",86,null],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"stringmap"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",87,{"i":[{"n":"self"},{"n":"stringmap"}],"o":{"n":"bool"}}],[11,"ne","","",87,{"i":[{"n":"self"},{"n":"stringmap"}],"o":{"n":"bool"}}],[11,"instance_of","","",87,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",87,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",87,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",87,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",87,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",87,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",87,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"get","","Returns a value corresponding to the key.",87,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",87,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"remove","","Removes a key from the map.",87,{"i":[{"n":"self"},{"n":"str"}]}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",87,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"location"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",88,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"ne","","",88,{"i":[{"n":"self"},{"n":"location"}],"o":{"n":"bool"}}],[11,"instance_of","","",88,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",88,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",88,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",88,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",88,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",88,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",88,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"href","","The entire URL.",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"origin","","Returns a `String` containing the Unicode serialization of the origin of the represented URL, that is:",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"protocol","","Returns a `String` representing the protocol scheme of the URL, including the final ':'.",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"host","","Returns a `String` containing the host (i.e. hostname) and then, if the port of the URL is nonempty, a ':', and the port of the URL.",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"hostname","","Returns a `String` which is the domain of the URL",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"port","","Returns a `String` containing the port number or `\"\"` if there is no port.",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"pathname","","Returns a `String` containing an initial '/' followed by the path of the URL.",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"search","","Returns a `String` which is a search string, also called a query string, that is a `String` containing a '?' followed by the parameters of the URL.",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"hash","","Returns a `String` containing a '#' followed by the fragment identifier of the URL. The fragment is not percent-decoded.",88,{"i":[{"n":"self"}],"o":{"g":["string","securityerror"],"n":"result"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"storage"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",89,{"i":[{"n":"self"},{"n":"storage"}],"o":{"n":"bool"}}],[11,"ne","","",89,{"i":[{"n":"self"},{"n":"storage"}],"o":{"n":"bool"}}],[11,"instance_of","","",89,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",89,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",89,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",89,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",89,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",89,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",89,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"len","","Gets the number of data items stored in the `Storage` object.",89,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get","","Returns a value corresponding to the key.",89,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"insert","","Inserts a key-value pair into the storage.",89,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"remove","","Removes a key from the storage.",89,{"i":[{"n":"self"},{"n":"str"}]}],[11,"clear","","When invoked, will empty all keys out of the storage.",89,{"i":[{"n":"self"}]}],[11,"key","","Return the name of the nth key in the storage.",89,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["string"],"n":"option"}}],[11,"contains_key","","Returns true if the storage contains a value for the specified key.",89,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"len","","The size, in bytes, of the data contained in the Blob object.",59,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"mime","","A string indicating the MIME type of the data contained in the `Blob`.",59,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"blob"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",90,{"i":[{"n":"self"},{"n":"blob"}],"o":{"n":"bool"}}],[11,"ne","","",90,{"i":[{"n":"self"},{"n":"blob"}],"o":{"n":"bool"}}],[11,"instance_of","","",90,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",90,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",90,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",90,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",90,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",90,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",90,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"filelist"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",91,{"i":[{"n":"self"},{"n":"filelist"}],"o":{"n":"bool"}}],[11,"ne","","",91,{"i":[{"n":"self"},{"n":"filelist"}],"o":{"n":"bool"}}],[11,"instance_of","","",91,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",91,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",91,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",91,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",91,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",91,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",91,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"len","","Returns the number of Files contained in this list.",91,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"iter","","Returns an iterator over the list.",91,{"i":[{"n":"self"}],"o":{"n":"fileiter"}}],[11,"into_iter","","",91,null],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"filereader"}}],[11,"fmt","","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",92,{"i":[{"n":"self"},{"n":"filereader"}],"o":{"n":"bool"}}],[11,"ne","","",92,{"i":[{"n":"self"},{"n":"filereader"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"filereader"}],"o":{"n":"self"}}],[11,"try_from","","",92,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"instance_of","","",92,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",92,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",92,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",92,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",92,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",92,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",92,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"filereaderresult"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"filereaderreadystate"}}],[11,"eq","","",18,{"i":[{"n":"self"},{"n":"filereaderreadystate"}],"o":{"n":"bool"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a newly constructed `FileReader`.",92,{"o":{"n":"filereader"}}],[11,"read_as_text","","Starts reading the contents of the specified blob. Once finished the `result` attribute will contain the contents of the file as a text string.",92,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["todo"],"n":"result"}}],[11,"read_as_array_buffer","","Starts reading the contents of the specified blob. Once finished the `result` attribute will contain the contents of the file as an TypedArray.",92,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["todo"],"n":"result"}}],[11,"abort","","Aborts the read operation. Upon return, the `ready_state` will be `Done`.",92,{"i":[{"n":"self"}]}],[11,"ready_state","","Returns the current state of the reader.",92,{"i":[{"n":"self"}],"o":{"n":"filereaderreadystate"}}],[11,"result","","The file's contents. This method will only return a value after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.",92,{"i":[{"n":"self"}],"o":{"g":["filereaderresult"],"n":"option"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"arraybuffer"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",93,{"i":[{"n":"self"},{"n":"arraybuffer"}],"o":{"n":"bool"}}],[11,"ne","","",93,{"i":[{"n":"self"},{"n":"arraybuffer"}],"o":{"n":"bool"}}],[11,"instance_of","","",93,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",93,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",93,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",93,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",93,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",93,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",93,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"new","","Creates a new `ArrayBuffer` with the given length in bytes.",93,{"i":[{"n":"u64"}],"o":{"g":["todo"],"n":"result"}}],[11,"len","","Returns the length of the buffer, in bytes.",93,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"instance_of","","",94,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"typedarray"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",94,{"i":[{"n":"self"},{"n":"typedarray"}],"o":{"n":"bool"}}],[11,"ne","","",94,{"i":[{"n":"self"},{"n":"typedarray"}],"o":{"n":"bool"}}],[11,"as_ref","","",94,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",94,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",94,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",94,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",94,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",94,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"buffer","","Returns the TypedArray referenced by this typed array.",94,{"i":[{"n":"self"}],"o":{"n":"arraybuffer"}}],[11,"len","","Returns the number of elements in the buffer.",94,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"to_vec","","Copies `self` into a new `Vec`.",94,{"i":[{"n":"self"}],"o":{"n":"vec"}}],[11,"from","","",94,null],[11,"from","","",94,{"i":[{"n":"arraybuffer"}],"o":{"n":"self"}}],[11,"from","","",94,{"i":[{"n":"arraybuffer"}],"o":{"n":"self"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"xmlhttprequest"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",95,{"i":[{"n":"self"},{"n":"xmlhttprequest"}],"o":{"n":"bool"}}],[11,"ne","","",95,{"i":[{"n":"self"},{"n":"xmlhttprequest"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"xmlhttprequest"}],"o":{"n":"self"}}],[11,"try_from","","",95,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"instance_of","","",95,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",95,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",95,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",95,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",95,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",95,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",95,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"xhrreadystate"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"xhrreadystate"}],"o":{"n":"bool"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates new `XmlHttpRequest`.",95,{"o":{"n":"xmlhttprequest"}}],[11,"ready_state","","Returns the current state of the request as a XhrReadyState.",95,{"i":[{"n":"self"}],"o":{"n":"xhrreadystate"}}],[11,"response_text","","Returns a string that contains the response to the request as text, or None  if the request was unsuccessful or has not yet been sent.",95,{"i":[{"n":"self"}],"o":{"g":["option","todo"],"n":"result"}}],[11,"status","","Returns an unsigned short with the status of the response of the request.",95,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"open","","Open connection with given method (ie GET or POST), and the url to hit.",95,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"get_response_header","","Returns the string containing the text of the specified header. If there are multiple response headers with the same name, then their values are returned as a single concatenated string.",95,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["string"],"n":"option"}}],[11,"set_request_header","","Sets the value of an HTTP request header. Must be called after `open()`, but before `send()`. If this method is called several times with the same header, the values are merged into one single request header.",95,{"i":[{"n":"self"},{"n":"str"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"send","","Send request on an open connection with no data",95,{"i":[{"n":"self"}],"o":{"g":["todo"],"n":"result"}}],[11,"send_with_string","","Send request on an open connection with string body",95,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"send_with_bytes","","Send request on an open connection with a byte array body",95,null],[11,"abort","","Aborts the request if it has already been sent. When a request is aborted, its ready_state is changed to Done and the status code is set to Unsent.",95,{"i":[{"n":"self"}]}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"history"}}],[11,"fmt","","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",96,{"i":[{"n":"self"},{"n":"history"}],"o":{"n":"bool"}}],[11,"ne","","",96,{"i":[{"n":"self"},{"n":"history"}],"o":{"n":"bool"}}],[11,"instance_of","","",96,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",96,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",96,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",96,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",96,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",96,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",96,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"push_state","","Adds a new entry to history.",96,{"i":[{"n":"self"},{"n":"t"},{"n":"str"},{"g":["str"],"n":"option"}]}],[11,"replace_state","","Operates exactly like history.push_state() except that replace_state() modifies the current history entry instead of creating a new one. Note that this doesn't prevent the creation of a new entry in the global browser history.",96,{"i":[{"n":"self"},{"n":"t"},{"n":"str"},{"g":["str"],"n":"option"}],"o":{"g":["todo"],"n":"result"}}],[11,"go","","You can use the go() method to load a specific page from session history, identified by its relative position to the current page (with the current page being, of course, relative index 0).",96,{"i":[{"n":"self"},{"n":"i32"}],"o":{"g":["todo"],"n":"result"}}],[11,"back","","Move one step backward through history.",96,{"i":[{"n":"self"}],"o":{"g":["todo"],"n":"result"}}],[11,"forward","","Move one step forward through history.",96,{"i":[{"n":"self"}],"o":{"g":["todo"],"n":"result"}}],[11,"len","","Returns the current number of history entries.",96,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"socketclosecode"}}],[11,"eq","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"n":"bool"}}],[11,"ne","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"n":"bool"}}],[11,"le","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"n":"bool"}}],[11,"gt","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"n":"bool"}}],[11,"ge","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"n":"bool"}}],[11,"cmp","","",12,{"i":[{"n":"self"},{"n":"socketclosecode"}],"o":{"n":"ordering"}}],[11,"hash","","",12,null],[18,"NORMAL_CLOSURE","","Normal closure; the connection successfully completed whatever purpose for which it was created.",12,null],[18,"GOING_AWAY","","The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.",12,null],[18,"PROTOCOL_ERROR","","The endpoint is terminating the connection due to a protocol error.",12,null],[18,"UNSUPPORTED_DATA","","The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data).",12,null],[18,"NO_STATUS_RECEIVED","","Reserved. Indicates that no status code was provided even though one was expected.",12,null],[18,"ABNORMAL_CLOSURE","","Reserved. Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected.",12,null],[18,"INVALID_FRAME_PAYLOAD_DATA","","The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).",12,null],[18,"POLICY_VIOLATION","","The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable.",12,null],[18,"MESSAGE_TOO_BIG","","The endpoint is terminating the connection because a data frame was received that is too large.",12,null],[18,"MISSING_EXTENSION","","The client is terminating the connection because it expected the server to negotiate one or more extensions, but the server didn't.",12,null],[18,"INTERNAL_ERROR","","The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.",12,null],[18,"SERVICE_RESTART","","The server is terminating the connection because it is restarting.",12,null],[18,"TRY_AGAIN_LATER","","The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients.",12,null],[18,"BAD_GATEWAY","","The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code.",12,null],[18,"TLS_HANDSHAKE","","Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).",12,null],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"websocket"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",97,{"i":[{"n":"self"},{"n":"websocket"}],"o":{"n":"bool"}}],[11,"ne","","",97,{"i":[{"n":"self"},{"n":"websocket"}],"o":{"n":"bool"}}],[11,"from","","",68,{"i":[{"n":"websocket"}],"o":{"n":"self"}}],[11,"try_from","","",97,{"i":[{"n":"eventtarget"}],"o":{"n":"result"}}],[11,"instance_of","","",97,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",97,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",97,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",97,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",97,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",97,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",97,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"socketbinarytype"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",19,{"i":[{"n":"self"},{"n":"socketbinarytype"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",19,{"i":[{"n":"self"},{"n":"socketbinarytype"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",19,{"i":[{"n":"self"},{"n":"socketbinarytype"}],"o":{"n":"ordering"}}],[11,"hash","","",19,null],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"socketreadystate"}}],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",20,{"i":[{"n":"self"},{"n":"socketreadystate"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",20,{"i":[{"n":"self"},{"n":"socketreadystate"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",20,{"i":[{"n":"self"},{"n":"socketreadystate"}],"o":{"n":"ordering"}}],[11,"hash","","",20,null],[11,"try_from","","Performs the conversion.",20,{"i":[{"n":"value"}],"o":{"g":["socketreadystate","conversionerror"],"n":"result"}}],[11,"new","","Returns a newly constructed `WebSocket`.",97,{"i":[{"n":"str"}],"o":{"g":["websocket","creationerror"],"n":"result"}}],[11,"new_with_protocols","","Returns a newly constructed `WebSocket`.",97,null],[11,"binary_type","","Returns the binary type of the web socket. Only affects received messages. The default binary type is `Blob`.",97,{"i":[{"n":"self"}],"o":{"n":"socketbinarytype"}}],[11,"set_binary_type","","Sets the binary type of the web socket. Only affects received messages. The default binary type is `Blob`.",97,{"i":[{"n":"self"},{"n":"socketbinarytype"}]}],[11,"buffered_amount","","Returns the number of bytes of data that have been queued using calls to send() but not yet transmitted to the network. This value resets to zero once all queued data has been sent. This value does not reset to zero when the connection is closed; if you keep calling send(), this will continue to climb.",97,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"extensions","","Returns the extensions selected by the server. This is currently only the empty string or a list of extensions as negotiated by the connection.",97,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"protocol","","Returns a string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.",97,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"ready_state","","Returns the current state of the connection.",97,{"i":[{"n":"self"}],"o":{"n":"socketreadystate"}}],[11,"url","","Returns the URL as resolved by the constructor. This is always an absolute URL.",97,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"close","","Closes the WebSocket connection or connection attempt, if any. If the connection is already CLOSED, this method does nothing.",97,{"i":[{"n":"self"}]}],[11,"close_with_status","","Closes the WebSocket connection or connection attempt, if any. If the connection is already CLOSED, this method does nothing.",97,{"i":[{"n":"self"},{"n":"socketclosecode"},{"n":"str"}],"o":{"g":["closeerror"],"n":"result"}}],[11,"send_text","","Enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.",97,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["todo"],"n":"result"}}],[11,"send_blob","","Enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.",97,{"i":[{"n":"self"},{"n":"blob"}],"o":{"g":["todo"],"n":"result"}}],[11,"send_array_buffer","","Enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.",97,{"i":[{"n":"self"},{"n":"arraybuffer"}],"o":{"g":["todo"],"n":"result"}}],[11,"send_bytes","","Enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.",97,null],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"canvasrenderingcontext2d"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",98,{"i":[{"n":"self"},{"n":"canvasrenderingcontext2d"}],"o":{"n":"bool"}}],[11,"ne","","",98,{"i":[{"n":"self"},{"n":"canvasrenderingcontext2d"}],"o":{"n":"bool"}}],[11,"instance_of","","",98,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",98,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",98,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",98,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",98,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",98,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",98,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"canvasgradient"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",99,{"i":[{"n":"self"},{"n":"canvasgradient"}],"o":{"n":"bool"}}],[11,"ne","","",99,{"i":[{"n":"self"},{"n":"canvasgradient"}],"o":{"n":"bool"}}],[11,"instance_of","","",99,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",99,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",99,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",99,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",99,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",99,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",99,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"canvaspattern"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",100,{"i":[{"n":"self"},{"n":"canvaspattern"}],"o":{"n":"bool"}}],[11,"ne","","",100,{"i":[{"n":"self"},{"n":"canvaspattern"}],"o":{"n":"bool"}}],[11,"instance_of","","",100,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",100,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",100,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",100,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",100,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",100,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",100,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"imagedata"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"instance_of","","",101,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",101,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",101,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",101,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",101,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",101,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",101,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"textmetrics"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"instance_of","","",102,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",102,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",102,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",102,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",102,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",102,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",102,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"compositeoperation"}}],[11,"eq","","",22,{"i":[{"n":"self"},{"n":"compositeoperation"}],"o":{"n":"bool"}}],[11,"fmt","","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"fillrule"}}],[11,"eq","","",23,{"i":[{"n":"self"},{"n":"fillrule"}],"o":{"n":"bool"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"canvasstyle"}}],[11,"eq","","",21,{"i":[{"n":"self"},{"n":"canvasstyle"}],"o":{"n":"bool"}}],[11,"ne","","",21,{"i":[{"n":"self"},{"n":"canvasstyle"}],"o":{"n":"bool"}}],[11,"fmt","","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"linecap"}}],[11,"eq","","",24,{"i":[{"n":"self"},{"n":"linecap"}],"o":{"n":"bool"}}],[11,"fmt","","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"linejoin"}}],[11,"eq","","",25,{"i":[{"n":"self"},{"n":"linejoin"}],"o":{"n":"bool"}}],[11,"fmt","","",26,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"repetition"}}],[11,"eq","","",26,{"i":[{"n":"self"},{"n":"repetition"}],"o":{"n":"bool"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"textalign"}}],[11,"eq","","",27,{"i":[{"n":"self"},{"n":"textalign"}],"o":{"n":"bool"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"textbaseline"}}],[11,"eq","","",28,{"i":[{"n":"self"},{"n":"textbaseline"}],"o":{"n":"bool"}}],[11,"fmt","stdweb::web::error","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"addcolorstoperror"}}],[11,"try_from","","",32,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"fmt","","",32,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",32,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"drawimageerror"}}],[11,"try_from","","",33,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"fmt","","",33,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",33,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"getimagedataerror"}}],[11,"try_from","","",34,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"fmt","","",34,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",34,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"try_from","stdweb::web","Performs the conversion.",21,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"default","","",23,{"o":{"n":"fillrule"}}],[11,"default","","",26,{"o":{"n":"repetition"}}],[11,"from_canvas","","",98,{"i":[{"n":"canvaselement"}],"o":{"g":["conversionerror"],"n":"result"}}],[11,"add_color_stop","","Adds a new stop, defined by an offset and a color, to the gradient. If the offset is  not between 0 and 1, an INDEX_SIZE_ERR is returned, if the color can't be parsed as a  CSS , a SYNTAX_ERR is returned.",99,{"i":[{"n":"self"},{"n":"f64"},{"n":"str"}],"o":{"g":["addcolorstoperror"],"n":"result"}}],[11,"get_height","","Returns the number of rows in the image data object.",101,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_width","","Returns the number of pixels per row in the image data object.",101,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"get_canvas","","The CanvasRenderingContext2D.canvas property is a read-only reference to the HTMLCanvasElement  object that is associated with the context. It might be null if there is no association with an  element.",98,{"i":[{"n":"self"}],"o":{"n":"canvaselement"}}],[11,"get_fill_style","","The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes.  The default is #000 (black).",98,{"i":[{"n":"self"}],"o":{"n":"canvasstyle"}}],[11,"set_fill_style_color","","The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes.  The default is #000 (black).",98,{"i":[{"n":"self"},{"n":"str"}]}],[11,"set_fill_style_gradient","","The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes.  The default is #000 (black).",98,{"i":[{"n":"self"},{"n":"canvasgradient"}]}],[11,"set_fill_style_pattern","","The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes.  The default is #000 (black).",98,{"i":[{"n":"self"},{"n":"canvaspattern"}]}],[11,"get_font","","The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current  text style being used when drawing text. This string uses the same syntax as the CSS  font specifier. The default font is 10px sans-serif.",98,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_font","","The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current  text style being used when drawing text. This string uses the same syntax as the CSS  font specifier. The default font is 10px sans-serif.",98,{"i":[{"n":"self"},{"n":"str"}]}],[11,"get_global_alpha","","The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha  value that is applied to shapes and images before they are drawn onto the canvas.  The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque).",98,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_global_alpha","","The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha  value that is applied to shapes and images before they are drawn onto the canvas.  The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque).",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_global_composite_operation","","The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the  type of compositing operation to apply when drawing new shapes, where type is a string identifying  which of the compositing or blending mode operations to use.",98,{"i":[{"n":"self"}],"o":{"n":"compositeoperation"}}],[11,"set_global_composite_operation","","The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the  type of compositing operation to apply when drawing new shapes, where type is a string identifying  which of the compositing or blending mode operations to use.",98,{"i":[{"n":"self"},{"n":"compositeoperation"}]}],[11,"get_line_cap","","Determines how the end points of every line are drawn.  There are three possible values for this property and those are: butt, round and square. By default this property is set to butt.",98,{"i":[{"n":"self"}],"o":{"n":"linecap"}}],[11,"set_line_cap","","Determines how the end points of every line are drawn.  There are three possible values for this property and those are: butt, round and square. By default this property is set to butt.",98,{"i":[{"n":"self"},{"n":"linecap"}]}],[11,"get_line_dash_offset","","Sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect, for example.",98,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_line_dash_offset","","Sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect, for example.",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_line_join","","Determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are  joined together (degenerate segments with zero lengths, whose specified endpoints and control points are  exactly at the same position, are skipped).",98,{"i":[{"n":"self"}],"o":{"n":"linejoin"}}],[11,"set_line_join","","Determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are  joined together (degenerate segments with zero lengths, whose specified endpoints and control points are  exactly at the same position, are skipped).",98,{"i":[{"n":"self"},{"n":"linejoin"}]}],[11,"get_line_width","","Sets the thickness of lines in space units. When getting, it returns the current value (1.0 by default).  When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.",98,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_line_width","","Sets the thickness of lines in space units. When getting, it returns the current value (1.0 by default).  When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_miter_limit","","sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default).  When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.",98,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_miter_limit","","sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default).  When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_shadow_blur","","Specifies the level of the blurring effect; this value doesn't correspond to a number of pixels and is not  affected by the current transformation matrix. The default value is 0.",98,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_shadow_blur","","Specifies the level of the blurring effect; this value doesn't correspond to a number of pixels and is not  affected by the current transformation matrix. The default value is 0.",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_shadow_color","","Specifies the color of the shadow.",98,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"set_shadow_color","","Specifies the color of the shadow.",98,{"i":[{"n":"self"},{"n":"str"}]}],[11,"get_shadow_offset_x","","Specifies the distance that the shadow will be offset in horizontal distance.",98,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_shadow_offset_x","","Specifies the distance that the shadow will be offset in horizontal distance.",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_shadow_offset_y","","Specifies the distance that the shadow will be offset in vertical distance.",98,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"set_shadow_offset_y","","Specifies the distance that the shadow will be offset in vertical distance.",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"get_stroke_style","","Specifies the color or style to use for the lines around shapes. The default is #000 (black).",98,{"i":[{"n":"self"}],"o":{"n":"canvasstyle"}}],[11,"set_stroke_style_color","","Specifies the color or style to use for the lines around shapes. The default is #000 (black).",98,{"i":[{"n":"self"},{"n":"str"}]}],[11,"set_stroke_style_gradient","","Specifies the color or style to use for the lines around shapes. The default is #000 (black).",98,{"i":[{"n":"self"},{"n":"canvasgradient"}]}],[11,"set_stroke_style_pattern","","Specifies the color or style to use for the lines around shapes. The default is #000 (black).",98,{"i":[{"n":"self"},{"n":"canvaspattern"}]}],[11,"get_text_align","","specifies the current text alignment being used when drawing text.  Beware that the alignment is based on the x value of the fillText() method.  So if textAlign is \"center\", then the text would be drawn at x - (width / 2).",98,{"i":[{"n":"self"}],"o":{"n":"textalign"}}],[11,"set_text_align","","specifies the current text alignment being used when drawing text.  Beware that the alignment is based on the x value of the fillText() method.  So if textAlign is \"center\", then the text would be drawn at x - (width / 2).",98,{"i":[{"n":"self"},{"n":"textalign"}]}],[11,"get_text_baseline","","Specifies the current text baseline being used when drawing text.",98,{"i":[{"n":"self"}],"o":{"n":"textbaseline"}}],[11,"set_text_baseline","","Specifies the current text baseline being used when drawing text.",98,{"i":[{"n":"self"},{"n":"textbaseline"}]}],[11,"arc","","Adds an arc to the path which is centered at (x, y) position with radius r starting  at startAngle and ending at endAngle going in the given direction by anticlockwise  (defaulting to clockwise).",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"bool"}]}],[11,"arc_to","","Adds an arc to the path with the given control points and radius. The arc drawn will be a part of a circle, never elliptical.  Typical use could be making a rounded corner. One way to think about the arc drawn is to imagine two straight segments, from the  starting point (latest point in current path) to the first control point, and then  from the first control point to the second control point. These two segments form  a sharp corner with the first control point being in the corner. Using arcTo, the  corner will instead be an arc with the given radius. The arc is tangential to both segments, which can sometimes produce surprising results,  e.g. if the radius given is larger than the distance between the starting point and the first control point. If the radius specified doesn't make the arc meet the starting point (latest point in the current path),  the starting point is connected to the arc with a straight line segment.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"g":["indexsizeerror"],"n":"result"}}],[11,"begin_path","","Starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.",98,{"i":[{"n":"self"}]}],[11,"bezier_curve_to","","Adds a cubic Bézier curve to the path. It requires three points. The first two points  are control points and the third one is the end point. The starting point is the last  point in the current path, which can be changed using moveTo() before creating the Bézier curve.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"clear_rect","","Sets all pixels in the rectangle defined by starting point (x, y) and size (width, height)  to transparent black, erasing any previously drawn content.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"clip","","Turns the path currently being built into the current clipping path. ctx.clip(path, fillRule) is not supported because (Path2D) is still experimental",98,{"i":[{"n":"self"},{"n":"fillrule"}]}],[11,"close_path","","Causes the point of the pen to move back to the start of the current sub-path. It tries  to add a straight line (but does not actually draw it) from the current point to the start.  If the shape has already been closed or has only one point, this function does nothing.",98,{"i":[{"n":"self"}]}],[11,"create_linear_gradient","","Creates a gradient along the line given by the coordinates represented by the parameters.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"n":"canvasgradient"}}],[11,"create_image_data","","Creates a new, blank ImageData object with the specified dimensions.  All of the pixels in the new object are transparent black.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"g":["imagedata","indexsizeerror"],"n":"result"}}],[11,"create_image_data_size_of","","Creates a new, blank ImageData object with the specified dimensions.  All of the pixels in the new object are transparent black.",98,{"i":[{"n":"self"},{"n":"imagedata"}],"o":{"n":"imagedata"}}],[11,"create_pattern_image","","Creates a pattern using the specified image (a CanvasImageSource). It repeats the source in  the directions specified by the repetition argument. This method returns a CanvasPattern.",98,{"i":[{"n":"self"},{"n":"imageelement"},{"n":"repetition"}],"o":{"n":"canvaspattern"}}],[11,"create_radial_gradient","","Creates a radial gradient given by the coordinates of the two circles represented by the parameters.  This method returns a CanvasGradient.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"g":["canvasgradient","indexsizeerror"],"n":"result"}}],[11,"draw_focus_if_needed","","Draws a focus ring around the current path or given path, If a given element is focused.",98,{"i":[{"n":"self"},{"n":"t"}]}],[11,"draw_image","","Provides different ways to draw an image onto the canvas.",98,{"i":[{"n":"self"},{"n":"imageelement"},{"n":"f64"},{"n":"f64"}],"o":{"g":["drawimageerror"],"n":"result"}}],[11,"draw_image_d","","Provides different ways to draw an image onto the canvas.",98,{"i":[{"n":"self"},{"n":"imageelement"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"g":["drawimageerror"],"n":"result"}}],[11,"draw_image_s","","Provides different ways to draw an image onto the canvas.",98,{"i":[{"n":"self"},{"n":"imageelement"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"g":["drawimageerror"],"n":"result"}}],[11,"fill","","Fills the current or given path with the current fill style using the non-zero or even-odd winding rule.",98,{"i":[{"n":"self"},{"n":"fillrule"}]}],[11,"fill_rect","","Draws a filled rectangle whose starting point is at the coordinates (x, y) with the specified width and height and whose style is determined by the fillStyle attribute.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"fill_text","","Draws a text string at the specified coordinates, filling the string's characters with the current foreground color. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",98,{"i":[{"n":"self"},{"n":"str"},{"n":"f64"},{"n":"f64"},{"g":["f64"],"n":"option"}]}],[11,"get_image_data","","Returns an ImageData object representing the underlying pixel data for the area of the  canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height.  This method is not affected by the canvas transformation matrix. Pixels outside of the canvas area are present as transparent black values in the returned ImageData.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}],"o":{"g":["imagedata","getimagedataerror"],"n":"result"}}],[11,"get_line_dash","","Gets the current line dash pattern.",98,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"vec"}}],[11,"is_point_in_path","","Reports whether or not the specified point is contained in the current path.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"fillrule"}],"o":{"n":"bool"}}],[11,"is_point_in_stroke","","Reports whether or not the specified point is inside the area contained by the stroking of a path.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}],"o":{"n":"bool"}}],[11,"line_to","","Connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}]}],[11,"measure_text","","Returns a TextMetrics object that contains information about the measured text (such as its width for example).",98,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["textmetrics","securityerror"],"n":"result"}}],[11,"move_to","","Moves the starting point of a new sub-path to the (x, y) coordinates.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}]}],[11,"put_image_data","","Paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels  from that rectangle are painted. This method is not affected by the canvas transformation matrix.",98,{"i":[{"n":"self"},{"n":"imagedata"},{"n":"f32"},{"n":"f32"}],"o":{"g":["invalidstateerror"],"n":"result"}}],[11,"put_image_data_dirty","","Paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels  from that rectangle are painted. This method is not affected by the canvas transformation matrix.",98,{"i":[{"n":"self"},{"n":"imagedata"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"},{"n":"f32"}],"o":{"g":["invalidstateerror"],"n":"result"}}],[11,"quadratic_curve_to","","Adds a quadratic Bézier curve to the path. It requires two points.  The first point is a control point and the second one is the end point.  The starting point is the last point in the current path, which can be changed using  moveTo() before creating the quadratic Bézier curve.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"rect","","Creates a path for a rectangle at position (x, y) with a size that is determined by width and height.  Those four points are connected by straight lines and the sub-path is marked as closed,  so that you can fill or stroke this rectangle.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"restore","","Restores the most recently saved canvas state by popping the top entry in the drawing state stack.  If there is no saved state, this method does nothing.",98,{"i":[{"n":"self"}]}],[11,"rotate","","Adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.",98,{"i":[{"n":"self"},{"n":"f64"}]}],[11,"save","","Saves the entire state of the canvas by pushing the current state onto a stack.",98,{"i":[{"n":"self"}]}],[11,"scale","","adds a scaling transformation to the canvas units by x horizontally and by y vertically. By default, one unit on the canvas is exactly one pixel. If we apply, for instance, a scaling factor of 0.5,  the resulting unit would become 0.5 pixels and so shapes would be drawn at half size.  In a similar way setting the scaling factor to 2.0 would increase the unit size and one unit now becomes two pixels.  This results in shapes being drawn twice as large.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}]}],[11,"set_line_dash","","Sets the line dash pattern used when stroking lines, using an array of values which specify alternating lengths of lines and gaps which describe the pattern.",98,{"i":[{"n":"self"},{"g":["f64"],"n":"vec"}]}],[11,"set_transform","","Resets (overrides) the current transformation to the identity matrix and then invokes a transformation described by the arguments of this method. See also the transform() method, which does not override the current transform matrix and multiplies it with a given one.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"stroke","","Strokes the current or given path with the current stroke style using the non-zero winding rule.",98,{"i":[{"n":"self"}]}],[11,"stroke_rect","","Paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"stroke_text","","Strokes — that is, draws the outlines of — the characters of a specified text string at the given (x, y) position.  If the optional fourth parameter for a maximum width is provided, the text is scaled to fit that width. See the CanvasRenderingContext2D.fillText() method to draw the text with the characters filled with color rather than having just their outlines drawn.",98,{"i":[{"n":"self"},{"n":"str"},{"n":"f64"},{"n":"f64"},{"g":["f64"],"n":"option"}]}],[11,"transform","","Multiplies the current transformation with the matrix described by the arguments of this method.  You are able to scale, rotate, move and skew the context. See also the setTransform() method which resets the current transform to the identity matrix and then invokes transform().",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"},{"n":"f64"}]}],[11,"translate","","Adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.",98,{"i":[{"n":"self"},{"n":"f64"},{"n":"f64"}]}],[11,"get_width","","Contains the text's advance width (the width of that inline box) in CSS pixels.",102,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"mutationobserver"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",103,{"i":[{"n":"self"},{"n":"mutationobserver"}],"o":{"n":"bool"}}],[11,"ne","","",103,{"i":[{"n":"self"},{"n":"mutationobserver"}],"o":{"n":"bool"}}],[11,"instance_of","","",103,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",103,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",103,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",103,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",103,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",103,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",103,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"mutationobserverinit"}}],[11,"new","","Returns a new `MutationObserverHandle` with the given callback.",103,{"i":[{"n":"f"}],"o":{"n":"mutationobserverhandle"}}],[11,"observe","","Starts observing changes to the `target`.",103,{"i":[{"n":"self"},{"n":"t"},{"n":"mutationobserverinit"}],"o":{"g":["todo"],"n":"result"}}],[11,"disconnect","","Stops observing all targets.",103,{"i":[{"n":"self"}]}],[11,"take_records","","Empties the `MutationObserver`'s record queue and returns what was in there.",103,{"i":[{"n":"self"}],"o":{"g":["mutationrecord"],"n":"vec"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"deref","","",104,null],[11,"drop","","",104,{"i":[{"n":"self"}]}],[11,"fmt","","",29,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"mutationrecord"}}],[11,"try_from","","",29,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"message","stdweb::web::error","Returns a human-readable description of the error.",35,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"name","","Returns a name specifiying the type of error.",35,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"error"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",105,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"ne","","",105,{"i":[{"n":"self"},{"n":"error"}],"o":{"n":"bool"}}],[11,"instance_of","","",105,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",105,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",105,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",105,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",105,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",105,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",105,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"new","","Creates a new `Error` with the specified `description`.",105,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"fmt","","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",105,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"domexception"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",106,{"i":[{"n":"self"},{"n":"domexception"}],"o":{"n":"bool"}}],[11,"ne","","",106,{"i":[{"n":"self"},{"n":"domexception"}],"o":{"n":"bool"}}],[11,"from","","",105,{"i":[{"n":"domexception"}],"o":{"n":"self"}}],[11,"try_from","","",106,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"instance_of","","",106,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",106,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",106,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",106,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",106,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",106,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",106,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"fmt","","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",106,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"hierarchyrequesterror"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",107,{"i":[{"n":"self"},{"n":"hierarchyrequesterror"}],"o":{"n":"bool"}}],[11,"ne","","",107,{"i":[{"n":"self"},{"n":"hierarchyrequesterror"}],"o":{"n":"bool"}}],[11,"from","","",105,{"i":[{"n":"hierarchyrequesterror"}],"o":{"n":"self"}}],[11,"try_from","","",107,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"hierarchyrequesterror"}],"o":{"n":"self"}}],[11,"try_from","","",107,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",107,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",107,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",107,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",107,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",107,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",107,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",107,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",107,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"invalidaccesserror"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",108,{"i":[{"n":"self"},{"n":"invalidaccesserror"}],"o":{"n":"bool"}}],[11,"ne","","",108,{"i":[{"n":"self"},{"n":"invalidaccesserror"}],"o":{"n":"bool"}}],[11,"from","","",105,{"i":[{"n":"invalidaccesserror"}],"o":{"n":"self"}}],[11,"try_from","","",108,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"invalidaccesserror"}],"o":{"n":"self"}}],[11,"try_from","","",108,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",108,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",108,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",108,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",108,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",108,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",108,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",108,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",108,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"notfounderror"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",109,{"i":[{"n":"self"},{"n":"notfounderror"}],"o":{"n":"bool"}}],[11,"ne","","",109,{"i":[{"n":"self"},{"n":"notfounderror"}],"o":{"n":"bool"}}],[11,"from","","",105,{"i":[{"n":"notfounderror"}],"o":{"n":"self"}}],[11,"try_from","","",109,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"notfounderror"}],"o":{"n":"self"}}],[11,"try_from","","",109,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",109,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",109,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",109,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",109,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",109,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",109,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",109,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",109,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"securityerror"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",110,{"i":[{"n":"self"},{"n":"securityerror"}],"o":{"n":"bool"}}],[11,"ne","","",110,{"i":[{"n":"self"},{"n":"securityerror"}],"o":{"n":"bool"}}],[11,"from","","",105,{"i":[{"n":"securityerror"}],"o":{"n":"self"}}],[11,"try_from","","",110,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"securityerror"}],"o":{"n":"self"}}],[11,"try_from","","",110,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",110,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",110,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",110,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",110,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",110,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",110,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",110,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",110,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"syntaxerror"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",111,{"i":[{"n":"self"},{"n":"syntaxerror"}],"o":{"n":"bool"}}],[11,"ne","","",111,{"i":[{"n":"self"},{"n":"syntaxerror"}],"o":{"n":"bool"}}],[11,"from","","",105,{"i":[{"n":"syntaxerror"}],"o":{"n":"self"}}],[11,"try_from","","",111,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"syntaxerror"}],"o":{"n":"self"}}],[11,"try_from","","",111,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",111,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",111,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",111,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",111,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",111,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",111,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",111,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",111,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"indexsizeerror"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",105,{"i":[{"n":"indexsizeerror"}],"o":{"n":"self"}}],[11,"try_from","","",112,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"indexsizeerror"}],"o":{"n":"self"}}],[11,"try_from","","",112,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",112,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",112,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",112,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",112,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",112,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",112,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",112,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",112,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"invalidstateerror"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",105,{"i":[{"n":"invalidstateerror"}],"o":{"n":"self"}}],[11,"try_from","","",113,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"invalidstateerror"}],"o":{"n":"self"}}],[11,"try_from","","",113,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",113,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",113,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",113,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",113,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",113,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",113,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",113,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",113,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"typeerror"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",105,{"i":[{"n":"typeerror"}],"o":{"n":"self"}}],[11,"try_from","","",114,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"typeerror"}],"o":{"n":"self"}}],[11,"try_from","","",114,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",114,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",114,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",114,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",114,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",114,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",114,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",114,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",114,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"notsupportederror"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",105,{"i":[{"n":"notsupportederror"}],"o":{"n":"self"}}],[11,"try_from","","",115,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"notsupportederror"}],"o":{"n":"self"}}],[11,"try_from","","",115,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",115,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",115,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",115,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",115,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",115,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",115,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",115,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",115,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"invalidcharactererror"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",105,{"i":[{"n":"invalidcharactererror"}],"o":{"n":"self"}}],[11,"try_from","","",116,{"i":[{"n":"error"}],"o":{"n":"result"}}],[11,"from","","",106,{"i":[{"n":"invalidcharactererror"}],"o":{"n":"self"}}],[11,"try_from","","",116,{"i":[{"n":"domexception"}],"o":{"n":"result"}}],[11,"as_ref","","",116,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",116,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",116,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",116,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",116,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",116,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"instance_of","","",116,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",116,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"clone","stdweb::web::event","",117,{"i":[{"n":"self"}],"o":{"n":"changeevent"}}],[11,"fmt","","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",117,{"i":[{"n":"self"},{"n":"changeevent"}],"o":{"n":"bool"}}],[11,"ne","","",117,{"i":[{"n":"self"},{"n":"changeevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",117,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",117,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",117,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",117,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",117,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",117,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",117,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"inputevent"}}],[11,"fmt","","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",118,{"i":[{"n":"self"},{"n":"inputevent"}],"o":{"n":"bool"}}],[11,"ne","","",118,{"i":[{"n":"self"},{"n":"inputevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",118,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",118,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",118,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",118,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",118,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",118,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",118,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"resourceloadevent"}}],[11,"fmt","","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",119,{"i":[{"n":"self"},{"n":"resourceloadevent"}],"o":{"n":"bool"}}],[11,"ne","","",119,{"i":[{"n":"self"},{"n":"resourceloadevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",119,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",119,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",119,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",119,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",119,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",119,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",119,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"resourceabortevent"}}],[11,"fmt","","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",120,{"i":[{"n":"self"},{"n":"resourceabortevent"}],"o":{"n":"bool"}}],[11,"ne","","",120,{"i":[{"n":"self"},{"n":"resourceabortevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",120,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",120,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",120,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",120,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",120,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",120,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",120,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"resourceerrorevent"}}],[11,"fmt","","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",121,{"i":[{"n":"self"},{"n":"resourceerrorevent"}],"o":{"n":"bool"}}],[11,"ne","","",121,{"i":[{"n":"self"},{"n":"resourceerrorevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",121,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",121,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",121,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",121,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",121,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",121,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",121,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"resizeevent"}}],[11,"fmt","","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",122,{"i":[{"n":"self"},{"n":"resizeevent"}],"o":{"n":"bool"}}],[11,"ne","","",122,{"i":[{"n":"self"},{"n":"resizeevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",122,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",122,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",122,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",122,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",122,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",122,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",122,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"readystatechangeevent"}}],[11,"fmt","","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",123,{"i":[{"n":"self"},{"n":"readystatechangeevent"}],"o":{"n":"bool"}}],[11,"ne","","",123,{"i":[{"n":"self"},{"n":"readystatechangeevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",123,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",123,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",123,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",123,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",123,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",123,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",123,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"submitevent"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",124,{"i":[{"n":"self"},{"n":"submitevent"}],"o":{"n":"bool"}}],[11,"ne","","",124,{"i":[{"n":"self"},{"n":"submitevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",124,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",124,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",124,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",124,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",124,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",124,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",124,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"selectionchangeevent"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",125,{"i":[{"n":"self"},{"n":"selectionchangeevent"}],"o":{"n":"bool"}}],[11,"ne","","",125,{"i":[{"n":"self"},{"n":"selectionchangeevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",125,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",125,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",125,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",125,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",125,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",125,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",125,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"related_target","","Returns the secondary target of this event, if any.",49,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"focusevent"}}],[11,"fmt","","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",126,{"i":[{"n":"self"},{"n":"focusevent"}],"o":{"n":"bool"}}],[11,"ne","","",126,{"i":[{"n":"self"},{"n":"focusevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",126,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",126,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",126,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",126,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",126,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",126,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",126,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"blurevent"}}],[11,"fmt","","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",127,{"i":[{"n":"self"},{"n":"blurevent"}],"o":{"n":"bool"}}],[11,"ne","","",127,{"i":[{"n":"self"},{"n":"blurevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",127,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",127,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",127,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",127,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",127,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",127,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",127,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"gamepad","","Returns the gamepad associated with this event.",50,{"i":[{"n":"self"}],"o":{"n":"gamepad"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"gamepadconnectedevent"}}],[11,"fmt","","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",128,{"i":[{"n":"self"},{"n":"gamepadconnectedevent"}],"o":{"n":"bool"}}],[11,"ne","","",128,{"i":[{"n":"self"},{"n":"gamepadconnectedevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",128,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",128,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",128,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",128,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",128,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",128,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",128,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"gamepaddisconnectedevent"}}],[11,"fmt","","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",129,{"i":[{"n":"self"},{"n":"gamepaddisconnectedevent"}],"o":{"n":"bool"}}],[11,"ne","","",129,{"i":[{"n":"self"},{"n":"gamepaddisconnectedevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",129,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",129,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",129,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",129,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",129,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",129,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",129,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"hashchangeevent"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",130,{"i":[{"n":"self"},{"n":"hashchangeevent"}],"o":{"n":"bool"}}],[11,"ne","","",130,{"i":[{"n":"self"},{"n":"hashchangeevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",130,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",130,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",130,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",130,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",130,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",130,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",130,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"old_url","","The previous URL from which the window was navigated.",130,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"new_url","","The new URL to which the window was navigated.",130,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"popstateevent"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",131,{"i":[{"n":"self"},{"n":"popstateevent"}],"o":{"n":"bool"}}],[11,"ne","","",131,{"i":[{"n":"self"},{"n":"popstateevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",131,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",131,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",131,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",131,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",131,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",131,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",131,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"state","","The state object associated to the new history entry, if that entry was created with push_state or affected by replace_state.",131,{"i":[{"n":"self"}],"o":{"n":"value"}}],[11,"alt_key","","Indicates whether the Alt key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"code","","Returns a code value that indicates the physical key pressed on the keyboard.",46,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"ctrl_key","","Returns whether the Ctrl key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns whether a modifier key was down when this event was fired.",46,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"is_composing","","Returns whether this event was fired during composition.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"location","","Returns the location of the key on the keyboard.",46,{"i":[{"n":"self"}],"o":{"n":"keyboardlocation"}}],[11,"key","","Returns the value of a key or keys pressed by the user.",46,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"repeat","","Indicates whether the key is held down such that it is repeating.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",46,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"modifierkey"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",39,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"keyboardlocation"}}],[11,"fmt","","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",38,{"i":[{"n":"self"},{"n":"keyboardlocation"}],"o":{"n":"bool"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"keypressevent"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",132,{"i":[{"n":"self"},{"n":"keypressevent"}],"o":{"n":"bool"}}],[11,"ne","","",132,{"i":[{"n":"self"},{"n":"keypressevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",132,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",132,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",132,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",132,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",132,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",132,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",132,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"keydownevent"}}],[11,"fmt","","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",133,{"i":[{"n":"self"},{"n":"keydownevent"}],"o":{"n":"bool"}}],[11,"ne","","",133,{"i":[{"n":"self"},{"n":"keydownevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",133,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",133,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",133,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",133,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",133,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",133,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",133,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"keyupevent"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",134,{"i":[{"n":"self"},{"n":"keyupevent"}],"o":{"n":"bool"}}],[11,"ne","","",134,{"i":[{"n":"self"},{"n":"keyupevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",134,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",134,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",134,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",134,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",134,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",134,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",134,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"alt_key","","Returns whether the Alt key was down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"button","","Indicates the mouse button that fired this event.",44,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"buttons","","Indicates which mouse buttons were down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"mousebuttonsstate"}}],[11,"client_x","","Returns the X position in the application's client area where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"client_y","","Returns the Y position in the application's client area where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"offset_x","","Returns the X position on the target element where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"offset_y","","Returns the Y position on the target element where this event occured.",44,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"ctrl_key","","Indicates whether the Ctrl key was down when this event fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns the current state of the specified modifier key.",44,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"movement_x","","Returns the change in X coordinate of the pointer between this event and the previous MouseMove event.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"movement_y","","Returns the change in Y coordinate of the pointer between this event and the previous MouseMove event.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"region","","Returns the ID of the hit region affected by the event.",44,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"related_target","","Returns the secondary target of this event, if any.",44,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"screen_x","","Returns the X position of the pointer in screen coordinates.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"screen_y","","Returns the Y position of the pointer in screen coordinates.",44,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",44,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"fmt","","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",37,{"i":[{"n":"self"},{"n":"mousebutton"}],"o":{"n":"bool"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"clickevent"}}],[11,"fmt","","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",135,{"i":[{"n":"self"},{"n":"clickevent"}],"o":{"n":"bool"}}],[11,"ne","","",135,{"i":[{"n":"self"},{"n":"clickevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",135,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",135,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",135,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",135,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",135,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",135,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",135,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"auxclickevent"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",136,{"i":[{"n":"self"},{"n":"auxclickevent"}],"o":{"n":"bool"}}],[11,"ne","","",136,{"i":[{"n":"self"},{"n":"auxclickevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",136,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",136,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",136,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",136,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",136,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",136,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",136,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"contextmenuevent"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",137,{"i":[{"n":"self"},{"n":"contextmenuevent"}],"o":{"n":"bool"}}],[11,"ne","","",137,{"i":[{"n":"self"},{"n":"contextmenuevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",137,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",137,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",137,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",137,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",137,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",137,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",137,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"doubleclickevent"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",138,{"i":[{"n":"self"},{"n":"doubleclickevent"}],"o":{"n":"bool"}}],[11,"ne","","",138,{"i":[{"n":"self"},{"n":"doubleclickevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",138,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",138,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",138,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",138,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",138,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",138,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",138,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"mousedownevent"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"mousedownevent"}],"o":{"n":"bool"}}],[11,"ne","","",139,{"i":[{"n":"self"},{"n":"mousedownevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",139,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",139,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",139,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",139,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",139,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",139,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",139,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"mouseupevent"}}],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"mouseupevent"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"mouseupevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",140,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",140,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",140,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",140,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",140,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",140,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",140,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"mousemoveevent"}}],[11,"fmt","","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",141,{"i":[{"n":"self"},{"n":"mousemoveevent"}],"o":{"n":"bool"}}],[11,"ne","","",141,{"i":[{"n":"self"},{"n":"mousemoveevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",141,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",141,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",141,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",141,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",141,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",141,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",141,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"mouseoverevent"}}],[11,"fmt","","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",142,{"i":[{"n":"self"},{"n":"mouseoverevent"}],"o":{"n":"bool"}}],[11,"ne","","",142,{"i":[{"n":"self"},{"n":"mouseoverevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",142,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",142,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",142,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",142,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",142,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",142,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",142,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"mouseoutevent"}}],[11,"fmt","","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",143,{"i":[{"n":"self"},{"n":"mouseoutevent"}],"o":{"n":"bool"}}],[11,"ne","","",143,{"i":[{"n":"self"},{"n":"mouseoutevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",143,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",143,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",143,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",143,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",143,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",143,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",143,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"mouseenterevent"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",144,{"i":[{"n":"self"},{"n":"mouseenterevent"}],"o":{"n":"bool"}}],[11,"ne","","",144,{"i":[{"n":"self"},{"n":"mouseenterevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",144,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",144,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",144,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",144,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",144,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",144,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",144,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"mouseleaveevent"}}],[11,"fmt","","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",145,{"i":[{"n":"self"},{"n":"mouseleaveevent"}],"o":{"n":"bool"}}],[11,"ne","","",145,{"i":[{"n":"self"},{"n":"mouseleaveevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",145,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",145,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",145,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",145,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",145,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",145,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",145,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"pointer_id","","Returns a unique identifier for the pointer causing the event.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"width","","Returns the width, in CSS pixels, of the contact geometry of the pointer.",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"height","","Returns the height, in CSS pixels, of the contact geometry of the pointer.",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"pressure","","Returns the normalized pressure of the pointer in the range [0, 1]",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"tangential_pressure","","Returns the normalized tangential pressure of the pointer in the range [-1, 1], where 0 is the hardware's neutral position",45,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"tilt_x","","Returns the angle, in the range of [-90, 90] degrees, between the Y-Z plane and the plane containing the transducer (e.g. pen stylus) and the Y axis.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"tilt_y","","Returns the angle, in the range of [-90, 90] degrees, between the X-Z plane and the plane containing the transducer (e.g. pen stylus) and the X axis.",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"twist","","Returns the clockwise rotation, in the range of [0, 359] degrees, of the transducer (e.g. pen stylus) around it's own major axis",45,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"pointer_type","","Indicates the device type that caused the event.",45,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"is_primary","","Indicates if the pointer represents the primary pointer of this pointer type",45,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"pointeroverevent"}}],[11,"fmt","","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",146,{"i":[{"n":"self"},{"n":"pointeroverevent"}],"o":{"n":"bool"}}],[11,"ne","","",146,{"i":[{"n":"self"},{"n":"pointeroverevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",146,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",146,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",146,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",146,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",146,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",146,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",146,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"pointerenterevent"}}],[11,"fmt","","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",147,{"i":[{"n":"self"},{"n":"pointerenterevent"}],"o":{"n":"bool"}}],[11,"ne","","",147,{"i":[{"n":"self"},{"n":"pointerenterevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",147,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",147,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",147,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",147,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",147,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",147,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",147,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"pointerdownevent"}}],[11,"fmt","","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",148,{"i":[{"n":"self"},{"n":"pointerdownevent"}],"o":{"n":"bool"}}],[11,"ne","","",148,{"i":[{"n":"self"},{"n":"pointerdownevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",148,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",148,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",148,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",148,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",148,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",148,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",148,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"pointermoveevent"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",149,{"i":[{"n":"self"},{"n":"pointermoveevent"}],"o":{"n":"bool"}}],[11,"ne","","",149,{"i":[{"n":"self"},{"n":"pointermoveevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",149,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",149,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",149,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",149,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",149,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",149,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",149,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"get_coalesced_events","","Returns the sequence of all `PointerEvent` instances that were coalesced into the dispatched `PointerMoveEvent`.",149,{"i":[{"n":"self"}],"o":{"g":["pointerevent"],"n":"vec"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"pointerupevent"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",150,{"i":[{"n":"self"},{"n":"pointerupevent"}],"o":{"n":"bool"}}],[11,"ne","","",150,{"i":[{"n":"self"},{"n":"pointerupevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",150,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",150,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",150,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",150,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",150,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",150,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",150,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"pointercancelevent"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",151,{"i":[{"n":"self"},{"n":"pointercancelevent"}],"o":{"n":"bool"}}],[11,"ne","","",151,{"i":[{"n":"self"},{"n":"pointercancelevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",151,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",151,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",151,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",151,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",151,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",151,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",151,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"pointeroutevent"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",152,{"i":[{"n":"self"},{"n":"pointeroutevent"}],"o":{"n":"bool"}}],[11,"ne","","",152,{"i":[{"n":"self"},{"n":"pointeroutevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",152,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",152,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",152,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",152,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",152,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",152,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",152,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"pointerleaveevent"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",153,{"i":[{"n":"self"},{"n":"pointerleaveevent"}],"o":{"n":"bool"}}],[11,"ne","","",153,{"i":[{"n":"self"},{"n":"pointerleaveevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",153,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",153,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",153,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",153,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",153,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",153,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",153,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"gotpointercaptureevent"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",154,{"i":[{"n":"self"},{"n":"gotpointercaptureevent"}],"o":{"n":"bool"}}],[11,"ne","","",154,{"i":[{"n":"self"},{"n":"gotpointercaptureevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",154,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",154,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",154,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",154,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",154,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",154,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",154,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"lostpointercaptureevent"}}],[11,"fmt","","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",155,{"i":[{"n":"self"},{"n":"lostpointercaptureevent"}],"o":{"n":"bool"}}],[11,"ne","","",155,{"i":[{"n":"self"},{"n":"lostpointercaptureevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",155,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",155,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",155,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",155,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",155,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",155,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",155,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"length_computable","","Indicates whether the progress is measureable.",47,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"loaded","","Returns the amount of work already performed by the underlying process.",47,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"total","","Returns the total amount of work that the underlying process will perform.",47,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"progressevent"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",156,{"i":[{"n":"self"},{"n":"progressevent"}],"o":{"n":"bool"}}],[11,"ne","","",156,{"i":[{"n":"self"},{"n":"progressevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",156,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",156,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",156,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",156,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",156,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",156,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",156,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"progressloadevent"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",157,{"i":[{"n":"self"},{"n":"progressloadevent"}],"o":{"n":"bool"}}],[11,"ne","","",157,{"i":[{"n":"self"},{"n":"progressloadevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",157,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",157,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",157,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",157,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",157,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",157,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",157,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"loadstartevent"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",158,{"i":[{"n":"self"},{"n":"loadstartevent"}],"o":{"n":"bool"}}],[11,"ne","","",158,{"i":[{"n":"self"},{"n":"loadstartevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",158,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",158,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",158,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",158,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",158,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",158,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",158,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"loadendevent"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",159,{"i":[{"n":"self"},{"n":"loadendevent"}],"o":{"n":"bool"}}],[11,"ne","","",159,{"i":[{"n":"self"},{"n":"loadendevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",159,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",159,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",159,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",159,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",159,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",159,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",159,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"progressabortevent"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",160,{"i":[{"n":"self"},{"n":"progressabortevent"}],"o":{"n":"bool"}}],[11,"ne","","",160,{"i":[{"n":"self"},{"n":"progressabortevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",160,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",160,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",160,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",160,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",160,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",160,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",160,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"progresserrorevent"}}],[11,"fmt","","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",161,{"i":[{"n":"self"},{"n":"progresserrorevent"}],"o":{"n":"bool"}}],[11,"ne","","",161,{"i":[{"n":"self"},{"n":"progresserrorevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",161,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",161,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",161,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",161,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",161,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",161,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",161,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"data","","The data sent by the message emitter.",48,null],[11,"origin","","A string representing the origin of the message emitter.",48,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"last_event_id","","A string representing a unique ID for the event.",48,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"source","","A MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.",48,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"option"}}],[11,"ports","","An array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",48,{"i":[{"n":"self"}],"o":{"g":["reference"],"n":"vec"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"socketcloseevent"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",162,{"i":[{"n":"self"},{"n":"socketcloseevent"}],"o":{"n":"bool"}}],[11,"ne","","",162,{"i":[{"n":"self"},{"n":"socketcloseevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",162,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",162,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",162,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",162,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",162,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",162,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",162,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"code","","Returns the close code sent by the server.",162,{"i":[{"n":"self"}],"o":{"n":"socketclosecode"}}],[11,"reason","","Returns the reason the server closed the connection. This is specific to the particular server and sub-protocol.",162,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"was_clean","","Returns whether or not the connection was cleanly closed.",162,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"socketerrorevent"}}],[11,"fmt","","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",163,{"i":[{"n":"self"},{"n":"socketerrorevent"}],"o":{"n":"bool"}}],[11,"ne","","",163,{"i":[{"n":"self"},{"n":"socketerrorevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",163,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",163,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",163,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",163,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",163,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",163,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",163,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"socketopenevent"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",164,{"i":[{"n":"self"},{"n":"socketopenevent"}],"o":{"n":"bool"}}],[11,"ne","","",164,{"i":[{"n":"self"},{"n":"socketopenevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",164,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",164,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",164,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",164,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",164,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",164,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",164,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"fmt","","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"socketmessagedata"}}],[11,"into_text","","Try to receive the message as text",40,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"into_blob","","Try to receive the message as a binary blob",40,{"i":[{"n":"self"}],"o":{"g":["blob"],"n":"option"}}],[11,"into_array_buffer","","Try to receive the message as an array buffer",40,{"i":[{"n":"self"}],"o":{"g":["arraybuffer"],"n":"option"}}],[11,"try_from","","",40,{"i":[{"n":"value"}],"o":{"g":["socketmessagedata","conversionerror"],"n":"result"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"socketmessageevent"}}],[11,"fmt","","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",165,{"i":[{"n":"self"},{"n":"socketmessageevent"}],"o":{"n":"bool"}}],[11,"ne","","",165,{"i":[{"n":"self"},{"n":"socketmessageevent"}],"o":{"n":"bool"}}],[11,"instance_of","","",165,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",165,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",165,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",165,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",165,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",165,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",165,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"query_selector","stdweb::web","Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",56,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["option","todo"],"n":"result"}}],[11,"query_selector_all","","Returns a non-live NodeList of all elements descended from the element on which it is invoked that matches the specified group of CSS selectors.",56,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["nodelist","todo"],"n":"result"}}],[11,"get_element_by_id","","Returns a reference to the element by its ID; the ID is a string which can be used to uniquely identify the element, found in the HTML `id` attribute.",57,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["element"],"n":"option"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"htmlcollection"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",166,{"i":[{"n":"self"},{"n":"htmlcollection"}],"o":{"n":"bool"}}],[11,"ne","","",166,{"i":[{"n":"self"},{"n":"htmlcollection"}],"o":{"n":"bool"}}],[11,"instance_of","","",166,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",166,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",166,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",166,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",166,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",166,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",166,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"len","","Returns the number of elements in the collection.",166,{"i":[{"n":"self"}],"o":{"n":"u32"}}],[11,"item","","Returns an element from an `HtmlCollection` by index.",166,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["element"],"n":"option"}}],[11,"iter","","Returns an iterator over the collection.",166,{"i":[{"n":"self"}],"o":{"n":"elementiter"}}],[11,"into_iter","","",166,null],[11,"remove","","The `ChildNode.remove()` method removes the object from the tree it belongs to.",60,{"i":[{"n":"self"}]}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"gamepadmappingtype"}}],[11,"fmt","","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",31,{"i":[{"n":"self"},{"n":"gamepadmappingtype"}],"o":{"n":"bool"}}],[11,"try_from","","",31,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"gamepadbutton"}}],[11,"fmt","","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",167,{"i":[{"n":"self"},{"n":"gamepadbutton"}],"o":{"n":"bool"}}],[11,"ne","","",167,{"i":[{"n":"self"},{"n":"gamepadbutton"}],"o":{"n":"bool"}}],[11,"instance_of","","",167,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",167,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",167,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",167,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",167,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",167,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",167,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"pressed","","Is the button currently pressed?",167,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"touched","","Is the button currently touched?",167,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"value","","The amount which the button has been pressed, between 0.0 (not pressed), and 1.0 (fully pressed).",167,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"gamepad"}}],[11,"fmt","","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",168,{"i":[{"n":"self"},{"n":"gamepad"}],"o":{"n":"bool"}}],[11,"ne","","",168,{"i":[{"n":"self"},{"n":"gamepad"}],"o":{"n":"bool"}}],[11,"instance_of","","",168,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"as_ref","","",168,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"from_reference_unchecked","","",168,{"i":[{"n":"reference"}],"o":{"n":"self"}}],[11,"try_from","","",168,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",168,{"i":[{"n":"reference"}],"o":{"n":"result"}}],[11,"try_from","","",168,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"try_from","","",168,{"i":[{"n":"value"}],"o":{"n":"result"}}],[11,"id","","A string containing some information about this gamepad.",168,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"index","","An auto-incrementing integer to uniquely identify a connected Gamepad.",168,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"connected","","Is this gamepad connected to the system, powered on, and usable?",168,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"timestamp","","Monotonically increasing time this gamepad was updated.",168,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"mapping","","The mapping in use for this device.",168,{"i":[{"n":"self"}],"o":{"n":"gamepadmappingtype"}}],[11,"axes","","Array of values for all axes of the gamepad.",168,{"i":[{"n":"self"}],"o":{"g":["f64"],"n":"vec"}}],[11,"buttons","","Array of button states for all buttons of the gamepad.",168,{"i":[{"n":"self"}],"o":{"g":["gamepadbutton"],"n":"vec"}}],[11,"get_all","","Retrieve all connected gamepads, in an array indexed by each gamepad's `index` member.",168,{"o":{"g":["option"],"n":"vec"}}],[11,"clone","stdweb::serde","",169,{"i":[{"n":"self"}],"o":{"n":"conversionerror"}}],[11,"eq","","",169,{"i":[{"n":"self"},{"n":"conversionerror"}],"o":{"n":"bool"}}],[11,"ne","","",169,{"i":[{"n":"self"},{"n":"conversionerror"}],"o":{"n":"bool"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",169,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"custom","","",169,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"custom","","",169,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"_into_js","","",11,{"i":[{"n":"self"},{"n":"preallocatedarena"}],"o":{"n":"serializedvalue"}}],[11,"_memory_required","","",11,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"try_from","","",11,{"i":[{"n":"value"}],"o":{"n":"result"}}]],"paths":[[3,"Once"],[4,"Value"],[3,"Undefined"],[3,"Null"],[3,"Reference"],[3,"Object"],[3,"Array"],[3,"Number"],[3,"Symbol"],[3,"UnsafeTypedArray"],[3,"DiscardOnDrop"],[3,"Serde"],[3,"SocketCloseCode"],[3,"MutationObserverInit"],[4,"CrossOriginSetting"],[4,"CloneKind"],[4,"NodeType"],[4,"FileReaderResult"],[4,"FileReaderReadyState"],[4,"SocketBinaryType"],[4,"SocketReadyState"],[4,"CanvasStyle"],[4,"CompositeOperation"],[4,"FillRule"],[4,"LineCap"],[4,"LineJoin"],[4,"Repetition"],[4,"TextAlign"],[4,"TextBaseline"],[4,"MutationRecord"],[4,"XhrReadyState"],[4,"GamepadMappingType"],[4,"AddColorStopError"],[4,"DrawImageError"],[4,"GetImageDataError"],[8,"IError"],[4,"EventPhase"],[4,"MouseButton"],[4,"KeyboardLocation"],[4,"ModifierKey"],[4,"SocketMessageData"],[8,"IEvent"],[8,"IUiEvent"],[8,"ConcreteEvent"],[8,"IMouseEvent"],[8,"IPointerEvent"],[8,"IKeyboardEvent"],[8,"IProgressEvent"],[8,"IMessageEvent"],[8,"IFocusEvent"],[8,"IGamepadEvent"],[8,"IEventTarget"],[8,"INode"],[8,"IElement"],[8,"IHtmlElement"],[8,"IWindowOrWorker"],[8,"IParentNode"],[8,"INonElementParentNode"],[8,"RenderingContext"],[8,"IBlob"],[8,"IChildNode"],[8,"TryFrom"],[8,"TryInto"],[8,"InstanceOf"],[8,"ReferenceType"],[4,"Void"],[3,"Date"],[3,"Document"],[3,"EventTarget"],[3,"Node"],[3,"RequestAnimationFrameHandle"],[3,"Window"],[3,"EventListenerHandle"],[3,"Element"],[3,"Rect"],[3,"HtmlElement"],[3,"CanvasElement"],[3,"ImageElement"],[3,"InputElement"],[3,"TextAreaElement"],[3,"UnknownValueError"],[3,"SelectElement"],[3,"OptionElement"],[3,"TokenList"],[3,"DocumentFragment"],[3,"TextNode"],[3,"NodeList"],[3,"StringMap"],[3,"Location"],[3,"Storage"],[3,"Blob"],[3,"FileList"],[3,"FileReader"],[3,"ArrayBuffer"],[3,"TypedArray"],[3,"XmlHttpRequest"],[3,"History"],[3,"WebSocket"],[3,"CanvasRenderingContext2d"],[3,"CanvasGradient"],[3,"CanvasPattern"],[3,"ImageData"],[3,"TextMetrics"],[3,"MutationObserver"],[3,"MutationObserverHandle"],[3,"Error"],[3,"DomException"],[3,"HierarchyRequestError"],[3,"InvalidAccessError"],[3,"NotFoundError"],[3,"SecurityError"],[3,"SyntaxError"],[3,"IndexSizeError"],[3,"InvalidStateError"],[3,"TypeError"],[3,"NotSupportedError"],[3,"InvalidCharacterError"],[3,"ChangeEvent"],[3,"InputEvent"],[3,"ResourceLoadEvent"],[3,"ResourceAbortEvent"],[3,"ResourceErrorEvent"],[3,"ResizeEvent"],[3,"ReadyStateChangeEvent"],[3,"SubmitEvent"],[3,"SelectionChangeEvent"],[3,"FocusEvent"],[3,"BlurEvent"],[3,"GamepadConnectedEvent"],[3,"GamepadDisconnectedEvent"],[3,"HashChangeEvent"],[3,"PopStateEvent"],[3,"KeyPressEvent"],[3,"KeyDownEvent"],[3,"KeyUpEvent"],[3,"ClickEvent"],[3,"AuxClickEvent"],[3,"ContextMenuEvent"],[3,"DoubleClickEvent"],[3,"MouseDownEvent"],[3,"MouseUpEvent"],[3,"MouseMoveEvent"],[3,"MouseOverEvent"],[3,"MouseOutEvent"],[3,"MouseEnterEvent"],[3,"MouseLeaveEvent"],[3,"PointerOverEvent"],[3,"PointerEnterEvent"],[3,"PointerDownEvent"],[3,"PointerMoveEvent"],[3,"PointerUpEvent"],[3,"PointerCancelEvent"],[3,"PointerOutEvent"],[3,"PointerLeaveEvent"],[3,"GotPointerCaptureEvent"],[3,"LostPointerCaptureEvent"],[3,"ProgressEvent"],[3,"ProgressLoadEvent"],[3,"LoadStartEvent"],[3,"LoadEndEvent"],[3,"ProgressAbortEvent"],[3,"ProgressErrorEvent"],[3,"SocketCloseEvent"],[3,"SocketErrorEvent"],[3,"SocketOpenEvent"],[3,"SocketMessageEvent"],[3,"HtmlCollection"],[3,"GamepadButton"],[3,"Gamepad"],[3,"ConversionError"]]};
searchIndex["stdweb_derive"] = {"doc":"","items":[[5,"derive_reference_type","stdweb_derive","A derive macro for defining custom reference types.",null,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenstream"}}]],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["structopt"] = {"doc":"This crate defines the `StructOpt` trait and its custom derrive.","items":[[0,"clap","structopt","Re-export of clap",null,null],[14,"crate_authors","structopt::clap","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[8,"StructOpt","structopt","A struct that is converted from command line arguments.",null,null],[10,"clap","","Returns the corresponding `clap::App`.",0,{"inputs":[],"output":{"name":"app"}}],[10,"from_clap","","Creates the struct from `clap::ArgMatches`.  It cannot fail with a parameter generated by `clap` by construction.",0,{"inputs":[{"name":"argmatches"}],"output":{"name":"self"}}],[11,"from_args","","Gets the struct from the command line arguments.  Print the error message and quit the program in case of failure.",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","Gets the struct from any iterator such as a `Vec` of your making. Print the error message and quit the program in case of failure.",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_iter_safe","","Gets the struct from any iterator such as a `Vec` of your making.",0,{"inputs":[{"name":"i"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[8,"StructOpt"]]};
searchIndex["structopt_derive"] = {"doc":"This crate is custom derive for StructOpt. It should not be used directly. See structopt documentation for the usage of `#[derive(StructOpt)]`.","items":[[5,"structopt","structopt_derive","Generates the `StructOpt` impl.",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal variable name.",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",13,null],[12,"expr","","",13,null],[12,"bracket_token","","",13,null],[12,"index","","",13,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",14,null],[12,"lit","","",14,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",15,null],[12,"paren_token","","",15,null],[12,"expr","","",15,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",16,null],[12,"qself","","",16,null],[12,"path","","",16,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",17,null],[12,"op","","",17,null],[12,"expr","","",17,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",18,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",19,null],[12,"span","","",19,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",20,null],[12,"lt_token","","",20,null],[12,"lifetimes","","",20,null],[12,"gt_token","","",20,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",21,null],[12,"const_token","","",21,null],[12,"ident","","",21,null],[12,"colon_token","","",21,null],[12,"ty","","",21,null],[12,"eq_token","","",21,null],[12,"default","","",21,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",22,null],[12,"params","","",22,null],[12,"gt_token","","",22,null],[12,"where_clause","","",22,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",23,null],[12,"lifetime","","",23,null],[12,"colon_token","","",23,null],[12,"bounds","","",23,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",24,null],[12,"eq_token","","",24,null],[12,"rhs_ty","","",24,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",25,null],[12,"colon_token","","",25,null],[12,"bounds","","",25,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",26,null],[12,"bounded_ty","","The type being bounded",26,null],[12,"colon_token","","",26,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",26,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",27,null],[12,"modifier","","",27,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",27,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",27,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",28,null],[12,"ident","","",28,null],[12,"colon_token","","",28,null],[12,"bounds","","",28,null],[12,"eq_token","","",28,null],[12,"default","","",28,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",29,null],[12,"predicates","","",29,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",30,null],[12,"ident","","",30,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",31,null],[12,"span","","",31,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",32,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",33,null],[12,"bang_token","","",33,null],[12,"delimiter","","",33,null],[12,"tts","","",33,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",34,null],[12,"brace_token","","",34,null],[12,"variants","","",34,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",35,null],[12,"fields","","",35,null],[12,"semi_token","","",35,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",36,null],[12,"fields","","",36,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",37,null],[12,"vis","","Visibility of the struct or enum.",37,null],[12,"ident","","Name of the struct or enum.",37,null],[12,"generics","","Generics required to complete the definition.",37,null],[12,"data","","Data within the struct or enum.",37,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",38,null],[12,"name","","",38,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",39,null],[12,"ty","","",39,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",40,null],[12,"elem","","",40,null],[12,"semi_token","","",40,null],[12,"len","","",40,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",41,null],[12,"abi","","",41,null],[12,"fn_token","","",41,null],[12,"lifetimes","","",41,null],[12,"paren_token","","",41,null],[12,"inputs","","",41,null],[12,"variadic","","",41,null],[12,"output","","",41,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",42,null],[12,"elem","","",42,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",43,null],[12,"bounds","","",43,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",44,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",45,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",46,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",47,null],[12,"elem","","",47,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",48,null],[12,"path","","",48,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",49,null],[12,"const_token","","",49,null],[12,"mutability","","",49,null],[12,"elem","","",49,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",50,null],[12,"lifetime","","",50,null],[12,"mutability","","",50,null],[12,"elem","","",50,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",51,null],[12,"elem","","",51,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",52,null],[12,"bounds","","",52,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",53,null],[12,"elems","","",53,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",54,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",55,null],[12,"1","","",55,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",56,null],[12,"lt_token","","",56,null],[12,"args","","",56,null],[12,"gt_token","","",56,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",57,null],[12,"eq_token","","",57,null],[12,"ty","","",57,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",58,null],[12,"inputs","","`(A, B)`",58,null],[12,"output","","`C`",58,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",59,null],[12,"segments","","",59,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",60,null],[12,"arguments","","",60,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",61,null],[12,"ty","","",61,null],[12,"position","","",61,null],[12,"as_token","","",61,null],[12,"gt_token","","",61,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",62,null],[13,"Inner","","",62,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",63,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",63,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",63,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",64,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",64,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",65,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",65,null],[13,"Unit","","Unit struct or unit variant such as `None`.",65,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",66,null],[13,"Crate","","A crate-level visibility: `crate`.",66,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(crate)` or `pub(in some::module)`.",66,null],[13,"Inherited","","An inherited visibility, which usually means private.",66,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",67,null],[13,"InPlace","","A placement expression: `place <- value`.",67,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",67,null],[13,"Call","","A function call expression: `invoke(a, b)`.",67,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",67,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",67,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",67,null],[13,"Unary","","A unary operation: `!x`, `*x`.",67,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",67,null],[13,"Cast","","A cast expression: `foo as f64`.",67,null],[13,"Type","","A type ascription expression: `foo: f64`.",67,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",67,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",67,null],[13,"While","","A while loop: `while expr { ... }`.",67,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",67,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",67,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",67,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",67,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",67,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",67,null],[13,"Block","","A blocked scope: `{ ... }`.",67,null],[13,"Assign","","An assignment expression: `a = compute()`.",67,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",67,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",67,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",67,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",67,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",67,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",67,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",67,null],[13,"Continue","","A `continue`, with an optional label.",67,null],[13,"Return","","A `return`, with an optional value to be returned.",67,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",67,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",67,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",67,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",67,null],[13,"Group","","An expression contained within invisible delimiters.",67,null],[13,"Try","","A try-expression: `expr?`.",67,null],[13,"Catch","","A catch expression: `do catch { ... }`.",67,null],[13,"Yield","","A yield expression: `yield expr`.",67,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",67,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",68,null],[13,"Unnamed","","An unnamed field like `self.0`.",68,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",69,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",69,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",69,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",70,null],[13,"Maybe","","",70,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",71,null],[13,"Lifetime","","",71,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",72,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",72,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",72,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",73,null],[13,"F64","","",73,null],[13,"None","","",73,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",74,null],[13,"I16","","",74,null],[13,"I32","","",74,null],[13,"I64","","",74,null],[13,"I128","","",74,null],[13,"Isize","","",74,null],[13,"U8","","",74,null],[13,"U16","","",74,null],[13,"U32","","",74,null],[13,"U64","","",74,null],[13,"U128","","",74,null],[13,"Usize","","",74,null],[13,"None","","",74,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",75,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",75,null],[13,"Byte","","A byte literal: `b'f'`.",75,null],[13,"Char","","A character literal: `'a'`.",75,null],[13,"Int","","An integer literal: `1` or `1u16`.",75,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",75,null],[13,"Bool","","A boolean literal: `true` or `false`.",75,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",75,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",76,null],[13,"Raw","","A raw string like `r##\"data\"##`.",76,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",77,null],[13,"Brace","","",77,null],[13,"Bracket","","",77,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",78,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",78,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",78,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",79,null],[13,"Sub","","The `-` operator (subtraction)",79,null],[13,"Mul","","The `*` operator (multiplication)",79,null],[13,"Div","","The `/` operator (division)",79,null],[13,"Rem","","The `%` operator (modulus)",79,null],[13,"And","","The `&&` operator (logical and)",79,null],[13,"Or","","The `||` operator (logical or)",79,null],[13,"BitXor","","The `^` operator (bitwise xor)",79,null],[13,"BitAnd","","The `&` operator (bitwise and)",79,null],[13,"BitOr","","The `|` operator (bitwise or)",79,null],[13,"Shl","","The `<<` operator (shift left)",79,null],[13,"Shr","","The `>>` operator (shift right)",79,null],[13,"Eq","","The `==` operator (equality)",79,null],[13,"Lt","","The `<` operator (less than)",79,null],[13,"Le","","The `<=` operator (less than or equal to)",79,null],[13,"Ne","","The `!=` operator (not equal to)",79,null],[13,"Ge","","The `>=` operator (greater than or equal to)",79,null],[13,"Gt","","The `>` operator (greater than)",79,null],[13,"AddEq","","The `+=` operator",79,null],[13,"SubEq","","The `-=` operator",79,null],[13,"MulEq","","The `*=` operator",79,null],[13,"DivEq","","The `/=` operator",79,null],[13,"RemEq","","The `%=` operator",79,null],[13,"BitXorEq","","The `^=` operator",79,null],[13,"BitAndEq","","The `&=` operator",79,null],[13,"BitOrEq","","The `|=` operator",79,null],[13,"ShlEq","","The `<<=` operator",79,null],[13,"ShrEq","","The `>>=` operator",79,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",80,null],[13,"Not","","The `!` operator for logical inversion",80,null],[13,"Neg","","The `-` operator for negation",80,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",81,null],[13,"Wild","","Argument not given a name, matched with `_`.",81,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",82,null],[13,"Type","","A particular type is returned.",82,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",83,null],[13,"Array","","A fixed size array type: `[T; n]`.",83,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",83,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",83,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",83,null],[13,"Never","","The never type: `!`.",83,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",83,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",83,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",83,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",83,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",83,null],[13,"Group","","A type contained within invisible delimiters.",83,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",83,null],[13,"Macro","","A macro in the type position.",83,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",83,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",84,null],[13,"Type","","A type argument.",84,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",84,null],[13,"Const","","A const expression. Must be inside of a block.",84,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",85,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",85,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",85,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"i":[{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"i":[{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"0","","",86,null],[3,"Apostrophe","","`'`",null,null],[12,"0","","",87,null],[3,"Add","","`+`",null,null],[12,"0","","",88,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",89,null],[3,"And","","`&`",null,null],[12,"0","","",90,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",91,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",92,null],[3,"At","","`@`",null,null],[12,"0","","",93,null],[3,"Bang","","`!`",null,null],[12,"0","","",94,null],[3,"Caret","","`^`",null,null],[12,"0","","",95,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",96,null],[3,"Colon","","`:`",null,null],[12,"0","","",97,null],[3,"Colon2","","`::`",null,null],[12,"0","","",98,null],[3,"Comma","","`,`",null,null],[12,"0","","",99,null],[3,"Div","","`/`",null,null],[12,"0","","",100,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",101,null],[3,"Dollar","","`$`",null,null],[12,"0","","",102,null],[3,"Dot","","`.`",null,null],[12,"0","","",103,null],[3,"Dot2","","`..`",null,null],[12,"0","","",104,null],[3,"Dot3","","`...`",null,null],[12,"0","","",105,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",106,null],[3,"Eq","","`=`",null,null],[12,"0","","",107,null],[3,"EqEq","","`==`",null,null],[12,"0","","",108,null],[3,"Ge","","`>=`",null,null],[12,"0","","",109,null],[3,"Gt","","`>`",null,null],[12,"0","","",110,null],[3,"Le","","`<=`",null,null],[12,"0","","",111,null],[3,"Lt","","`<`",null,null],[12,"0","","",112,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",113,null],[3,"Ne","","`!=`",null,null],[12,"0","","",114,null],[3,"Or","","`|`",null,null],[12,"0","","",115,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",116,null],[3,"OrOr","","`||`",null,null],[12,"0","","",117,null],[3,"Pound","","`#`",null,null],[12,"0","","",118,null],[3,"Question","","`?`",null,null],[12,"0","","",119,null],[3,"RArrow","","`->`",null,null],[12,"0","","",120,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",121,null],[3,"Rem","","`%`",null,null],[12,"0","","",122,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",123,null],[3,"FatArrow","","`=>`",null,null],[12,"0","","",124,null],[3,"Semi","","`;`",null,null],[12,"0","","",125,null],[3,"Shl","","`<<`",null,null],[12,"0","","",126,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",127,null],[3,"Shr","","`>>`",null,null],[12,"0","","",128,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",129,null],[3,"Star","","`*`",null,null],[12,"0","","",130,null],[3,"Sub","","`-`",null,null],[12,"0","","",131,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",132,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",133,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",134,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",135,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",136,null],[3,"As","","`as`",null,null],[12,"0","","",137,null],[3,"Auto","","`auto`",null,null],[12,"0","","",138,null],[3,"Box","","`box`",null,null],[12,"0","","",139,null],[3,"Break","","`break`",null,null],[12,"0","","",140,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",141,null],[3,"Catch","","`catch`",null,null],[12,"0","","",142,null],[3,"Const","","`const`",null,null],[12,"0","","",143,null],[3,"Continue","","`continue`",null,null],[12,"0","","",144,null],[3,"Crate","","`crate`",null,null],[12,"0","","",145,null],[3,"Default","","`default`",null,null],[12,"0","","",146,null],[3,"Do","","`do`",null,null],[12,"0","","",147,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",148,null],[3,"Else","","`else`",null,null],[12,"0","","",149,null],[3,"Enum","","`enum`",null,null],[12,"0","","",150,null],[3,"Extern","","`extern`",null,null],[12,"0","","",151,null],[3,"Fn","","`fn`",null,null],[12,"0","","",152,null],[3,"For","","`for`",null,null],[12,"0","","",153,null],[3,"If","","`if`",null,null],[12,"0","","",154,null],[3,"Impl","","`impl`",null,null],[12,"0","","",155,null],[3,"In","","`in`",null,null],[12,"0","","",156,null],[3,"Let","","`let`",null,null],[12,"0","","",157,null],[3,"Loop","","`loop`",null,null],[12,"0","","",158,null],[3,"Macro","","`macro`",null,null],[12,"0","","",159,null],[3,"Match","","`match`",null,null],[12,"0","","",160,null],[3,"Mod","","`mod`",null,null],[12,"0","","",161,null],[3,"Move","","`move`",null,null],[12,"0","","",162,null],[3,"Mut","","`mut`",null,null],[12,"0","","",163,null],[3,"Pub","","`pub`",null,null],[12,"0","","",164,null],[3,"Ref","","`ref`",null,null],[12,"0","","",165,null],[3,"Return","","`return`",null,null],[12,"0","","",166,null],[3,"Self_","","`self`",null,null],[12,"0","","",167,null],[3,"Static","","`static`",null,null],[12,"0","","",168,null],[3,"Struct","","`struct`",null,null],[12,"0","","",169,null],[3,"Super","","`super`",null,null],[12,"0","","",170,null],[3,"Trait","","`trait`",null,null],[12,"0","","",171,null],[3,"Type","","`type`",null,null],[12,"0","","",172,null],[3,"Union","","`union`",null,null],[12,"0","","",173,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",174,null],[3,"Use","","`use`",null,null],[12,"0","","",175,null],[3,"Where","","`where`",null,null],[12,"0","","",176,null],[3,"While","","`while`",null,null],[12,"0","","",177,null],[3,"Yield","","`yield`",null,null],[12,"0","","",178,null],[11,"clone","","",86,{"i":[{"n":"self"}],"o":{"n":"underscore"}}],[11,"new","","",86,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",86,{"o":{"n":"self"}}],[11,"from","","",86,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",86,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",86,{"i":[{"n":"cursor"}],"o":{"g":["underscore"],"n":"presult"}}],[11,"description","","",86,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",87,{"i":[{"n":"self"}],"o":{"n":"apostrophe"}}],[11,"new","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",87,{"o":{"n":"self"}}],[11,"from","","",87,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",87,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",87,{"i":[{"n":"cursor"}],"o":{"g":["apostrophe"],"n":"presult"}}],[11,"description","","",87,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",88,{"i":[{"n":"self"}],"o":{"n":"add"}}],[11,"new","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",88,{"o":{"n":"self"}}],[11,"from","","",88,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",89,{"i":[{"n":"self"}],"o":{"n":"addeq"}}],[11,"new","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",89,{"o":{"n":"self"}}],[11,"from","","",89,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",90,{"i":[{"n":"self"}],"o":{"n":"and"}}],[11,"new","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",90,{"o":{"n":"self"}}],[11,"from","","",90,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",91,{"i":[{"n":"self"}],"o":{"n":"andand"}}],[11,"new","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",91,{"o":{"n":"self"}}],[11,"from","","",91,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",92,{"i":[{"n":"self"}],"o":{"n":"andeq"}}],[11,"new","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",92,{"o":{"n":"self"}}],[11,"from","","",92,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",93,{"i":[{"n":"self"}],"o":{"n":"at"}}],[11,"new","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",93,{"o":{"n":"self"}}],[11,"from","","",93,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",94,{"i":[{"n":"self"}],"o":{"n":"bang"}}],[11,"new","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",94,{"o":{"n":"self"}}],[11,"from","","",94,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",95,{"i":[{"n":"self"}],"o":{"n":"caret"}}],[11,"new","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",95,{"o":{"n":"self"}}],[11,"from","","",95,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",96,{"i":[{"n":"self"}],"o":{"n":"careteq"}}],[11,"new","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",96,{"o":{"n":"self"}}],[11,"from","","",96,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",97,{"i":[{"n":"self"}],"o":{"n":"colon"}}],[11,"new","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",97,{"o":{"n":"self"}}],[11,"from","","",97,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",98,{"i":[{"n":"self"}],"o":{"n":"colon2"}}],[11,"new","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",98,{"o":{"n":"self"}}],[11,"from","","",98,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",99,{"i":[{"n":"self"}],"o":{"n":"comma"}}],[11,"new","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",99,{"o":{"n":"self"}}],[11,"from","","",99,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",100,{"i":[{"n":"self"}],"o":{"n":"div"}}],[11,"new","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",100,{"o":{"n":"self"}}],[11,"from","","",100,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",101,{"i":[{"n":"self"}],"o":{"n":"diveq"}}],[11,"new","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",101,{"o":{"n":"self"}}],[11,"from","","",101,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",102,{"i":[{"n":"self"}],"o":{"n":"dollar"}}],[11,"new","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",102,{"o":{"n":"self"}}],[11,"from","","",102,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",103,{"i":[{"n":"self"}],"o":{"n":"dot"}}],[11,"new","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",103,{"o":{"n":"self"}}],[11,"from","","",103,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",104,{"i":[{"n":"self"}],"o":{"n":"dot2"}}],[11,"new","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",104,{"o":{"n":"self"}}],[11,"from","","",104,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",105,{"i":[{"n":"self"}],"o":{"n":"dot3"}}],[11,"new","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",105,{"o":{"n":"self"}}],[11,"from","","",105,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",106,{"i":[{"n":"self"}],"o":{"n":"dotdoteq"}}],[11,"new","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",106,{"o":{"n":"self"}}],[11,"from","","",106,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",107,{"i":[{"n":"self"}],"o":{"n":"eq"}}],[11,"new","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",107,{"o":{"n":"self"}}],[11,"from","","",107,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",108,{"i":[{"n":"self"}],"o":{"n":"eqeq"}}],[11,"new","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",108,{"o":{"n":"self"}}],[11,"from","","",108,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",109,{"i":[{"n":"self"}],"o":{"n":"ge"}}],[11,"new","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",109,{"o":{"n":"self"}}],[11,"from","","",109,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",110,{"i":[{"n":"self"}],"o":{"n":"gt"}}],[11,"new","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",110,{"o":{"n":"self"}}],[11,"from","","",110,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",111,{"i":[{"n":"self"}],"o":{"n":"le"}}],[11,"new","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",111,{"o":{"n":"self"}}],[11,"from","","",111,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",112,{"i":[{"n":"self"}],"o":{"n":"lt"}}],[11,"new","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",112,{"o":{"n":"self"}}],[11,"from","","",112,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",113,{"i":[{"n":"self"}],"o":{"n":"muleq"}}],[11,"new","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",113,{"o":{"n":"self"}}],[11,"from","","",113,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",114,{"i":[{"n":"self"}],"o":{"n":"ne"}}],[11,"new","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",114,{"o":{"n":"self"}}],[11,"from","","",114,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",115,{"i":[{"n":"self"}],"o":{"n":"or"}}],[11,"new","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",115,{"o":{"n":"self"}}],[11,"from","","",115,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",116,{"i":[{"n":"self"}],"o":{"n":"oreq"}}],[11,"new","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",116,{"o":{"n":"self"}}],[11,"from","","",116,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",117,{"i":[{"n":"self"}],"o":{"n":"oror"}}],[11,"new","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",117,{"o":{"n":"self"}}],[11,"from","","",117,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",118,{"i":[{"n":"self"}],"o":{"n":"pound"}}],[11,"new","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",118,{"o":{"n":"self"}}],[11,"from","","",118,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",119,{"i":[{"n":"self"}],"o":{"n":"question"}}],[11,"new","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",119,{"o":{"n":"self"}}],[11,"from","","",119,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",120,{"i":[{"n":"self"}],"o":{"n":"rarrow"}}],[11,"new","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",120,{"o":{"n":"self"}}],[11,"from","","",120,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",121,{"i":[{"n":"self"}],"o":{"n":"larrow"}}],[11,"new","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",121,{"o":{"n":"self"}}],[11,"from","","",121,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",122,{"i":[{"n":"self"}],"o":{"n":"rem"}}],[11,"new","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",122,{"o":{"n":"self"}}],[11,"from","","",122,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",123,{"i":[{"n":"self"}],"o":{"n":"remeq"}}],[11,"new","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",123,{"o":{"n":"self"}}],[11,"from","","",123,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",124,{"i":[{"n":"self"}],"o":{"n":"fatarrow"}}],[11,"new","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",124,{"o":{"n":"self"}}],[11,"from","","",124,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"semi"}}],[11,"new","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",125,{"o":{"n":"self"}}],[11,"from","","",125,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",126,{"i":[{"n":"self"}],"o":{"n":"shl"}}],[11,"new","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",126,{"o":{"n":"self"}}],[11,"from","","",126,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",127,{"i":[{"n":"self"}],"o":{"n":"shleq"}}],[11,"new","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",127,{"o":{"n":"self"}}],[11,"from","","",127,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",128,{"i":[{"n":"self"}],"o":{"n":"shr"}}],[11,"new","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",128,{"o":{"n":"self"}}],[11,"from","","",128,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",129,{"i":[{"n":"self"}],"o":{"n":"shreq"}}],[11,"new","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",129,{"o":{"n":"self"}}],[11,"from","","",129,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",130,{"i":[{"n":"self"}],"o":{"n":"star"}}],[11,"new","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",130,{"o":{"n":"self"}}],[11,"from","","",130,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",131,{"i":[{"n":"self"}],"o":{"n":"sub"}}],[11,"new","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",131,{"o":{"n":"self"}}],[11,"from","","",131,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",132,{"i":[{"n":"self"}],"o":{"n":"subeq"}}],[11,"new","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"default","","",132,{"o":{"n":"self"}}],[11,"from","","",132,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"to_tokens","","",88,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",88,{"i":[{"n":"cursor"}],"o":{"g":["add"],"n":"presult"}}],[11,"description","","",88,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",89,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",89,{"i":[{"n":"cursor"}],"o":{"g":["addeq"],"n":"presult"}}],[11,"description","","",89,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",90,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",90,{"i":[{"n":"cursor"}],"o":{"g":["and"],"n":"presult"}}],[11,"description","","",90,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",91,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",91,{"i":[{"n":"cursor"}],"o":{"g":["andand"],"n":"presult"}}],[11,"description","","",91,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",92,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",92,{"i":[{"n":"cursor"}],"o":{"g":["andeq"],"n":"presult"}}],[11,"description","","",92,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",93,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",93,{"i":[{"n":"cursor"}],"o":{"g":["at"],"n":"presult"}}],[11,"description","","",93,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",94,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",94,{"i":[{"n":"cursor"}],"o":{"g":["bang"],"n":"presult"}}],[11,"description","","",94,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",95,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",95,{"i":[{"n":"cursor"}],"o":{"g":["caret"],"n":"presult"}}],[11,"description","","",95,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",96,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",96,{"i":[{"n":"cursor"}],"o":{"g":["careteq"],"n":"presult"}}],[11,"description","","",96,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",97,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",97,{"i":[{"n":"cursor"}],"o":{"g":["colon"],"n":"presult"}}],[11,"description","","",97,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",98,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",98,{"i":[{"n":"cursor"}],"o":{"g":["colon2"],"n":"presult"}}],[11,"description","","",98,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",99,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",99,{"i":[{"n":"cursor"}],"o":{"g":["comma"],"n":"presult"}}],[11,"description","","",99,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",100,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",100,{"i":[{"n":"cursor"}],"o":{"g":["div"],"n":"presult"}}],[11,"description","","",100,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",101,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",101,{"i":[{"n":"cursor"}],"o":{"g":["diveq"],"n":"presult"}}],[11,"description","","",101,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",102,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",102,{"i":[{"n":"cursor"}],"o":{"g":["dollar"],"n":"presult"}}],[11,"description","","",102,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",103,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",103,{"i":[{"n":"cursor"}],"o":{"g":["dot"],"n":"presult"}}],[11,"description","","",103,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",104,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",104,{"i":[{"n":"cursor"}],"o":{"g":["dot2"],"n":"presult"}}],[11,"description","","",104,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",105,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",105,{"i":[{"n":"cursor"}],"o":{"g":["dot3"],"n":"presult"}}],[11,"description","","",105,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",106,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",106,{"i":[{"n":"cursor"}],"o":{"g":["dotdoteq"],"n":"presult"}}],[11,"description","","",106,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",107,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",107,{"i":[{"n":"cursor"}],"o":{"g":["eq"],"n":"presult"}}],[11,"description","","",107,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",108,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",108,{"i":[{"n":"cursor"}],"o":{"g":["eqeq"],"n":"presult"}}],[11,"description","","",108,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",109,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",109,{"i":[{"n":"cursor"}],"o":{"g":["ge"],"n":"presult"}}],[11,"description","","",109,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",110,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",110,{"i":[{"n":"cursor"}],"o":{"g":["gt"],"n":"presult"}}],[11,"description","","",110,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",111,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",111,{"i":[{"n":"cursor"}],"o":{"g":["le"],"n":"presult"}}],[11,"description","","",111,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",112,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",112,{"i":[{"n":"cursor"}],"o":{"g":["lt"],"n":"presult"}}],[11,"description","","",112,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",113,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",113,{"i":[{"n":"cursor"}],"o":{"g":["muleq"],"n":"presult"}}],[11,"description","","",113,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",114,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",114,{"i":[{"n":"cursor"}],"o":{"g":["ne"],"n":"presult"}}],[11,"description","","",114,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",115,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",115,{"i":[{"n":"cursor"}],"o":{"g":["or"],"n":"presult"}}],[11,"description","","",115,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",116,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",116,{"i":[{"n":"cursor"}],"o":{"g":["oreq"],"n":"presult"}}],[11,"description","","",116,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",117,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",117,{"i":[{"n":"cursor"}],"o":{"g":["oror"],"n":"presult"}}],[11,"description","","",117,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",118,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",118,{"i":[{"n":"cursor"}],"o":{"g":["pound"],"n":"presult"}}],[11,"description","","",118,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",119,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",119,{"i":[{"n":"cursor"}],"o":{"g":["question"],"n":"presult"}}],[11,"description","","",119,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",120,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",120,{"i":[{"n":"cursor"}],"o":{"g":["rarrow"],"n":"presult"}}],[11,"description","","",120,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",121,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",121,{"i":[{"n":"cursor"}],"o":{"g":["larrow"],"n":"presult"}}],[11,"description","","",121,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",122,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",122,{"i":[{"n":"cursor"}],"o":{"g":["rem"],"n":"presult"}}],[11,"description","","",122,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",123,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",123,{"i":[{"n":"cursor"}],"o":{"g":["remeq"],"n":"presult"}}],[11,"description","","",123,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",124,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",124,{"i":[{"n":"cursor"}],"o":{"g":["fatarrow"],"n":"presult"}}],[11,"description","","",124,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",125,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",125,{"i":[{"n":"cursor"}],"o":{"g":["semi"],"n":"presult"}}],[11,"description","","",125,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",126,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",126,{"i":[{"n":"cursor"}],"o":{"g":["shl"],"n":"presult"}}],[11,"description","","",126,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",127,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",127,{"i":[{"n":"cursor"}],"o":{"g":["shleq"],"n":"presult"}}],[11,"description","","",127,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",128,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",128,{"i":[{"n":"cursor"}],"o":{"g":["shr"],"n":"presult"}}],[11,"description","","",128,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",129,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",129,{"i":[{"n":"cursor"}],"o":{"g":["shreq"],"n":"presult"}}],[11,"description","","",129,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",130,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",130,{"i":[{"n":"cursor"}],"o":{"g":["star"],"n":"presult"}}],[11,"description","","",130,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",131,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",131,{"i":[{"n":"cursor"}],"o":{"g":["sub"],"n":"presult"}}],[11,"description","","",131,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",132,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",132,{"i":[{"n":"cursor"}],"o":{"g":["subeq"],"n":"presult"}}],[11,"description","","",132,{"o":{"g":["str"],"n":"option"}}],[11,"clone","","",133,{"i":[{"n":"self"}],"o":{"n":"brace"}}],[11,"default","","",133,{"o":{"n":"self"}}],[11,"surround","","",133,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",133,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",133,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",134,{"i":[{"n":"self"}],"o":{"n":"bracket"}}],[11,"default","","",134,{"o":{"n":"self"}}],[11,"surround","","",134,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",134,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",134,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",135,{"i":[{"n":"self"}],"o":{"n":"paren"}}],[11,"default","","",135,{"o":{"n":"self"}}],[11,"surround","","",135,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",135,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",135,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",136,{"i":[{"n":"self"}],"o":{"n":"group"}}],[11,"default","","",136,{"o":{"n":"self"}}],[11,"surround","","",136,{"i":[{"n":"self"},{"n":"tokenstream"},{"n":"f"}]}],[11,"parse","","",136,{"i":[{"n":"cursor"},{"n":"f"}],"o":{"n":"presult"}}],[11,"from","","",136,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",137,{"i":[{"n":"self"}],"o":{"n":"as"}}],[11,"default","","",137,{"o":{"n":"self"}}],[11,"to_tokens","","",137,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",137,{"i":[{"n":"cursor"}],"o":{"g":["as"],"n":"presult"}}],[11,"description","","",137,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",137,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",138,{"i":[{"n":"self"}],"o":{"n":"auto"}}],[11,"default","","",138,{"o":{"n":"self"}}],[11,"to_tokens","","",138,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",138,{"i":[{"n":"cursor"}],"o":{"g":["auto"],"n":"presult"}}],[11,"description","","",138,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",138,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"box"}}],[11,"default","","",139,{"o":{"n":"self"}}],[11,"to_tokens","","",139,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",139,{"i":[{"n":"cursor"}],"o":{"g":["box"],"n":"presult"}}],[11,"description","","",139,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",139,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"break"}}],[11,"default","","",140,{"o":{"n":"self"}}],[11,"to_tokens","","",140,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",140,{"i":[{"n":"cursor"}],"o":{"g":["break"],"n":"presult"}}],[11,"description","","",140,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",140,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",141,{"i":[{"n":"self"}],"o":{"n":"capself"}}],[11,"default","","",141,{"o":{"n":"self"}}],[11,"to_tokens","","",141,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",141,{"i":[{"n":"cursor"}],"o":{"g":["capself"],"n":"presult"}}],[11,"description","","",141,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",141,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",142,{"i":[{"n":"self"}],"o":{"n":"catch"}}],[11,"default","","",142,{"o":{"n":"self"}}],[11,"to_tokens","","",142,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",142,{"i":[{"n":"cursor"}],"o":{"g":["catch"],"n":"presult"}}],[11,"description","","",142,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",142,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",143,{"i":[{"n":"self"}],"o":{"n":"const"}}],[11,"default","","",143,{"o":{"n":"self"}}],[11,"to_tokens","","",143,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",143,{"i":[{"n":"cursor"}],"o":{"g":["const"],"n":"presult"}}],[11,"description","","",143,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",143,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",144,{"i":[{"n":"self"}],"o":{"n":"continue"}}],[11,"default","","",144,{"o":{"n":"self"}}],[11,"to_tokens","","",144,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",144,{"i":[{"n":"cursor"}],"o":{"g":["continue"],"n":"presult"}}],[11,"description","","",144,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",144,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",145,{"i":[{"n":"self"}],"o":{"n":"crate"}}],[11,"default","","",145,{"o":{"n":"self"}}],[11,"to_tokens","","",145,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",145,{"i":[{"n":"cursor"}],"o":{"g":["crate"],"n":"presult"}}],[11,"description","","",145,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",145,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",146,{"i":[{"n":"self"}],"o":{"n":"default"}}],[11,"default","","",146,{"o":{"n":"self"}}],[11,"to_tokens","","",146,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",146,{"i":[{"n":"cursor"}],"o":{"g":["default"],"n":"presult"}}],[11,"description","","",146,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",146,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",147,{"i":[{"n":"self"}],"o":{"n":"do"}}],[11,"default","","",147,{"o":{"n":"self"}}],[11,"to_tokens","","",147,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",147,{"i":[{"n":"cursor"}],"o":{"g":["do"],"n":"presult"}}],[11,"description","","",147,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",147,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",148,{"i":[{"n":"self"}],"o":{"n":"dyn"}}],[11,"default","","",148,{"o":{"n":"self"}}],[11,"to_tokens","","",148,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",148,{"i":[{"n":"cursor"}],"o":{"g":["dyn"],"n":"presult"}}],[11,"description","","",148,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",148,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",149,{"i":[{"n":"self"}],"o":{"n":"else"}}],[11,"default","","",149,{"o":{"n":"self"}}],[11,"to_tokens","","",149,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",149,{"i":[{"n":"cursor"}],"o":{"g":["else"],"n":"presult"}}],[11,"description","","",149,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",149,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",150,{"i":[{"n":"self"}],"o":{"n":"enum"}}],[11,"default","","",150,{"o":{"n":"self"}}],[11,"to_tokens","","",150,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",150,{"i":[{"n":"cursor"}],"o":{"g":["enum"],"n":"presult"}}],[11,"description","","",150,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",150,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",151,{"i":[{"n":"self"}],"o":{"n":"extern"}}],[11,"default","","",151,{"o":{"n":"self"}}],[11,"to_tokens","","",151,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",151,{"i":[{"n":"cursor"}],"o":{"g":["extern"],"n":"presult"}}],[11,"description","","",151,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",151,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"fn"}}],[11,"default","","",152,{"o":{"n":"self"}}],[11,"to_tokens","","",152,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",152,{"i":[{"n":"cursor"}],"o":{"g":["fn"],"n":"presult"}}],[11,"description","","",152,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",152,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",153,{"i":[{"n":"self"}],"o":{"n":"for"}}],[11,"default","","",153,{"o":{"n":"self"}}],[11,"to_tokens","","",153,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",153,{"i":[{"n":"cursor"}],"o":{"g":["for"],"n":"presult"}}],[11,"description","","",153,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",153,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",154,{"i":[{"n":"self"}],"o":{"n":"if"}}],[11,"default","","",154,{"o":{"n":"self"}}],[11,"to_tokens","","",154,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",154,{"i":[{"n":"cursor"}],"o":{"g":["if"],"n":"presult"}}],[11,"description","","",154,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",154,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",155,{"i":[{"n":"self"}],"o":{"n":"impl"}}],[11,"default","","",155,{"o":{"n":"self"}}],[11,"to_tokens","","",155,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",155,{"i":[{"n":"cursor"}],"o":{"g":["impl"],"n":"presult"}}],[11,"description","","",155,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",155,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",156,{"i":[{"n":"self"}],"o":{"n":"in"}}],[11,"default","","",156,{"o":{"n":"self"}}],[11,"to_tokens","","",156,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",156,{"i":[{"n":"cursor"}],"o":{"g":["in"],"n":"presult"}}],[11,"description","","",156,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",156,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",157,{"i":[{"n":"self"}],"o":{"n":"let"}}],[11,"default","","",157,{"o":{"n":"self"}}],[11,"to_tokens","","",157,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",157,{"i":[{"n":"cursor"}],"o":{"g":["let"],"n":"presult"}}],[11,"description","","",157,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",157,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",158,{"i":[{"n":"self"}],"o":{"n":"loop"}}],[11,"default","","",158,{"o":{"n":"self"}}],[11,"to_tokens","","",158,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",158,{"i":[{"n":"cursor"}],"o":{"g":["loop"],"n":"presult"}}],[11,"description","","",158,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",158,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"default","","",159,{"o":{"n":"self"}}],[11,"to_tokens","","",159,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",159,{"i":[{"n":"cursor"}],"o":{"g":["macro"],"n":"presult"}}],[11,"description","","",159,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",159,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",160,{"i":[{"n":"self"}],"o":{"n":"match"}}],[11,"default","","",160,{"o":{"n":"self"}}],[11,"to_tokens","","",160,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",160,{"i":[{"n":"cursor"}],"o":{"g":["match"],"n":"presult"}}],[11,"description","","",160,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",160,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",161,{"i":[{"n":"self"}],"o":{"n":"mod"}}],[11,"default","","",161,{"o":{"n":"self"}}],[11,"to_tokens","","",161,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",161,{"i":[{"n":"cursor"}],"o":{"g":["mod"],"n":"presult"}}],[11,"description","","",161,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",161,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",162,{"i":[{"n":"self"}],"o":{"n":"move"}}],[11,"default","","",162,{"o":{"n":"self"}}],[11,"to_tokens","","",162,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",162,{"i":[{"n":"cursor"}],"o":{"g":["move"],"n":"presult"}}],[11,"description","","",162,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",162,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",163,{"i":[{"n":"self"}],"o":{"n":"mut"}}],[11,"default","","",163,{"o":{"n":"self"}}],[11,"to_tokens","","",163,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",163,{"i":[{"n":"cursor"}],"o":{"g":["mut"],"n":"presult"}}],[11,"description","","",163,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",163,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",164,{"i":[{"n":"self"}],"o":{"n":"pub"}}],[11,"default","","",164,{"o":{"n":"self"}}],[11,"to_tokens","","",164,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",164,{"i":[{"n":"cursor"}],"o":{"g":["pub"],"n":"presult"}}],[11,"description","","",164,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",164,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",165,{"i":[{"n":"self"}],"o":{"n":"ref"}}],[11,"default","","",165,{"o":{"n":"self"}}],[11,"to_tokens","","",165,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",165,{"i":[{"n":"cursor"}],"o":{"g":["ref"],"n":"presult"}}],[11,"description","","",165,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",165,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",166,{"i":[{"n":"self"}],"o":{"n":"return"}}],[11,"default","","",166,{"o":{"n":"self"}}],[11,"to_tokens","","",166,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",166,{"i":[{"n":"cursor"}],"o":{"g":["return"],"n":"presult"}}],[11,"description","","",166,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",166,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",167,{"i":[{"n":"self"}],"o":{"n":"self_"}}],[11,"default","","",167,{"o":{"n":"self"}}],[11,"to_tokens","","",167,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",167,{"i":[{"n":"cursor"}],"o":{"g":["self_"],"n":"presult"}}],[11,"description","","",167,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",167,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",168,{"i":[{"n":"self"}],"o":{"n":"static"}}],[11,"default","","",168,{"o":{"n":"self"}}],[11,"to_tokens","","",168,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",168,{"i":[{"n":"cursor"}],"o":{"g":["static"],"n":"presult"}}],[11,"description","","",168,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",168,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",169,{"i":[{"n":"self"}],"o":{"n":"struct"}}],[11,"default","","",169,{"o":{"n":"self"}}],[11,"to_tokens","","",169,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",169,{"i":[{"n":"cursor"}],"o":{"g":["struct"],"n":"presult"}}],[11,"description","","",169,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",169,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",170,{"i":[{"n":"self"}],"o":{"n":"super"}}],[11,"default","","",170,{"o":{"n":"self"}}],[11,"to_tokens","","",170,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",170,{"i":[{"n":"cursor"}],"o":{"g":["super"],"n":"presult"}}],[11,"description","","",170,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",170,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",171,{"i":[{"n":"self"}],"o":{"n":"trait"}}],[11,"default","","",171,{"o":{"n":"self"}}],[11,"to_tokens","","",171,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",171,{"i":[{"n":"cursor"}],"o":{"g":["trait"],"n":"presult"}}],[11,"description","","",171,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",171,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",172,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"default","","",172,{"o":{"n":"self"}}],[11,"to_tokens","","",172,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",172,{"i":[{"n":"cursor"}],"o":{"g":["type"],"n":"presult"}}],[11,"description","","",172,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",172,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",173,{"i":[{"n":"self"}],"o":{"n":"union"}}],[11,"default","","",173,{"o":{"n":"self"}}],[11,"to_tokens","","",173,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",173,{"i":[{"n":"cursor"}],"o":{"g":["union"],"n":"presult"}}],[11,"description","","",173,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",173,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",174,{"i":[{"n":"self"}],"o":{"n":"unsafe"}}],[11,"default","","",174,{"o":{"n":"self"}}],[11,"to_tokens","","",174,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",174,{"i":[{"n":"cursor"}],"o":{"g":["unsafe"],"n":"presult"}}],[11,"description","","",174,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",174,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",175,{"i":[{"n":"self"}],"o":{"n":"use"}}],[11,"default","","",175,{"o":{"n":"self"}}],[11,"to_tokens","","",175,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",175,{"i":[{"n":"cursor"}],"o":{"g":["use"],"n":"presult"}}],[11,"description","","",175,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",175,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",176,{"i":[{"n":"self"}],"o":{"n":"where"}}],[11,"default","","",176,{"o":{"n":"self"}}],[11,"to_tokens","","",176,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",176,{"i":[{"n":"cursor"}],"o":{"g":["where"],"n":"presult"}}],[11,"description","","",176,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",176,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",177,{"i":[{"n":"self"}],"o":{"n":"while"}}],[11,"default","","",177,{"o":{"n":"self"}}],[11,"to_tokens","","",177,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",177,{"i":[{"n":"cursor"}],"o":{"g":["while"],"n":"presult"}}],[11,"description","","",177,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",177,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"clone","","",178,{"i":[{"n":"self"}],"o":{"n":"yield"}}],[11,"default","","",178,{"o":{"n":"self"}}],[11,"to_tokens","","",178,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",178,{"i":[{"n":"cursor"}],"o":{"g":["yield"],"n":"presult"}}],[11,"description","","",178,{"o":{"g":["str"],"n":"option"}}],[11,"from","","",178,{"i":[{"n":"span"}],"o":{"n":"self"}}],[11,"from","syn","",179,{"i":[{"n":"self_"}],"o":{"n":"ident"}}],[11,"from","","",179,{"i":[{"n":"capself"}],"o":{"n":"ident"}}],[11,"from","","",179,{"i":[{"n":"super"}],"o":{"n":"ident"}}],[11,"from","","",179,{"i":[{"n":"crate"}],"o":{"n":"ident"}}],[11,"parse_inner","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_outer","","",0,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",1,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",2,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"i":[{"n":"self"}],"o":{"g":["meta"],"n":"option"}}],[11,"clone","","",62,{"i":[{"n":"self"}],"o":{"n":"attrstyle"}}],[11,"clone","","",63,{"i":[{"n":"self"}],"o":{"n":"meta"}}],[11,"from","","",63,{"i":[{"n":"ident"}],"o":{"n":"meta"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"metalist"}}],[11,"from","","",63,{"i":[{"n":"metalist"}],"o":{"n":"meta"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"metanamevalue"}}],[11,"from","","",63,{"i":[{"n":"metanamevalue"}],"o":{"n":"meta"}}],[11,"to_tokens","","",63,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"name","","Returns the identifier that begins this structured meta item.",63,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"nestedmeta"}}],[11,"from","","",64,{"i":[{"n":"meta"}],"o":{"n":"nestedmeta"}}],[11,"from","","",64,{"i":[{"n":"lit"}],"o":{"n":"nestedmeta"}}],[11,"to_tokens","","",64,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",6,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",6,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",4,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",4,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",5,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",5,{"o":{"g":["str"],"n":"option"}}],[11,"parse_named","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_unnamed","","",3,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",66,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",66,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",6,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",4,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",5,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",8,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",7,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",9,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"variant"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"fields"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"fieldsnamed"}}],[11,"from","","",65,{"i":[{"n":"fieldsnamed"}],"o":{"n":"fields"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"fieldsunnamed"}}],[11,"from","","",65,{"i":[{"n":"fieldsunnamed"}],"o":{"n":"fields"}}],[11,"to_tokens","","",65,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",65,{"i":[{"n":"self"}],"o":{"g":["field"],"n":"iter"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"visibility"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"vispublic"}}],[11,"from","","",66,{"i":[{"n":"vispublic"}],"o":{"n":"visibility"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"viscrate"}}],[11,"from","","",66,{"i":[{"n":"viscrate"}],"o":{"n":"visibility"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"visrestricted"}}],[11,"from","","",66,{"i":[{"n":"visrestricted"}],"o":{"n":"visibility"}}],[11,"to_tokens","","",66,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",67,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",67,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",14,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",14,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",15,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",15,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",16,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",16,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",11,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",10,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",17,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",14,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",12,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",68,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",19,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",13,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",16,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",15,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",18,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"expr"}}],[11,"clone","","",180,{"i":[{"n":"self"}],"o":{"n":"exprbox"}}],[11,"from","","",67,{"i":[{"n":"exprbox"}],"o":{"n":"expr"}}],[11,"clone","","",181,{"i":[{"n":"self"}],"o":{"n":"exprinplace"}}],[11,"from","","",67,{"i":[{"n":"exprinplace"}],"o":{"n":"expr"}}],[11,"clone","","",182,{"i":[{"n":"self"}],"o":{"n":"exprarray"}}],[11,"from","","",67,{"i":[{"n":"exprarray"}],"o":{"n":"expr"}}],[11,"clone","","",11,{"i":[{"n":"self"}],"o":{"n":"exprcall"}}],[11,"from","","",67,{"i":[{"n":"exprcall"}],"o":{"n":"expr"}}],[11,"clone","","",183,{"i":[{"n":"self"}],"o":{"n":"exprmethodcall"}}],[11,"from","","",67,{"i":[{"n":"exprmethodcall"}],"o":{"n":"expr"}}],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"exprtuple"}}],[11,"from","","",67,{"i":[{"n":"exprtuple"}],"o":{"n":"expr"}}],[11,"clone","","",10,{"i":[{"n":"self"}],"o":{"n":"exprbinary"}}],[11,"from","","",67,{"i":[{"n":"exprbinary"}],"o":{"n":"expr"}}],[11,"clone","","",17,{"i":[{"n":"self"}],"o":{"n":"exprunary"}}],[11,"from","","",67,{"i":[{"n":"exprunary"}],"o":{"n":"expr"}}],[11,"clone","","",14,{"i":[{"n":"self"}],"o":{"n":"exprlit"}}],[11,"from","","",67,{"i":[{"n":"exprlit"}],"o":{"n":"expr"}}],[11,"clone","","",12,{"i":[{"n":"self"}],"o":{"n":"exprcast"}}],[11,"from","","",67,{"i":[{"n":"exprcast"}],"o":{"n":"expr"}}],[11,"clone","","",185,{"i":[{"n":"self"}],"o":{"n":"exprtype"}}],[11,"from","","",67,{"i":[{"n":"exprtype"}],"o":{"n":"expr"}}],[11,"clone","","",186,{"i":[{"n":"self"}],"o":{"n":"exprif"}}],[11,"from","","",67,{"i":[{"n":"exprif"}],"o":{"n":"expr"}}],[11,"clone","","",187,{"i":[{"n":"self"}],"o":{"n":"expriflet"}}],[11,"from","","",67,{"i":[{"n":"expriflet"}],"o":{"n":"expr"}}],[11,"clone","","",188,{"i":[{"n":"self"}],"o":{"n":"exprwhile"}}],[11,"from","","",67,{"i":[{"n":"exprwhile"}],"o":{"n":"expr"}}],[11,"clone","","",189,{"i":[{"n":"self"}],"o":{"n":"exprwhilelet"}}],[11,"from","","",67,{"i":[{"n":"exprwhilelet"}],"o":{"n":"expr"}}],[11,"clone","","",190,{"i":[{"n":"self"}],"o":{"n":"exprforloop"}}],[11,"from","","",67,{"i":[{"n":"exprforloop"}],"o":{"n":"expr"}}],[11,"clone","","",191,{"i":[{"n":"self"}],"o":{"n":"exprloop"}}],[11,"from","","",67,{"i":[{"n":"exprloop"}],"o":{"n":"expr"}}],[11,"clone","","",192,{"i":[{"n":"self"}],"o":{"n":"exprmatch"}}],[11,"from","","",67,{"i":[{"n":"exprmatch"}],"o":{"n":"expr"}}],[11,"clone","","",193,{"i":[{"n":"self"}],"o":{"n":"exprclosure"}}],[11,"from","","",67,{"i":[{"n":"exprclosure"}],"o":{"n":"expr"}}],[11,"clone","","",194,{"i":[{"n":"self"}],"o":{"n":"exprunsafe"}}],[11,"from","","",67,{"i":[{"n":"exprunsafe"}],"o":{"n":"expr"}}],[11,"clone","","",195,{"i":[{"n":"self"}],"o":{"n":"exprblock"}}],[11,"from","","",67,{"i":[{"n":"exprblock"}],"o":{"n":"expr"}}],[11,"clone","","",196,{"i":[{"n":"self"}],"o":{"n":"exprassign"}}],[11,"from","","",67,{"i":[{"n":"exprassign"}],"o":{"n":"expr"}}],[11,"clone","","",197,{"i":[{"n":"self"}],"o":{"n":"exprassignop"}}],[11,"from","","",67,{"i":[{"n":"exprassignop"}],"o":{"n":"expr"}}],[11,"clone","","",198,{"i":[{"n":"self"}],"o":{"n":"exprfield"}}],[11,"from","","",67,{"i":[{"n":"exprfield"}],"o":{"n":"expr"}}],[11,"clone","","",13,{"i":[{"n":"self"}],"o":{"n":"exprindex"}}],[11,"from","","",67,{"i":[{"n":"exprindex"}],"o":{"n":"expr"}}],[11,"clone","","",199,{"i":[{"n":"self"}],"o":{"n":"exprrange"}}],[11,"from","","",67,{"i":[{"n":"exprrange"}],"o":{"n":"expr"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"exprpath"}}],[11,"from","","",67,{"i":[{"n":"exprpath"}],"o":{"n":"expr"}}],[11,"clone","","",200,{"i":[{"n":"self"}],"o":{"n":"exprreference"}}],[11,"from","","",67,{"i":[{"n":"exprreference"}],"o":{"n":"expr"}}],[11,"clone","","",201,{"i":[{"n":"self"}],"o":{"n":"exprbreak"}}],[11,"from","","",67,{"i":[{"n":"exprbreak"}],"o":{"n":"expr"}}],[11,"clone","","",202,{"i":[{"n":"self"}],"o":{"n":"exprcontinue"}}],[11,"from","","",67,{"i":[{"n":"exprcontinue"}],"o":{"n":"expr"}}],[11,"clone","","",203,{"i":[{"n":"self"}],"o":{"n":"exprreturn"}}],[11,"from","","",67,{"i":[{"n":"exprreturn"}],"o":{"n":"expr"}}],[11,"clone","","",204,{"i":[{"n":"self"}],"o":{"n":"exprmacro"}}],[11,"from","","",67,{"i":[{"n":"exprmacro"}],"o":{"n":"expr"}}],[11,"clone","","",205,{"i":[{"n":"self"}],"o":{"n":"exprstruct"}}],[11,"from","","",67,{"i":[{"n":"exprstruct"}],"o":{"n":"expr"}}],[11,"clone","","",206,{"i":[{"n":"self"}],"o":{"n":"exprrepeat"}}],[11,"from","","",67,{"i":[{"n":"exprrepeat"}],"o":{"n":"expr"}}],[11,"clone","","",15,{"i":[{"n":"self"}],"o":{"n":"exprparen"}}],[11,"from","","",67,{"i":[{"n":"exprparen"}],"o":{"n":"expr"}}],[11,"clone","","",207,{"i":[{"n":"self"}],"o":{"n":"exprgroup"}}],[11,"from","","",67,{"i":[{"n":"exprgroup"}],"o":{"n":"expr"}}],[11,"clone","","",208,{"i":[{"n":"self"}],"o":{"n":"exprtry"}}],[11,"from","","",67,{"i":[{"n":"exprtry"}],"o":{"n":"expr"}}],[11,"clone","","",209,{"i":[{"n":"self"}],"o":{"n":"exprcatch"}}],[11,"from","","",67,{"i":[{"n":"exprcatch"}],"o":{"n":"expr"}}],[11,"clone","","",210,{"i":[{"n":"self"}],"o":{"n":"expryield"}}],[11,"from","","",67,{"i":[{"n":"expryield"}],"o":{"n":"expr"}}],[11,"clone","","",18,{"i":[{"n":"self"}],"o":{"n":"exprverbatim"}}],[11,"from","","",67,{"i":[{"n":"exprverbatim"}],"o":{"n":"expr"}}],[11,"to_tokens","","",67,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"member"}}],[11,"clone","","",19,{"i":[{"n":"self"}],"o":{"n":"index"}}],[11,"from","","",19,{"i":[{"n":"usize"}],"o":{"n":"index"}}],[11,"parse","","",22,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",22,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",69,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",69,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",23,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",23,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",20,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",20,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",28,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",28,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",71,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",71,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",27,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",27,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",70,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",70,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",21,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",21,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",29,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",29,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",72,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",72,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",22,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",211,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",212,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",213,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",20,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",23,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",28,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",27,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",70,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",21,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",29,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",26,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",25,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",24,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"default","","",22,{"o":{"n":"generics"}}],[11,"clone","","",22,{"i":[{"n":"self"}],"o":{"n":"generics"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"genericparam"}}],[11,"clone","","",28,{"i":[{"n":"self"}],"o":{"n":"typeparam"}}],[11,"from","","",69,{"i":[{"n":"typeparam"}],"o":{"n":"genericparam"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"lifetimedef"}}],[11,"from","","",69,{"i":[{"n":"lifetimedef"}],"o":{"n":"genericparam"}}],[11,"clone","","",21,{"i":[{"n":"self"}],"o":{"n":"constparam"}}],[11,"from","","",69,{"i":[{"n":"constparam"}],"o":{"n":"genericparam"}}],[11,"to_tokens","","",69,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",22,{"i":[{"n":"self"}],"o":{"n":"constparamsmut"}}],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one present already.",22,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"clone","","",211,{"i":[{"n":"self"}],"o":{"n":"implgenerics"}}],[11,"clone","","",212,{"i":[{"n":"self"}],"o":{"n":"typegenerics"}}],[11,"clone","","",213,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",22,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",212,{"i":[{"n":"self"}],"o":{"n":"turbofish"}}],[11,"default","","",20,{"o":{"n":"boundlifetimes"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"boundlifetimes"}}],[11,"new","","",23,{"i":[{"n":"lifetime"}],"o":{"n":"self"}}],[11,"from","","",28,{"i":[{"n":"ident"}],"o":{"n":"self"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"typeparambound"}}],[11,"from","","",71,{"i":[{"n":"traitbound"}],"o":{"n":"typeparambound"}}],[11,"from","","",71,{"i":[{"n":"lifetime"}],"o":{"n":"typeparambound"}}],[11,"to_tokens","","",71,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",27,{"i":[{"n":"self"}],"o":{"n":"traitbound"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"traitboundmodifier"}}],[11,"clone","","",29,{"i":[{"n":"self"}],"o":{"n":"whereclause"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",26,{"i":[{"n":"self"}],"o":{"n":"predicatetype"}}],[11,"from","","",72,{"i":[{"n":"predicatetype"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",25,{"i":[{"n":"self"}],"o":{"n":"predicatelifetime"}}],[11,"from","","",72,{"i":[{"n":"predicatelifetime"}],"o":{"n":"wherepredicate"}}],[11,"clone","","",24,{"i":[{"n":"self"}],"o":{"n":"predicateeq"}}],[11,"from","","",72,{"i":[{"n":"predicateeq"}],"o":{"n":"wherepredicate"}}],[11,"to_tokens","","",72,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"parse","","",30,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",30,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",30,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",30,{"i":[{"n":"self"}],"o":{"n":"lifetime"}}],[11,"new","","",30,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"fmt","","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",30,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",30,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"g":["ordering"],"n":"option"}}],[11,"cmp","","",30,{"i":[{"n":"self"},{"n":"lifetime"}],"o":{"n":"ordering"}}],[11,"hash","","",30,{"i":[{"n":"self"},{"n":"h"}]}],[11,"parse","","",75,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",75,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",214,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",214,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",215,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",215,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",216,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",216,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",217,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",217,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",218,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",218,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",219,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",219,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",31,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",31,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",214,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",215,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",216,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",217,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",218,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",219,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",31,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",32,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",75,{"i":[{"n":"literal"}],"o":{"n":"self"}}],[11,"clone","","",75,{"i":[{"n":"self"}],"o":{"n":"lit"}}],[11,"clone","","",214,{"i":[{"n":"self"}],"o":{"n":"litstr"}}],[11,"from","","",75,{"i":[{"n":"litstr"}],"o":{"n":"lit"}}],[11,"clone","","",215,{"i":[{"n":"self"}],"o":{"n":"litbytestr"}}],[11,"from","","",75,{"i":[{"n":"litbytestr"}],"o":{"n":"lit"}}],[11,"clone","","",216,{"i":[{"n":"self"}],"o":{"n":"litbyte"}}],[11,"from","","",75,{"i":[{"n":"litbyte"}],"o":{"n":"lit"}}],[11,"clone","","",217,{"i":[{"n":"self"}],"o":{"n":"litchar"}}],[11,"from","","",75,{"i":[{"n":"litchar"}],"o":{"n":"lit"}}],[11,"clone","","",218,{"i":[{"n":"self"}],"o":{"n":"litint"}}],[11,"from","","",75,{"i":[{"n":"litint"}],"o":{"n":"lit"}}],[11,"clone","","",219,{"i":[{"n":"self"}],"o":{"n":"litfloat"}}],[11,"from","","",75,{"i":[{"n":"litfloat"}],"o":{"n":"lit"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"litbool"}}],[11,"from","","",75,{"i":[{"n":"litbool"}],"o":{"n":"lit"}}],[11,"clone","","",32,{"i":[{"n":"self"}],"o":{"n":"litverbatim"}}],[11,"from","","",75,{"i":[{"n":"litverbatim"}],"o":{"n":"lit"}}],[11,"to_tokens","","",75,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"new","","",214,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",214,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",214,{"i":[{"n":"self"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"span","","",214,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",214,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",215,null],[11,"value","","",215,{"i":[{"n":"self"}],"o":{"g":["u8"],"n":"vec"}}],[11,"span","","",215,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",215,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",216,{"i":[{"n":"u8"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",216,{"i":[{"n":"self"}],"o":{"n":"u8"}}],[11,"span","","",216,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",216,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",217,{"i":[{"n":"char"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",217,{"i":[{"n":"self"}],"o":{"n":"char"}}],[11,"span","","",217,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",217,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",218,{"i":[{"n":"u64"},{"n":"intsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",218,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"suffix","","",218,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"span","","",218,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",218,{"i":[{"n":"self"},{"n":"span"}]}],[11,"new","","",219,{"i":[{"n":"f64"},{"n":"floatsuffix"},{"n":"span"}],"o":{"n":"self"}}],[11,"value","","",219,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"suffix","","",219,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"span","","",219,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",219,{"i":[{"n":"self"},{"n":"span"}]}],[11,"span","","",32,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","",32,{"i":[{"n":"self"},{"n":"span"}]}],[11,"clone","","",76,{"i":[{"n":"self"}],"o":{"n":"strstyle"}}],[11,"clone","","",74,{"i":[{"n":"self"}],"o":{"n":"intsuffix"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"floatsuffix"}}],[11,"parse","","",33,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",33,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",33,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",33,{"i":[{"n":"self"}],"o":{"n":"macro"}}],[11,"clone","","",77,{"i":[{"n":"self"}],"o":{"n":"macrodelimiter"}}],[11,"parse","","",37,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",37,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",37,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",37,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"clone","","",78,{"i":[{"n":"self"}],"o":{"n":"data"}}],[11,"clone","","",35,{"i":[{"n":"self"}],"o":{"n":"datastruct"}}],[11,"from","","",78,{"i":[{"n":"datastruct"}],"o":{"n":"data"}}],[11,"clone","","",34,{"i":[{"n":"self"}],"o":{"n":"dataenum"}}],[11,"from","","",78,{"i":[{"n":"dataenum"}],"o":{"n":"data"}}],[11,"clone","","",36,{"i":[{"n":"self"}],"o":{"n":"dataunion"}}],[11,"from","","",78,{"i":[{"n":"dataunion"}],"o":{"n":"data"}}],[11,"parse_binop","","",79,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",80,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",80,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",79,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",80,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",79,{"i":[{"n":"self"}],"o":{"n":"binop"}}],[11,"clone","","",80,{"i":[{"n":"self"}],"o":{"n":"unop"}}],[11,"parse","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",83,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",83,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",51,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",51,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",40,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",40,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",49,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",49,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",50,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",50,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",41,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",41,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",46,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",46,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",44,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",44,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",53,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",53,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",45,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",45,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",48,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",48,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",82,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",82,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",82,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",52,{"o":{"g":["str"],"n":"option"}}],[11,"without_plus","","",52,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",43,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",43,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",42,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",42,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",47,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",47,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",39,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",39,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",81,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",81,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",38,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",38,{"o":{"g":["str"],"n":"option"}}],[11,"to_tokens","","",51,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",40,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",49,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",50,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",41,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",46,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",53,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",48,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",52,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",43,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",42,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",47,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",44,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",45,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",54,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",82,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",39,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",81,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",38,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",83,{"i":[{"n":"self"}],"o":{"n":"type"}}],[11,"clone","","",51,{"i":[{"n":"self"}],"o":{"n":"typeslice"}}],[11,"from","","",83,{"i":[{"n":"typeslice"}],"o":{"n":"type"}}],[11,"clone","","",40,{"i":[{"n":"self"}],"o":{"n":"typearray"}}],[11,"from","","",83,{"i":[{"n":"typearray"}],"o":{"n":"type"}}],[11,"clone","","",49,{"i":[{"n":"self"}],"o":{"n":"typeptr"}}],[11,"from","","",83,{"i":[{"n":"typeptr"}],"o":{"n":"type"}}],[11,"clone","","",50,{"i":[{"n":"self"}],"o":{"n":"typereference"}}],[11,"from","","",83,{"i":[{"n":"typereference"}],"o":{"n":"type"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"typebarefn"}}],[11,"from","","",83,{"i":[{"n":"typebarefn"}],"o":{"n":"type"}}],[11,"clone","","",46,{"i":[{"n":"self"}],"o":{"n":"typenever"}}],[11,"from","","",83,{"i":[{"n":"typenever"}],"o":{"n":"type"}}],[11,"clone","","",53,{"i":[{"n":"self"}],"o":{"n":"typetuple"}}],[11,"from","","",83,{"i":[{"n":"typetuple"}],"o":{"n":"type"}}],[11,"clone","","",48,{"i":[{"n":"self"}],"o":{"n":"typepath"}}],[11,"from","","",83,{"i":[{"n":"typepath"}],"o":{"n":"type"}}],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"typetraitobject"}}],[11,"from","","",83,{"i":[{"n":"typetraitobject"}],"o":{"n":"type"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"typeimpltrait"}}],[11,"from","","",83,{"i":[{"n":"typeimpltrait"}],"o":{"n":"type"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"typeparen"}}],[11,"from","","",83,{"i":[{"n":"typeparen"}],"o":{"n":"type"}}],[11,"clone","","",42,{"i":[{"n":"self"}],"o":{"n":"typegroup"}}],[11,"from","","",83,{"i":[{"n":"typegroup"}],"o":{"n":"type"}}],[11,"clone","","",44,{"i":[{"n":"self"}],"o":{"n":"typeinfer"}}],[11,"from","","",83,{"i":[{"n":"typeinfer"}],"o":{"n":"type"}}],[11,"clone","","",45,{"i":[{"n":"self"}],"o":{"n":"typemacro"}}],[11,"from","","",83,{"i":[{"n":"typemacro"}],"o":{"n":"type"}}],[11,"clone","","",54,{"i":[{"n":"self"}],"o":{"n":"typeverbatim"}}],[11,"from","","",83,{"i":[{"n":"typeverbatim"}],"o":{"n":"type"}}],[11,"to_tokens","","",83,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",38,{"i":[{"n":"self"}],"o":{"n":"abi"}}],[11,"clone","","",39,{"i":[{"n":"self"}],"o":{"n":"barefnarg"}}],[11,"clone","","",81,{"i":[{"n":"self"}],"o":{"n":"barefnargname"}}],[11,"clone","","",82,{"i":[{"n":"self"}],"o":{"n":"returntype"}}],[11,"parse","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",59,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",84,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse","","",56,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",56,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",58,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",58,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",60,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",60,{"o":{"g":["str"],"n":"option"}}],[11,"parse","","",57,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",57,{"o":{"g":["str"],"n":"option"}}],[11,"parse_mod_style","","",59,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"to_tokens","","",59,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",60,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",85,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",84,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",56,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",57,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",58,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",55,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"path"}}],[11,"global","","",59,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"pathtokens"}}],[11,"from","","",59,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"pathsegment"}}],[11,"from","","",60,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"clone","","",85,{"i":[{"n":"self"}],"o":{"n":"patharguments"}}],[11,"default","","",85,{"o":{"n":"self"}}],[11,"is_empty","","",85,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clone","","",84,{"i":[{"n":"self"}],"o":{"n":"genericargument"}}],[11,"clone","","",56,{"i":[{"n":"self"}],"o":{"n":"anglebracketedgenericarguments"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"binding"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"parenthesizedgenericarguments"}}],[11,"clone","","",61,{"i":[{"n":"self"}],"o":{"n":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",220,{"i":[{"n":"tokenstream"}],"o":{"n":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",220,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"clone","","",221,{"i":[{"n":"self"}],"o":{"n":"cursor"}}],[11,"eq","","",221,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"ne","","",221,{"i":[{"n":"self"},{"n":"cursor"}],"o":{"n":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",221,{"o":{"n":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",221,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",221,{"i":[{"n":"self"},{"n":"delimiter"}],"o":{"n":"option"}}],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",221,{"i":[{"n":"self"}],"o":{"n":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",221,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",221,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"to_tokens","","",222,{"i":[{"n":"self"},{"n":"tokenstream"}]}],[11,"clone","","",223,{"i":[{"n":"self"}],"o":{"n":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"o":{"n":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"i":[{"n":"self"}],"o":{"n":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"i":[{"n":"self"},{"n":"t"}]}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"i":[{"n":"self"},{"n":"p"}]}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"i":[{"n":"self"}],"o":{"g":["pair"],"n":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"i":[{"n":"self"},{"n":"t"}]}],[11,"insert","","Inserts an element at position `index`.",223,{"i":[{"n":"self"},{"n":"usize"},{"n":"t"}]}],[11,"from_iter","","",223,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",223,{"i":[{"n":"self"},{"n":"i"}]}],[11,"from_iter","","",223,{"i":[{"n":"i"}],"o":{"n":"self"}}],[11,"extend","","",223,{"i":[{"n":"self"},{"n":"i"}]}],[11,"into_iter","","",223,null],[11,"default","","",223,{"o":{"n":"self"}}],[11,"next","","",224,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",224,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",225,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",225,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",226,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",226,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",227,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",227,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",228,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",228,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"next","","",229,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"len","","",229,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"i":[{"n":"t"},{"n":"option"}],"o":{"n":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[0,"ext","","Extension traits that are made available within the `call!` parser.",null,null],[8,"IdentExt","syn::synom::ext","Additional parsing methods for `Ident`.",null,null],[10,"parse_any","","Parses any identifier including keywords.",230,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"parse_any","syn","",179,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[6,"PResult","syn::synom","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",231,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","A short name of the type being parsed.",231,{"o":{"g":["str"],"n":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",232,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"tokenstream"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",232,{"i":[{"n":"self"},{"n":"str"}],"o":{"g":["parseerror"],"n":"result"}}],[11,"parse","syn","",179,{"i":[{"n":"cursor"}],"o":{"n":"presult"}}],[11,"description","","",179,{"o":{"g":["str"],"n":"option"}}],[0,"spanned","","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",233,{"i":[{"n":"self"}],"o":{"n":"span"}}],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[5,"visit_abi","syn::visit","",null,{"i":[{"n":"v"},{"n":"abi"}]}],[5,"visit_angle_bracketed_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"anglebracketedgenericarguments"}]}],[5,"visit_attr_style","","",null,{"i":[{"n":"v"},{"n":"attrstyle"}]}],[5,"visit_attribute","","",null,{"i":[{"n":"v"},{"n":"attribute"}]}],[5,"visit_bare_fn_arg","","",null,{"i":[{"n":"v"},{"n":"barefnarg"}]}],[5,"visit_bare_fn_arg_name","","",null,{"i":[{"n":"v"},{"n":"barefnargname"}]}],[5,"visit_bin_op","","",null,{"i":[{"n":"v"},{"n":"binop"}]}],[5,"visit_binding","","",null,{"i":[{"n":"v"},{"n":"binding"}]}],[5,"visit_bound_lifetimes","","",null,{"i":[{"n":"v"},{"n":"boundlifetimes"}]}],[5,"visit_const_param","","",null,{"i":[{"n":"v"},{"n":"constparam"}]}],[5,"visit_data","","",null,{"i":[{"n":"v"},{"n":"data"}]}],[5,"visit_data_enum","","",null,{"i":[{"n":"v"},{"n":"dataenum"}]}],[5,"visit_data_struct","","",null,{"i":[{"n":"v"},{"n":"datastruct"}]}],[5,"visit_data_union","","",null,{"i":[{"n":"v"},{"n":"dataunion"}]}],[5,"visit_derive_input","","",null,{"i":[{"n":"v"},{"n":"deriveinput"}]}],[5,"visit_expr","","",null,{"i":[{"n":"v"},{"n":"expr"}]}],[5,"visit_expr_binary","","",null,{"i":[{"n":"v"},{"n":"exprbinary"}]}],[5,"visit_expr_call","","",null,{"i":[{"n":"v"},{"n":"exprcall"}]}],[5,"visit_expr_cast","","",null,{"i":[{"n":"v"},{"n":"exprcast"}]}],[5,"visit_expr_index","","",null,{"i":[{"n":"v"},{"n":"exprindex"}]}],[5,"visit_expr_lit","","",null,{"i":[{"n":"v"},{"n":"exprlit"}]}],[5,"visit_expr_paren","","",null,{"i":[{"n":"v"},{"n":"exprparen"}]}],[5,"visit_expr_path","","",null,{"i":[{"n":"v"},{"n":"exprpath"}]}],[5,"visit_expr_unary","","",null,{"i":[{"n":"v"},{"n":"exprunary"}]}],[5,"visit_expr_verbatim","","",null,{"i":[{"n":"v"},{"n":"exprverbatim"}]}],[5,"visit_field","","",null,{"i":[{"n":"v"},{"n":"field"}]}],[5,"visit_fields","","",null,{"i":[{"n":"v"},{"n":"fields"}]}],[5,"visit_fields_named","","",null,{"i":[{"n":"v"},{"n":"fieldsnamed"}]}],[5,"visit_fields_unnamed","","",null,{"i":[{"n":"v"},{"n":"fieldsunnamed"}]}],[5,"visit_generic_argument","","",null,{"i":[{"n":"v"},{"n":"genericargument"}]}],[5,"visit_generic_param","","",null,{"i":[{"n":"v"},{"n":"genericparam"}]}],[5,"visit_generics","","",null,{"i":[{"n":"v"},{"n":"generics"}]}],[5,"visit_ident","","",null,{"i":[{"n":"v"},{"n":"ident"}]}],[5,"visit_index","","",null,{"i":[{"n":"v"},{"n":"index"}]}],[5,"visit_lifetime","","",null,{"i":[{"n":"v"},{"n":"lifetime"}]}],[5,"visit_lifetime_def","","",null,{"i":[{"n":"v"},{"n":"lifetimedef"}]}],[5,"visit_lit","","",null,{"i":[{"n":"v"},{"n":"lit"}]}],[5,"visit_lit_bool","","",null,{"i":[{"n":"v"},{"n":"litbool"}]}],[5,"visit_lit_byte","","",null,{"i":[{"n":"v"},{"n":"litbyte"}]}],[5,"visit_lit_byte_str","","",null,{"i":[{"n":"v"},{"n":"litbytestr"}]}],[5,"visit_lit_char","","",null,{"i":[{"n":"v"},{"n":"litchar"}]}],[5,"visit_lit_float","","",null,{"i":[{"n":"v"},{"n":"litfloat"}]}],[5,"visit_lit_int","","",null,{"i":[{"n":"v"},{"n":"litint"}]}],[5,"visit_lit_str","","",null,{"i":[{"n":"v"},{"n":"litstr"}]}],[5,"visit_lit_verbatim","","",null,{"i":[{"n":"v"},{"n":"litverbatim"}]}],[5,"visit_macro","","",null,{"i":[{"n":"v"},{"n":"macro"}]}],[5,"visit_macro_delimiter","","",null,{"i":[{"n":"v"},{"n":"macrodelimiter"}]}],[5,"visit_member","","",null,{"i":[{"n":"v"},{"n":"member"}]}],[5,"visit_meta","","",null,{"i":[{"n":"v"},{"n":"meta"}]}],[5,"visit_meta_list","","",null,{"i":[{"n":"v"},{"n":"metalist"}]}],[5,"visit_meta_name_value","","",null,{"i":[{"n":"v"},{"n":"metanamevalue"}]}],[5,"visit_nested_meta","","",null,{"i":[{"n":"v"},{"n":"nestedmeta"}]}],[5,"visit_parenthesized_generic_arguments","","",null,{"i":[{"n":"v"},{"n":"parenthesizedgenericarguments"}]}],[5,"visit_path","","",null,{"i":[{"n":"v"},{"n":"path"}]}],[5,"visit_path_arguments","","",null,{"i":[{"n":"v"},{"n":"patharguments"}]}],[5,"visit_path_segment","","",null,{"i":[{"n":"v"},{"n":"pathsegment"}]}],[5,"visit_predicate_eq","","",null,{"i":[{"n":"v"},{"n":"predicateeq"}]}],[5,"visit_predicate_lifetime","","",null,{"i":[{"n":"v"},{"n":"predicatelifetime"}]}],[5,"visit_predicate_type","","",null,{"i":[{"n":"v"},{"n":"predicatetype"}]}],[5,"visit_qself","","",null,{"i":[{"n":"v"},{"n":"qself"}]}],[5,"visit_return_type","","",null,{"i":[{"n":"v"},{"n":"returntype"}]}],[5,"visit_span","","",null,{"i":[{"n":"v"},{"n":"span"}]}],[5,"visit_trait_bound","","",null,{"i":[{"n":"v"},{"n":"traitbound"}]}],[5,"visit_trait_bound_modifier","","",null,{"i":[{"n":"v"},{"n":"traitboundmodifier"}]}],[5,"visit_type","","",null,{"i":[{"n":"v"},{"n":"type"}]}],[5,"visit_type_array","","",null,{"i":[{"n":"v"},{"n":"typearray"}]}],[5,"visit_type_bare_fn","","",null,{"i":[{"n":"v"},{"n":"typebarefn"}]}],[5,"visit_type_group","","",null,{"i":[{"n":"v"},{"n":"typegroup"}]}],[5,"visit_type_impl_trait","","",null,{"i":[{"n":"v"},{"n":"typeimpltrait"}]}],[5,"visit_type_infer","","",null,{"i":[{"n":"v"},{"n":"typeinfer"}]}],[5,"visit_type_macro","","",null,{"i":[{"n":"v"},{"n":"typemacro"}]}],[5,"visit_type_never","","",null,{"i":[{"n":"v"},{"n":"typenever"}]}],[5,"visit_type_param","","",null,{"i":[{"n":"v"},{"n":"typeparam"}]}],[5,"visit_type_param_bound","","",null,{"i":[{"n":"v"},{"n":"typeparambound"}]}],[5,"visit_type_paren","","",null,{"i":[{"n":"v"},{"n":"typeparen"}]}],[5,"visit_type_path","","",null,{"i":[{"n":"v"},{"n":"typepath"}]}],[5,"visit_type_ptr","","",null,{"i":[{"n":"v"},{"n":"typeptr"}]}],[5,"visit_type_reference","","",null,{"i":[{"n":"v"},{"n":"typereference"}]}],[5,"visit_type_slice","","",null,{"i":[{"n":"v"},{"n":"typeslice"}]}],[5,"visit_type_trait_object","","",null,{"i":[{"n":"v"},{"n":"typetraitobject"}]}],[5,"visit_type_tuple","","",null,{"i":[{"n":"v"},{"n":"typetuple"}]}],[5,"visit_type_verbatim","","",null,{"i":[{"n":"v"},{"n":"typeverbatim"}]}],[5,"visit_un_op","","",null,{"i":[{"n":"v"},{"n":"unop"}]}],[5,"visit_variant","","",null,{"i":[{"n":"v"},{"n":"variant"}]}],[5,"visit_vis_crate","","",null,{"i":[{"n":"v"},{"n":"viscrate"}]}],[5,"visit_vis_public","","",null,{"i":[{"n":"v"},{"n":"vispublic"}]}],[5,"visit_vis_restricted","","",null,{"i":[{"n":"v"},{"n":"visrestricted"}]}],[5,"visit_visibility","","",null,{"i":[{"n":"v"},{"n":"visibility"}]}],[5,"visit_where_clause","","",null,{"i":[{"n":"v"},{"n":"whereclause"}]}],[5,"visit_where_predicate","","",null,{"i":[{"n":"v"},{"n":"wherepredicate"}]}],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax tree.",null,null],[11,"visit_abi","","",234,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",234,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",234,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",234,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",234,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",234,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",234,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",234,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",234,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",234,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",234,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",234,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",234,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",234,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",234,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",234,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",234,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",234,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_index","","",234,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",234,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",234,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",234,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",234,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",234,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",234,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",234,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",234,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",234,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",234,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",234,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",234,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",234,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",234,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",234,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",234,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",234,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",234,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",234,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",234,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",234,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",234,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",234,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",234,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",234,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",234,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",234,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",234,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",234,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",234,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",234,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",234,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",234,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",234,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",234,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",234,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",234,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",234,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",234,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",234,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",234,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",234,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",234,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",234,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",234,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",234,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",234,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",234,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",234,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",234,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",234,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",234,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",234,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",234,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",234,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",234,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",234,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",234,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",234,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",234,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",234,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",234,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",234,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",234,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",234,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",234,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",234,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",234,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",234,{"i":[{"n":"self"},{"n":"wherepredicate"}]}],[11,"fmt","syn::synom","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",235,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",235,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"custom_keyword","","Parse the given word as a keyword.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null],[11,"new","","Creates a new `Ident` with the given `string` as well as the specified `span`.",179,{"i":[{"n":"str"},{"n":"span"}],"o":{"n":"ident"}}],[11,"span","","Returns the span of this `Ident`.",179,{"i":[{"n":"self"}],"o":{"n":"span"}}],[11,"set_span","","Configures the span of this `Ident`, possibly changing its hygiene context.",179,null],[11,"cmp","","",179,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",179,{"i":[{"n":"self"},{"n":"ident"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"bool"}}],[11,"eq","","",179,{"i":[{"n":"self"},{"n":"ident"}],"o":{"n":"bool"}}],[11,"clone","","",179,{"i":[{"n":"self"}],"o":{"n":"ident"}}],[11,"hash","","",179,null],[11,"to_tokens","","",179,null],[11,"visit_abi","syn::visit","",234,{"i":[{"n":"self"},{"n":"abi"}]}],[11,"visit_angle_bracketed_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"anglebracketedgenericarguments"}]}],[11,"visit_attr_style","","",234,{"i":[{"n":"self"},{"n":"attrstyle"}]}],[11,"visit_attribute","","",234,{"i":[{"n":"self"},{"n":"attribute"}]}],[11,"visit_bare_fn_arg","","",234,{"i":[{"n":"self"},{"n":"barefnarg"}]}],[11,"visit_bare_fn_arg_name","","",234,{"i":[{"n":"self"},{"n":"barefnargname"}]}],[11,"visit_bin_op","","",234,{"i":[{"n":"self"},{"n":"binop"}]}],[11,"visit_binding","","",234,{"i":[{"n":"self"},{"n":"binding"}]}],[11,"visit_bound_lifetimes","","",234,{"i":[{"n":"self"},{"n":"boundlifetimes"}]}],[11,"visit_const_param","","",234,{"i":[{"n":"self"},{"n":"constparam"}]}],[11,"visit_data","","",234,{"i":[{"n":"self"},{"n":"data"}]}],[11,"visit_data_enum","","",234,{"i":[{"n":"self"},{"n":"dataenum"}]}],[11,"visit_data_struct","","",234,{"i":[{"n":"self"},{"n":"datastruct"}]}],[11,"visit_data_union","","",234,{"i":[{"n":"self"},{"n":"dataunion"}]}],[11,"visit_derive_input","","",234,{"i":[{"n":"self"},{"n":"deriveinput"}]}],[11,"visit_expr","","",234,{"i":[{"n":"self"},{"n":"expr"}]}],[11,"visit_expr_binary","","",234,{"i":[{"n":"self"},{"n":"exprbinary"}]}],[11,"visit_expr_call","","",234,{"i":[{"n":"self"},{"n":"exprcall"}]}],[11,"visit_expr_cast","","",234,{"i":[{"n":"self"},{"n":"exprcast"}]}],[11,"visit_expr_index","","",234,{"i":[{"n":"self"},{"n":"exprindex"}]}],[11,"visit_expr_lit","","",234,{"i":[{"n":"self"},{"n":"exprlit"}]}],[11,"visit_expr_paren","","",234,{"i":[{"n":"self"},{"n":"exprparen"}]}],[11,"visit_expr_path","","",234,{"i":[{"n":"self"},{"n":"exprpath"}]}],[11,"visit_expr_unary","","",234,{"i":[{"n":"self"},{"n":"exprunary"}]}],[11,"visit_expr_verbatim","","",234,{"i":[{"n":"self"},{"n":"exprverbatim"}]}],[11,"visit_field","","",234,{"i":[{"n":"self"},{"n":"field"}]}],[11,"visit_fields","","",234,{"i":[{"n":"self"},{"n":"fields"}]}],[11,"visit_fields_named","","",234,{"i":[{"n":"self"},{"n":"fieldsnamed"}]}],[11,"visit_fields_unnamed","","",234,{"i":[{"n":"self"},{"n":"fieldsunnamed"}]}],[11,"visit_generic_argument","","",234,{"i":[{"n":"self"},{"n":"genericargument"}]}],[11,"visit_generic_param","","",234,{"i":[{"n":"self"},{"n":"genericparam"}]}],[11,"visit_generics","","",234,{"i":[{"n":"self"},{"n":"generics"}]}],[11,"visit_ident","","",234,{"i":[{"n":"self"},{"n":"ident"}]}],[11,"visit_index","","",234,{"i":[{"n":"self"},{"n":"index"}]}],[11,"visit_lifetime","","",234,{"i":[{"n":"self"},{"n":"lifetime"}]}],[11,"visit_lifetime_def","","",234,{"i":[{"n":"self"},{"n":"lifetimedef"}]}],[11,"visit_lit","","",234,{"i":[{"n":"self"},{"n":"lit"}]}],[11,"visit_lit_bool","","",234,{"i":[{"n":"self"},{"n":"litbool"}]}],[11,"visit_lit_byte","","",234,{"i":[{"n":"self"},{"n":"litbyte"}]}],[11,"visit_lit_byte_str","","",234,{"i":[{"n":"self"},{"n":"litbytestr"}]}],[11,"visit_lit_char","","",234,{"i":[{"n":"self"},{"n":"litchar"}]}],[11,"visit_lit_float","","",234,{"i":[{"n":"self"},{"n":"litfloat"}]}],[11,"visit_lit_int","","",234,{"i":[{"n":"self"},{"n":"litint"}]}],[11,"visit_lit_str","","",234,{"i":[{"n":"self"},{"n":"litstr"}]}],[11,"visit_lit_verbatim","","",234,{"i":[{"n":"self"},{"n":"litverbatim"}]}],[11,"visit_macro","","",234,{"i":[{"n":"self"},{"n":"macro"}]}],[11,"visit_macro_delimiter","","",234,{"i":[{"n":"self"},{"n":"macrodelimiter"}]}],[11,"visit_member","","",234,{"i":[{"n":"self"},{"n":"member"}]}],[11,"visit_meta","","",234,{"i":[{"n":"self"},{"n":"meta"}]}],[11,"visit_meta_list","","",234,{"i":[{"n":"self"},{"n":"metalist"}]}],[11,"visit_meta_name_value","","",234,{"i":[{"n":"self"},{"n":"metanamevalue"}]}],[11,"visit_nested_meta","","",234,{"i":[{"n":"self"},{"n":"nestedmeta"}]}],[11,"visit_parenthesized_generic_arguments","","",234,{"i":[{"n":"self"},{"n":"parenthesizedgenericarguments"}]}],[11,"visit_path","","",234,{"i":[{"n":"self"},{"n":"path"}]}],[11,"visit_path_arguments","","",234,{"i":[{"n":"self"},{"n":"patharguments"}]}],[11,"visit_path_segment","","",234,{"i":[{"n":"self"},{"n":"pathsegment"}]}],[11,"visit_predicate_eq","","",234,{"i":[{"n":"self"},{"n":"predicateeq"}]}],[11,"visit_predicate_lifetime","","",234,{"i":[{"n":"self"},{"n":"predicatelifetime"}]}],[11,"visit_predicate_type","","",234,{"i":[{"n":"self"},{"n":"predicatetype"}]}],[11,"visit_qself","","",234,{"i":[{"n":"self"},{"n":"qself"}]}],[11,"visit_return_type","","",234,{"i":[{"n":"self"},{"n":"returntype"}]}],[11,"visit_span","","",234,{"i":[{"n":"self"},{"n":"span"}]}],[11,"visit_trait_bound","","",234,{"i":[{"n":"self"},{"n":"traitbound"}]}],[11,"visit_trait_bound_modifier","","",234,{"i":[{"n":"self"},{"n":"traitboundmodifier"}]}],[11,"visit_type","","",234,{"i":[{"n":"self"},{"n":"type"}]}],[11,"visit_type_array","","",234,{"i":[{"n":"self"},{"n":"typearray"}]}],[11,"visit_type_bare_fn","","",234,{"i":[{"n":"self"},{"n":"typebarefn"}]}],[11,"visit_type_group","","",234,{"i":[{"n":"self"},{"n":"typegroup"}]}],[11,"visit_type_impl_trait","","",234,{"i":[{"n":"self"},{"n":"typeimpltrait"}]}],[11,"visit_type_infer","","",234,{"i":[{"n":"self"},{"n":"typeinfer"}]}],[11,"visit_type_macro","","",234,{"i":[{"n":"self"},{"n":"typemacro"}]}],[11,"visit_type_never","","",234,{"i":[{"n":"self"},{"n":"typenever"}]}],[11,"visit_type_param","","",234,{"i":[{"n":"self"},{"n":"typeparam"}]}],[11,"visit_type_param_bound","","",234,{"i":[{"n":"self"},{"n":"typeparambound"}]}],[11,"visit_type_paren","","",234,{"i":[{"n":"self"},{"n":"typeparen"}]}],[11,"visit_type_path","","",234,{"i":[{"n":"self"},{"n":"typepath"}]}],[11,"visit_type_ptr","","",234,{"i":[{"n":"self"},{"n":"typeptr"}]}],[11,"visit_type_reference","","",234,{"i":[{"n":"self"},{"n":"typereference"}]}],[11,"visit_type_slice","","",234,{"i":[{"n":"self"},{"n":"typeslice"}]}],[11,"visit_type_trait_object","","",234,{"i":[{"n":"self"},{"n":"typetraitobject"}]}],[11,"visit_type_tuple","","",234,{"i":[{"n":"self"},{"n":"typetuple"}]}],[11,"visit_type_verbatim","","",234,{"i":[{"n":"self"},{"n":"typeverbatim"}]}],[11,"visit_un_op","","",234,{"i":[{"n":"self"},{"n":"unop"}]}],[11,"visit_variant","","",234,{"i":[{"n":"self"},{"n":"variant"}]}],[11,"visit_vis_crate","","",234,{"i":[{"n":"self"},{"n":"viscrate"}]}],[11,"visit_vis_public","","",234,{"i":[{"n":"self"},{"n":"vispublic"}]}],[11,"visit_vis_restricted","","",234,{"i":[{"n":"self"},{"n":"visrestricted"}]}],[11,"visit_visibility","","",234,{"i":[{"n":"self"},{"n":"visibility"}]}],[11,"visit_where_clause","","",234,{"i":[{"n":"self"},{"n":"whereclause"}]}],[11,"visit_where_predicate","","",234,{"i":[{"n":"self"},{"n":"wherepredicate"}]}]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"PathTokens"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Apostrophe"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Ident"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprField"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"IdentExt"],[8,"Synom"],[8,"Parser"],[8,"Spanned"],[8,"Visit"],[3,"ParseError"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn` `Variant`, however this type may also be used as the sole variant for astruct.",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"data","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn` `DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn` `DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",3,null],[13,"MoveMut","","`mut x`",3,null],[13,"Ref","","`ref x`",3,null],[13,"RefMut","","`ref mut x`",3,null],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bindstyle"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bindstyle"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"to_tokens","","",3,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"bindinginfo"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"bindinginfo"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"bindinginfo"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"i":[{"n":"self"},{"n":"tokens"}]}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"i":[{"n":"self"}],"o":{"n":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"i":[{"n":"self"}],"o":{"n":"tokens"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"variantast"}}],[11,"eq","","",1,{"i":[{"n":"self"},{"n":"variantast"}],"o":{"n":"bool"}}],[11,"ne","","",1,{"i":[{"n":"self"},{"n":"variantast"}],"o":{"n":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"variantinfo"}}],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"variantinfo"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"variantinfo"}],"o":{"n":"bool"}}],[11,"hash","","",2,null],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"i":[{"n":"self"}],"o":{"n":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"i":[{"n":"self"}],"o":{"n":"tokens"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"i":[{"n":"self"},{"n":"i"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"structure"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"structure"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"structure"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,{"i":[{"n":"deriveinput"}],"o":{"n":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",4,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,{"i":[{"n":"self"}],"o":{"n":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,{"i":[{"n":"self"},{"n":"i"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"tokens"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,{"i":[{"n":"self"}],"o":{"g":["ident"],"n":"vec"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,{"i":[{"n":"self"},{"n":"typarambound"},{"n":"vec"}]}],[11,"bound_impl","","Creates an `impl` block with the required generic type fields filled in to implement the trait `path`.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[11,"unsafe_bound_impl","","This method is the same as `bound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[11,"unbound_impl","","This method is like `bound_impl` but doesn't add the additional bounds to the where clause.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[11,"unsafe_unbound_impl","","This method is the same as `unbound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"i":[{"n":"self"},{"n":"p"},{"n":"b"}],"o":{"n":"tokens"}}],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming TokenStream into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["take"] = {"doc":"Cell allowing the inner value to be consumed without a mutable reference.","items":[[3,"Take","take","Cell allowing the inner value to be consumed without a mutable reference.",null,null],[11,"new","","Create and return a new `Take` value containing the given inner value.",0,{"inputs":[{"name":"t"}],"output":{"name":"take"}}],[11,"take","","Consume and return the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Take"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect which terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"generics":["box"],"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"generics":["box"],"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The \"magic\" number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not >= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"generics":["pathbuf"],"name":"option"}}],[0,"parser","term::terminfo","`TermInfo` format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"generics":["terminfo"],"name":"result"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Number","","",4,null],[13,"Words","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn't have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator wanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"variables"}}],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"terminfo"}}],[11,"from_env","","Create a `TermInfo` based on current environment.",2,{"inputs":[],"output":{"generics":["terminfo"],"name":"result"}}],[11,"from_name","","Create a `TermInfo` for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"generics":["terminfo"],"name":"result"}}],[11,"from_path","","Parse the given `TermInfo`.",2,{"inputs":[{"name":"p"}],"output":{"generics":["terminfo"],"name":"result"}}],[11,"apply_cap","","Retrieve a capability `cmd` and expand it with `params`, writing result to `out`.",2,null],[11,"reset","","Write the reset string to `out`.",2,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"terminfoterminal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fg","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",7,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",7,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"supports_color","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cursor_up","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_line","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"carriage_return","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"t"}],"output":{"generics":["terminfoterminal"],"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate's Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is supported and was sent to the terminal, or `Err(e)` if there was an error or the attribute wasn't supported.",8,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"supports_reset","","Returns true if reset is supported.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_color","","Returns true if color is fully supported.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cursor_up","","Moves the cursor up one line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",8,null],[10,"get_mut","","Gets a mutable reference to the stream inside",8,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",null,null],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",null,null],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["cow"],"name":"vec"}}],[5,"wrap_iter","","Lazily wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"intowrapiter"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nohyphenation"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphensplitter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapper"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"inputs":[{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"wrapper"}}],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cow"],"name":"vec"}}],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapiter"}}],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"intowrapiter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["tokio"] = {"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"clock","tokio","A configurable source of time.",null,null],[5,"now","tokio::clock","Returns an `Instant` corresponding to \"now\".",null,{"inputs":[],"output":{"name":"instant"}}],[0,"executor","tokio","Task execution utilities.",null,null],[8,"Executor","tokio::executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",0,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[3,"Spawn","","Return value from the `spawn` function.",null,null],[5,"spawn","","Spawns a future on the default executor.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawn"}}],[0,"current_thread","","Execute many tasks concurrently on the current thread.",null,null],[3,"CurrentThread","tokio::executor::current_thread","Executes tasks on the current thread",null,null],[3,"TaskExecutor","","Executes futures on the current thread.",null,null],[3,"Turn","","Returned by the `turn` function.",null,null],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution context.",null,null],[3,"RunError","","Error returned by the `run` function.",null,null],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",null,null],[3,"TurnError","","Error returned by the `turn` function.",null,null],[3,"BlockError","","Error returned by the `block_on` function.",null,null],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` instance",null,null],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"spawn","","Executes a future on the current thread.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `CurrentThread`.",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",7,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"is_idle","","Returns `true` if the executor is currently idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawn the future on the executor.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"enter","","Bind `CurrentThread` instance with an execution context.",7,{"inputs":[{"name":"self"},{"name":"enter"}],"output":{"name":"entered"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"handle","","Get a new handle to spawn futures on the executor",7,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"spawn","","",7,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn the future on the executor.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",8,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn a future onto the `CurrentThread` instance corresponding to this handle",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"current","","Returns an executor that executes futures on the current thread.",1,{"inputs":[],"output":{"name":"taskexecutor"}}],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",1,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"is_timeout","","Returns `true` if the error was caused by the operation timing out.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[11,"into_inner","","Returns the error yielded by the future being blocked on",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[0,"thread_pool","tokio::executor","Maintains a pool of threads across which the set of spawned tasks are executed.",null,null],[3,"Builder","tokio::executor::thread_pool","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[11,"fmt","tokio::executor","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_future","","",10,null],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",null,null],[0,"file","tokio::fs","Types for working with [`File`].",null,null],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"File","tokio::fs","A reference to an open file on the filesystem.",null,null],[0,"net","tokio","TCP/UDP bindings for `tokio`.",null,null],[3,"TcpStream","tokio::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",null,null],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Background","","Handle to the reactor running on a background thread.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",null,null],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",null,null],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",null,null],[3,"TaskExecutor","","Executes futures on the runtime",null,null],[3,"Runtime","","Handle to the Tokio runtime.",null,null],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",11,{"inputs":[],"output":{"name":"builder"}}],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",11,{"inputs":[{"name":"self"},{"name":"clock"}],"output":{"name":"self"}}],[11,"threadpool_builder","","Set builder to set up the thread pool instance.",11,{"inputs":[{"name":"self"},{"name":"threadpoolbuilder"}],"output":{"name":"self"}}],[11,"build","","Create the configured `Runtime`.",11,{"inputs":[{"name":"self"}],"output":{"generics":["runtime"],"name":"result"}}],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",null,null],[3,"Builder","tokio::runtime::current_thread","Builds a Single-threaded runtime with custom configuration values.",null,null],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",null,null],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",12,{"inputs":[],"output":{"name":"builder"}}],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",12,{"inputs":[{"name":"self"},{"name":"clock"}],"output":{"name":"self"}}],[11,"build","","Create the configured `Runtime`.",12,{"inputs":[{"name":"self"}],"output":{"generics":["runtime"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"new","","Returns a new runtime initialized with default configuration values.",13,{"inputs":[],"output":{"generics":["runtime"],"name":"result"}}],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",13,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",13,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"poll","tokio::runtime","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"execute","","",16,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"spawn","","",16,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new runtime instance with default configuration values.",17,{"inputs":[],"output":{"name":"result"}}],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",17,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"executor","","Return a handle to the runtime's executor.",17,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Run a future to completion on the Tokio runtime.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",17,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",17,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[0,"timer","tokio","Utilities for tracking time.",null,null],[3,"Deadline","tokio::timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[0,"util","tokio","Utilities for working with Tokio.",null,null],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","","Creates a new future which allows `self` until `deadline`.",18,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[0,"io","tokio","Asynchronous I/O.",null,null],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",19,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",19,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",19,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",20,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",20,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",20,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",21,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",21,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",21,null],[13,"ConnectionReset","","The connection was reset by the remote server.",21,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",21,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",21,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",21,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",21,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",21,null],[13,"AlreadyExists","","An entity already exists, often a file.",21,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",21,null],[13,"InvalidInput","","A parameter was incorrect.",21,null],[13,"InvalidData","","Data not valid for the operation were encountered.",21,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",21,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",21,null],[13,"Interrupted","","This operation was interrupted.",21,null],[13,"Other","","Any I/O error not part of this list.",21,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",21,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",22,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",22,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",22,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",22,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",22,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",22,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",22,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",23,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",23,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",23,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",null,null],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",19,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",19,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",19,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",19,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",20,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",20,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",20,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",20,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",22,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",22,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",22,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",22,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",22,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",22,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",22,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",23,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",23,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",23,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",23,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",24,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",24,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",24,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",24,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",24,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",24,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",24,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",24,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[0,"future","","Futures",null,null],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",24,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",24,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",24,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",24,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",24,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",24,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",24,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",24,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",24,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",24,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",24,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",25,null],[16,"Item","","The item that the future may resolve with.",25,null],[16,"Error","","The error that the future may resolve with.",25,null],[10,"into_future","","Consumes this object and produces a future.",25,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",26,null],[16,"Error","","Possible errors during conversion.",26,null],[10,"future_from","","Consume the given value, beginning the conversion.",26,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",28,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",28,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Done","","A future representing a value that is immediately ready.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"collect","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",29,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",29,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",30,null],[13,"B","","Second branch of the type",30,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",31,null],[16,"Error","","The type of error this stream may generate.",31,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",31,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",31,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",31,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",31,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",31,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",31,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",31,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",31,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",31,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",31,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",31,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",31,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",31,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"stream","","Asynchronous streams",null,null],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",null,null],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",31,null],[16,"Error","","The type of error this stream may generate.",31,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",31,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",31,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",31,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",31,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",31,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",31,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",31,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",31,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",31,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",31,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",31,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",31,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",31,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",31,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",31,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",31,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",32,null],[12,"1","","",32,null],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[3,"FutureSender","","Future returned by `Sender::send`.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"Sender","","The transmission end of a channel which is used to send values.",null,null],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",33,null],[13,"Second","","An item from the second stream",33,null],[13,"Both","","Items from both streams",33,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"FuturesUnordered","","An unbounded set of futures.",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",34,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",34,null],[10,"start_send","","Begin the process of sending a value to the sink.",34,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",34,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",34,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",34,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",34,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",34,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",34,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",25,null],[16,"Item","","The item that the future may resolve with.",25,null],[16,"Error","","The error that the future may resolve with.",25,null],[10,"into_future","","Consumes this object and produces a future.",25,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",35,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",35,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",36,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",36,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"task","","Tasks used to drive a future computation",null,null],[3,"Spawn","tokio::prelude::task","Representation of a spawned future/stream.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",37,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",38,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",39,null],[5,"init","","Initialize the `futures` task system.",null,null],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",null,null],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",18,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"fmt","tokio::io","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"from","","",40,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",40,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"from","","",40,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"description","","",40,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","tokio::prelude::stream","",41,{"inputs":[{"name":"t"}],"output":{"name":"futuresunordered"}}],[11,"from_iter","","",42,{"inputs":[{"name":"t"}],"output":{"name":"futuresordered"}}],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","tokio::prelude::stream::futures_unordered","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"clone","tokio::prelude","",36,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"clone","tokio::prelude::future","",28,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"clone","tokio::prelude::task","",45,{"inputs":[{"name":"self"}],"output":{"name":"taskrc"}}],[11,"clone","tokio::prelude::future","",46,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"clone","tokio::prelude","",35,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"clone","tokio::prelude::future","",48,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"clone","tokio::prelude::task","",50,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"atomictask"}}],[11,"deref","tokio::prelude::future","",48,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","tokio::prelude::stream","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",54,null],[11,"poll_complete","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",55,null],[11,"poll_complete","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",58,null],[11,"poll_complete","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",63,null],[11,"poll_complete","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",64,null],[11,"poll_complete","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",65,null],[11,"poll_complete","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",67,null],[11,"poll_complete","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",68,null],[11,"poll_complete","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",69,null],[11,"poll_complete","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",71,null],[11,"poll_complete","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",72,null],[11,"poll_complete","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","tokio::prelude::future","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",78,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",79,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",81,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",83,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",84,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",85,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",87,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",90,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",92,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",95,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",96,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",99,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",100,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",101,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",102,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",103,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"eq","tokio::prelude","",35,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"poll","tokio::prelude::stream","",107,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",112,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",113,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",114,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",115,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",119,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",70,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",121,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",123,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"from","tokio::prelude::future","",49,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"from","tokio::prelude","",35,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"description","tokio::prelude::stream","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","tokio::prelude::future","",48,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","tokio::prelude::stream","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",41,null],[11,"drop","tokio::prelude::future","",46,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream::futures_unordered","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shutdown","tokio::io","",129,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",129,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"read_buf","","",130,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write","","",129,null],[11,"flush","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",130,null],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",132,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",135,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",137,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",138,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clone","tokio::executor","",139,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",139,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","tokio::fs::file","",141,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"write","tokio::io","",142,null],[11,"flush","","",142,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","","",143,null],[11,"flush","","",143,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","tokio::fs","",144,null],[11,"flush","","",144,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",144,null],[11,"read","tokio::io","",145,null],[11,"poll","tokio::fs::file","",146,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",147,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","tokio::io","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs::file","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs::file","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","tokio::fs","",144,null],[11,"prepare_uninitialized_buffer","tokio::io","",145,null],[11,"prepare_uninitialized_buffer","tokio::fs","",144,null],[11,"shutdown","","",144,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","tokio::io","",143,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","","",142,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"status","tokio::executor::thread_pool","",148,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",148,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"poll","","",149,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",150,null],[11,"execute","","",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","tokio::reactor","",152,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"unpark","","",152,null],[11,"write","","",153,null],[11,"flush","","",153,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",152,{"inputs":[],"output":{"name":"handle"}}],[11,"drop","","",153,null],[11,"drop","","",156,null],[11,"shutdown","","",153,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"unpark","","",155,null],[11,"park","","",155,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"park_timeout","","",155,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","tokio::timer","",158,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",159,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",160,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",161,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"poll","","",162,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::net","",163,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",164,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"prepare_uninitialized_buffer","","",164,null],[11,"read_buf","","",164,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write","","",164,null],[11,"flush","","",164,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",164,null],[11,"as_raw_fd","","",165,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",164,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"poll","","",166,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"start_send","","",167,null],[11,"poll_complete","","",167,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",167,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",168,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",169,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"as_raw_fd","","",170,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"poll","","",167,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",139,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",140,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",140,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","tokio::executor::thread_pool","Returns a new thread pool builder initialized with default configuration values.",151,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"keep_alive","","Set the worker thread keep alive duration",151,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"builder"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",151,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"builder"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"around_worker","","Execute function `f` on each worker thread.",151,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",151,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"before_stop","","Execute function `f` before each thread stops.",151,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",151,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"builder"}}],[11,"build","","Create the configured `ThreadPool`.",151,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool",148,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",150,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",150,null],[11,"sender","","Return a reference to the sender handle",150,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",150,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",150,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",150,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",150,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",144,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",144,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",144,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",144,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",144,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",144,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",144,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",144,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",144,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",144,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"new","tokio::fs::file","Creates a blank new set of options ready for configuration.",141,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","See the underlying [`read`] call for details.",141,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","See the underlying [`write`] call for details.",141,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","See the underlying [`append`] call for details.",141,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","See the underlying [`truncate`] call for details.",141,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","See the underlying [`create`] call for details.",141,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","See the underlying [`create_new`] call for details.",141,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",141,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"openfuture"}}],[11,"connect","tokio::net","Create a new TCP stream connected to the specified address.",164,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",164,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",164,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",164,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",164,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",164,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",164,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",164,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",164,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"generics":["error"],"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",164,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",164,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",164,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",164,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",164,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",164,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",164,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",164,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",164,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",164,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",164,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",164,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",165,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",165,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",165,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",165,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",165,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",165,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",165,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",165,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",170,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",170,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",170,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",170,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",170,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",170,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",170,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",170,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",170,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",170,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",170,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",170,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",170,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",170,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",170,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",170,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",170,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",170,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",170,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",170,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",170,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",170,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",170,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",170,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",167,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",167,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",167,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",167,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",155,{"inputs":[],"output":{"generics":["reactor","error"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",155,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",155,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",155,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","error"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",155,{"inputs":[{"name":"self"}],"output":{"generics":["background","error"],"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",152,{"inputs":[],"output":{"name":"handle"}}],[11,"handle","","Returns a reference to the reactor handle.",156,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",156,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",156,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",156,null],[11,"new","","Create a new `Registration`.",154,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",154,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",154,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",154,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",154,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_read_ready","","Consume any pending read readiness event.",154,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",154,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_write_ready","","Consume any pending write readiness event.",154,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",153,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",153,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented","error"],"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",153,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",153,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",153,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",153,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",153,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",153,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",153,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","tokio::timer","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",158,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",161,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",161,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",161,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",161,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",161,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",161,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"shutdown","","Create an error representing a shutdown timer.",160,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",160,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",160,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",162,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",159,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",159,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",159,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",18,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"into_inner","tokio::io","Returns the underlying I/O object.",138,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",40,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",40,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",40,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",40,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",40,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",40,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",40,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",128,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",128,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",128,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",30,null],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",46,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"new","tokio::prelude::stream","Constructs a new, empty `FuturesUnordered`",41,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",41,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",41,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",99,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",66,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",55,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",64,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"send","","Sends a new value along this channel to the receiver.",127,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"futuresender"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",42,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",42,null],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",54,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",54,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",54,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",68,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",115,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",67,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",43,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",43,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",43,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll_future","tokio::prelude::task","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",125,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",125,null],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",125,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",125,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",125,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",125,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",125,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",125,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",125,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",51,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",124,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",50,null],[11,"is_current","","Returns `true` when called from within the context of the task.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",126,null],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",52,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",52,null],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",52,null],[11,"notify","","Notifies the task that last called `register`.",52,null],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",45,{"inputs":[{"name":"a"}],"output":{"name":"taskrc"}}],[11,"with","","Operate with a reference to the underlying data.",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}]],"paths":[[8,"Executor"],[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Handle"],[3,"Spawn"],[3,"Builder"],[3,"Builder"],[3,"Runtime"],[3,"Handle"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Executor"],[8,"Unpark"],[8,"EventSet"],[3,"Error"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"Wait"],[3,"IterMut"],[3,"TaskRc"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[3,"Done"],[3,"Task"],[3,"UnparkEvent"],[3,"AtomicTask"],[3,"Skip"],[3,"TakeWhile"],[3,"MapErr"],[3,"Fuse"],[3,"Buffered"],[3,"Peekable"],[3,"InspectErr"],[3,"Then"],[3,"Map"],[3,"Inspect"],[3,"SkipWhile"],[3,"SplitSink"],[3,"OrElse"],[3,"Take"],[3,"AndThen"],[3,"Flatten"],[3,"BufferUnordered"],[3,"Filter"],[3,"FromErr"],[3,"Chunks"],[3,"FilterMap"],[3,"SendError"],[3,"SelectOk"],[3,"AndThen"],[3,"Join4"],[3,"Fold"],[3,"Concat"],[3,"Join"],[3,"PollFn"],[3,"Flatten"],[3,"CatchUnwind"],[3,"FutureSender"],[3,"Join3"],[3,"Select2"],[3,"Collect"],[3,"Lazy"],[3,"Then"],[3,"Forward"],[3,"Concat2"],[3,"SelectAll"],[3,"Map"],[3,"Inspect"],[3,"ForEach"],[3,"MapErr"],[3,"SelectNext"],[3,"JoinAll"],[3,"StreamFuture"],[3,"LoopFn"],[3,"Fuse"],[3,"Select"],[3,"Join5"],[3,"FromErr"],[3,"Empty"],[3,"OrElse"],[3,"IterStream"],[3,"CatchUnwind"],[3,"IterResult"],[3,"IterOk"],[3,"Chain"],[3,"IntoStream"],[3,"Merge"],[3,"Select"],[3,"SplitStream"],[3,"Zip"],[3,"Repeat"],[3,"Receiver"],[3,"Unfold"],[3,"Empty"],[3,"Once"],[3,"PollFn"],[3,"FlattenStream"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"Sender"],[3,"ExecuteError"],[3,"WriteHalf"],[3,"ReadHalf"],[3,"Shutdown"],[3,"Copy"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"WriteAll"],[3,"Flush"],[3,"Lines"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"OpenOptions"],[3,"Stdout"],[3,"Stderr"],[3,"File"],[3,"Stdin"],[3,"CreateFuture"],[3,"OpenFuture"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Builder"],[3,"Handle"],[3,"PollEvented2"],[3,"Registration"],[3,"Reactor"],[3,"Background"],[3,"Turn"],[3,"Deadline"],[3,"Delay"],[3,"Error"],[3,"DeadlineError"],[3,"Interval"],[3,"ConnectFuture"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpFramed"],[3,"RecvDgram"],[3,"SendDgram"],[3,"UdpSocket"]]};
searchIndex["tokio_codec"] = {"doc":"Utilities for encoding and decoding frames.","items":[[8,"Decoder","tokio_codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",0,null],[16,"Error","","The type of unrecoverable frame decoding errors.",0,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",1,null],[16,"Error","","The type of encoding errors.",1,null],[10,"encode","","Encodes a frame into the buffer provided.",1,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",null,null],[12,"io","","The inner transport used to read bytes to and write bytes to",2,null],[12,"codec","","The codec",2,null],[12,"read_buf","","The buffer with read but unprocessed data.",2,null],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",null,null],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bytescodec"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",3,{"inputs":[],"output":{"name":"bytescodec"}}],[11,"decode","","",3,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"linescodec"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",4,{"inputs":[],"output":{"name":"linescodec"}}],[11,"decode","","",4,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"decode_eof","","",4,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"string"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"start_send","","",5,null],[11,"poll_complete","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",6,null],[11,"poll_complete","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",7,null],[11,"poll_complete","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",6,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"framed"}}],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",6,{"inputs":[{"name":"framedparts"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",6,{"inputs":[{"name":"self"}],"output":{"name":"framedparts"}}],[11,"new","","Create a new, default, `FramedParts`",2,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"framedparts"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",5,{"inputs":[{"name":"t"},{"name":"d"}],"output":{"name":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",7,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",7,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",7,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"FramedRead"],[3,"Framed"],[3,"FramedWrite"]]};
searchIndex["tokio_core"] = {"doc":"`Future`-powered I/O at the core of Tokio","items":[[0,"net","tokio_core","TCP/UDP bindings for `tokio-core`",null,null],[3,"TcpStream","tokio_core::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"TcpStreamNew","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `UdpCodec` trait to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"bind2","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"accept_std","","Like `accept`, except that it returns a raw `std::net::TcpStream`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_listener","","Create a new TCP listener from the standard library's TCP listener.",1,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",1,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",0,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"tcpstreamnew"}}],[11,"connect2","","Create a new TCP stream connected to the specified address.",0,{"inputs":[{"name":"socketaddr"}],"output":{"name":"tcpstreamnew"}}],[11,"from_stream","","Create a new `TcpStream` from a `net::TcpStream`.",0,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",0,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",0,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",0,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",0,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",0,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",0,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",0,null],[11,"read_buf","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"start_send","","",4,null],[11,"poll_complete","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"close","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new UDP socket bound to the specified address.",5,{"inputs":[{"name":"socketaddr"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_socket","","Creates a new `UdpSocket` from the previously bound socket provided.",5,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UdpSocket` object, using the provided `UdpCodec` to read and write the raw data.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",5,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in addr.",5,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",5,null],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read.",5,null],[11,"poll_read","","Test whether this socket is ready to be read or not.",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is ready to be written to or not.",5,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",5,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",5,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",5,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[8,"UdpCodec","","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",8,null],[16,"Out","","The type of frames to be encoded.",8,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",8,null],[10,"encode","","Encodes a frame into the buffer provided.",8,null],[0,"reactor","tokio_core","The core reactor driving all I/O",null,null],[3,"PollEvented","tokio_core::reactor","A concrete implementation of a stream of readiness notifications for I/O objects that originates from an event loop.",null,null],[3,"Timeout","","A future representing the notification that a timeout has occurred.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Core","","An event loop.",null,null],[3,"CoreId","","An unique ID for a Core",null,null],[3,"Remote","","Handle to an event loop, used to construct I/O objects, send messages, and otherwise interact indirectly with the event loop itself.",null,null],[3,"Handle","","A non-sendable handle to an event loop, useful for manufacturing instances of `LoopData`.",null,null],[11,"new","","Creates a new readiness stream associated with the provided `loop_handle` and for the given `source`.",9,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented"],"name":"result"}}],[11,"deregister","","Deregisters this source of events from the reactor core specified.",9,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Tests to see if this source is ready to be read from or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Tests to see if this source is ready to be written to or not.",9,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_ready","","Test to see whether this source fulfills any condition listed in `mask` provided.",9,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready"],"name":"async"}}],[11,"need_read","","Indicates to this source of events that the corresponding I/O object is no longer readable, but it needs to be.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"need_write","","Indicates to this source of events that the corresponding I/O object is no longer writable, but it needs to be.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"remote","","Returns a reference to the event loop handle that this readiness stream is associated with.",9,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",9,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",9,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"read","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new timeout which will fire at `dur` time into the future.",10,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"generics":["timeout"],"name":"result"}}],[11,"new_at","","Creates a new timeout which will fire at the time specified by `at`.",10,{"inputs":[{"name":"instant"},{"name":"handle"}],"output":{"generics":["timeout"],"name":"result"}}],[11,"reset","","Resets this timeout to an new timeout which will fire at the time specified by `at`.",10,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"new","","Creates a new interval which will fire at `dur` time into the future, and will repeat every `dur` interval after",11,{"inputs":[{"name":"duration"},{"name":"handle"}],"output":{"generics":["interval"],"name":"result"}}],[11,"new_at","","Creates a new interval which will fire at the time specified by `at`, and then will repeat every `dur` interval after",11,{"inputs":[{"name":"instant"},{"name":"duration"},{"name":"handle"}],"output":{"generics":["interval"],"name":"result"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"coreid"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",15,{"inputs":[],"output":{"generics":["core"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which cannot be sent across threads but can be used as a proxy to the event loop itself.",15,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"runtime","","Returns a reference to the runtime backing the instance",15,{"inputs":[{"name":"self"}],"output":{"name":"runtime"}}],[11,"remote","","Generates a remote handle to this event loop which can be used to spawn tasks from other threads into this event loop.",15,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"run","","Runs a future until completion, driving the event loop while we're otherwise waiting for the future to complete.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",15,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":null}],[11,"id","","Get the ID of this loop",15,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"execute","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawns a new future into the event loop this remote is associated with.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",13,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"handle","","Attempts to \"promote\" this remote to a handle, if possible.",13,{"inputs":[{"name":"self"}],"output":{"generics":["handle"],"name":"option"}}],[11,"execute","","",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_tokio_handle","","Returns a reference to the new Tokio handle",14,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"remote","","Returns a reference to the underlying remote handle to the event loop.",14,{"inputs":[{"name":"self"}],"output":{"name":"remote"}}],[11,"spawn","","Spawns a new future on the event loop this handle is associated with.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn_send","","Spawns a new future onto the threadpool",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn_fn","","Spawns a closure on this event loop.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"id","","Return the ID of the represented Core",14,{"inputs":[{"name":"self"}],"output":{"name":"coreid"}}],[11,"execute","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_nb","tokio_core","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null]],"paths":[[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"TcpStreamNew"],[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"],[8,"UdpCodec"],[3,"PollEvented"],[3,"Timeout"],[3,"Interval"],[3,"CoreId"],[3,"Remote"],[3,"Handle"],[3,"Core"]]};
searchIndex["tokio_executor"] = {"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"inputs":[],"output":{"generics":["enter","entererror"],"name":"result"}}],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"with_default","","Set the default executor for the duration of the closure",null,{"inputs":[{"name":"t"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"current","","Returns a handle to the default executor for the current context.",2,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",2,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[0,"park","","Abstraction over blocking and unblocking the current thread.",null,null],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",null,null],[8,"Park","","Block the current thread.",null,null],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,null],[16,"Error","","Error returned by `park`",3,null],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,null],[10,"park","","Block the current thread unless or until the token is available.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"park_timeout","","Park the current thread for at most `duration`.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",null,null],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unparkthread"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,{"inputs":[],"output":{"name":"parkthread"}}],[11,"unpark","","",5,null],[11,"park","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","tokio_executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",8,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_fs"] = {"doc":"Asynchronous filesystem manipulation operations (and stdin, stdout, stderr).","items":[[3,"OpenOptions","tokio_fs","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"file","","Types for working with [`File`].",null,null],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"File","","A reference to an open file on the filesystem.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","tokio_fs","",2,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",2,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","See the underlying [`read`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","See the underlying [`write`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","See the underlying [`append`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","See the underlying [`truncate`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","See the underlying [`create`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","See the underlying [`create_new`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"openfuture"}}],[11,"from","","",2,{"inputs":[{"name":"stdopenoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","tokio_fs::file","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",3,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",3,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",3,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"poll"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",3,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"poll"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",3,{"inputs":[{"name":"self"}],"output":{"generics":["file","error"],"name":"poll"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",3,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["error"],"name":"poll"}}],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",3,{"inputs":[{"name":"self"}],"output":{"name":"stdfile"}}],[11,"read","","",3,null],[11,"prepare_uninitialized_buffer","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_fs","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",4,null],[11,"prepare_uninitialized_buffer","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"CreateFuture"],[3,"OpenFuture"],[3,"OpenOptions"],[3,"File"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"]]};
searchIndex["tokio_io"] = {"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"allowstdio"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",8,null],[11,"write_fmt","","",8,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"shutdown","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",8,null],[11,"read_to_end","","",8,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",8,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Returns the underlying I/O object.",9,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",10,null],[11,"read_buf","","",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",12,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",13,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",13,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_proto"] = {"doc":"This library provides a toolkit for rapid protocol development and usage, working with the rest of the Tokio stack.","items":[[3,"TcpClient","tokio_proto","Builds client connections to external services.",null,null],[3,"Connect","","A future for establishing a client connection.",null,null],[3,"TcpServer","","A builder for TCP servers.",null,null],[0,"pipeline","","Pipelined RPC protocols.",null,null],[3,"ClientService","tokio_proto::pipeline","Client `Service` for simple pipeline protocols",null,null],[3,"Pipeline","","A marker used to flag protocols as being pipelined RPC.",null,null],[8,"ClientProto","","A pipelined client protocol.",null,null],[16,"Request","","Request messages.",0,null],[16,"Response","","Response messages.",0,null],[16,"Transport","","The message transport, which works with I/O objects of type `T`.",0,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",0,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",0,null],[8,"ServerProto","","A pipelined server protocol.",null,null],[16,"Request","","Request messages.",1,null],[16,"Response","","Response messages.",1,null],[16,"Transport","","The message transport, which works with I/O objects of type `T`.",1,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",1,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",1,null],[0,"multiplex","tokio_proto","Multiplexed RPC protocols.",null,null],[3,"ClientService","tokio_proto::multiplex","Client `Service` for simple multiplex protocols",null,null],[3,"Multiplex","","A marker used to flag protocols as being multiplexed RPC.",null,null],[6,"RequestId","","Identifies a request / response thread",null,null],[8,"ClientProto","","An multiplexed client protocol.",null,null],[16,"Request","","Request messages.",2,null],[16,"Response","","Response messages.",2,null],[16,"Transport","","The message transport, which usually take `T` as a parameter.",2,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",2,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",2,null],[8,"ServerProto","","An multiplexed server protocol.",null,null],[16,"Request","","Request messages.",3,null],[16,"Response","","Response messages.",3,null],[16,"Transport","","The message transport, which usually take `T` as a parameter.",3,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",3,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",3,null],[0,"streaming","tokio_proto","Streaming protocols.",null,null],[3,"Body","tokio_proto::streaming","Body stream",null,null],[4,"Message","","Message sent and received from a multiplexed service",null,null],[13,"WithoutBody","","Has no associated streaming body",4,null],[13,"WithBody","","Has associated streaming body",4,null],[0,"pipeline","","Pipelined, streaming protocols.",null,null],[3,"StreamingPipeline","tokio_proto::streaming::pipeline","A marker used to flag protocols as being streaming and pipelined.",null,null],[4,"Frame","","A pipelined protocol frame",null,null],[13,"Message","","Either a request or a response",5,null],[12,"message","tokio_proto::streaming::pipeline::Frame","The message value",5,null],[12,"body","","Set to true when body frames will follow",5,null],[13,"Body","tokio_proto::streaming::pipeline","Body frame. None indicates that the body is done streaming.",5,null],[12,"chunk","tokio_proto::streaming::pipeline::Frame","Body chunk. Setting to `None` indicates that the body is done streaming and there will be no further body frames sent with the given request ID.",5,null],[13,"Error","tokio_proto::streaming::pipeline","Error",5,null],[12,"error","tokio_proto::streaming::pipeline::Frame","Error value",5,null],[11,"fmt","tokio_proto::streaming::pipeline","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",5,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[0,"advanced","","Provides the substrate for implementing pipelined, streaming protocols.",null,null],[3,"Pipeline","tokio_proto::streaming::pipeline::advanced","Provides protocol pipelining functionality in a generic way over clients and servers. Used internally by `pipeline::Client` and `pipeline::Server`.",null,null],[6,"PipelineMessage","","Message used to communicate through the multiplex dispatch",null,null],[8,"Dispatch","","Dispatch messages from the transport to the service",null,null],[16,"Io","","Type of underlying I/O object",6,null],[16,"In","","Message written to transport",6,null],[16,"BodyIn","","Body written to transport",6,null],[16,"Out","","Messages read from the transport",6,null],[16,"BodyOut","","Outbound body frame",6,null],[16,"Error","","Transport error",6,null],[16,"Stream","","Body stream written to transport",6,null],[16,"Transport","","Transport type",6,null],[10,"transport","","Mutable reference to the transport",6,null],[10,"dispatch","","Process an out message",6,{"inputs":[{"name":"self"},{"generics":["body"],"name":"pipelinemessage"}],"output":{"name":"result"}}],[10,"poll","","Poll the next completed message",6,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[10,"has_in_flight","","RPC currently in flight TODO: Get rid of",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new pipeline `Pipeline` dispatcher with the given service and transport",7,{"inputs":[{"name":"t"}],"output":{"name":"pipeline"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"ClientProto","tokio_proto::streaming::pipeline","A streaming, pipelined client protocol.",null,null],[16,"Request","","The type of request headers.",8,null],[16,"RequestBody","","The type of request body chunks.",8,null],[16,"Response","","The type of response headers.",8,null],[16,"ResponseBody","","The type of response body chunks.",8,null],[16,"Error","","The type of error frames.",8,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",8,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",8,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",8,null],[8,"ServerProto","","A streaming, pipelined server protocol.",null,null],[16,"Request","","Request headers.",9,null],[16,"RequestBody","","Request body chunks.",9,null],[16,"Response","","Response headers.",9,null],[16,"ResponseBody","","Response body chunks.",9,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",9,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",9,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",9,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",9,null],[8,"Transport","","Additional transport details relevant to streaming, pipelined protocols.",null,null],[11,"tick","","Allow the transport to do miscellaneous work (e.g., sending ping-pong messages) that is not directly connected to sending or receiving frames.",10,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel interest in the current stream",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"multiplex","tokio_proto::streaming","Pipelined, multiplexed protocols.",null,null],[3,"StreamingMultiplex","tokio_proto::streaming::multiplex","A marker used to flag protocols as being streaming and multiplexed.",null,null],[4,"Frame","","A multiplexed protocol frame",null,null],[13,"Message","","Either a request or a response.",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"message","","The message value",12,null],[12,"body","","Set to true when body frames will follow with the same request ID.",12,null],[12,"solo","","Set to `true` when this message does not have a pair in the other direction",12,null],[13,"Body","tokio_proto::streaming::multiplex","Body frame.",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"chunk","","Body chunk. Setting to `None` indicates that the body is done streaming and there will be no further body frames sent with the given request ID.",12,null],[13,"Error","tokio_proto::streaming::multiplex","Error",12,null],[12,"id","tokio_proto::streaming::multiplex::Frame","Message exchange identifier",12,null],[12,"error","","Error value",12,null],[11,"fmt","tokio_proto::streaming::multiplex","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"request_id","","Return the request ID associated with the frame.",12,{"inputs":[{"name":"self"}],"output":{"name":"requestid"}}],[11,"unwrap_msg","","Unwraps a frame, yielding the content of the `Message`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_body","","Unwraps a frame, yielding the content of the `Body`.",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_err","","Unwraps a frame, yielding the content of the `Error`.",12,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[0,"advanced","","Provides the substrate for implementing multiplexed, streaming protocols.",null,null],[3,"Multiplex","tokio_proto::streaming::multiplex::advanced","Task that drives multiplexed protocols",null,null],[3,"MultiplexMessage","","Message used to communicate through the multiplex dispatch",null,null],[12,"id","","Request ID",13,null],[12,"message","","Message",13,null],[12,"solo","","True if message has no pair (request / response)",13,null],[8,"Dispatch","","Dispatch messages from the transport to the service",null,null],[16,"Io","","Type of underlying I/O object",14,null],[16,"In","","Messages written to the transport",14,null],[16,"BodyIn","","Inbound body frame",14,null],[16,"Out","","Messages read from the transport",14,null],[16,"BodyOut","","Outbound body frame",14,null],[16,"Error","","Transport error",14,null],[16,"Stream","","Inbound body stream type",14,null],[16,"Transport","","Transport type",14,null],[10,"transport","","Mutable reference to the transport",14,null],[10,"poll","","Poll the next available message",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[10,"poll_ready","","The `Dispatch` is ready to accept another message",14,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[10,"dispatch","","Process an out message",14,{"inputs":[{"name":"self"},{"generics":["body"],"name":"multiplexmessage"}],"output":{"name":"result"}}],[10,"cancel","","Cancel interest in the exchange identified by RequestId",14,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new pipeline `Multiplex` dispatcher with the given service and transport",15,{"inputs":[{"name":"t"}],"output":{"name":"multiplex"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new MultiplexMessage",13,{"inputs":[{"name":"requestid"},{"name":"message"}],"output":{"name":"multiplexmessage"}}],[11,"error","","Create a new errored MultiplexMessage",13,{"inputs":[{"name":"requestid"},{"name":"e"}],"output":{"name":"multiplexmessage"}}],[6,"RequestId","tokio_proto::streaming::multiplex","Identifies a request / response thread",null,null],[8,"ClientProto","","A streaming, multiplexed client protocol.",null,null],[16,"Request","","Request headers.",16,null],[16,"RequestBody","","Request body chunks.",16,null],[16,"Response","","Response headers.",16,null],[16,"ResponseBody","","Response body chunks.",16,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",16,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",16,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",16,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",16,null],[8,"ServerProto","","A streaming, multiplexed server protocol.",null,null],[16,"Request","","Request headers.",17,null],[16,"RequestBody","","Request body chunks.",17,null],[16,"Response","","Response headers.",17,null],[16,"ResponseBody","","Response body chunks.",17,null],[16,"Error","","Errors, which are used both for error frames and for the service itself.",17,null],[16,"Transport","","The frame transport, which usually take `T` as a parameter.",17,null],[16,"BindTransport","","A future for initializing a transport from an I/O object.",17,null],[10,"bind_transport","","Build a transport from the given I/O object, using `self` for any configuration.",17,null],[8,"Transport","","Additional transport details relevant to streaming, multiplexed protocols.",null,null],[11,"tick","","Allow the transport to do miscellaneous work (e.g., sending ping-pong messages) that is not directly connected to sending or receiving frames.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel interest in the exchange identified by RequestId",18,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"result"}}],[11,"poll_write_body","","Tests to see if this I/O object may accept a body frame for the given request ID",18,{"inputs":[{"name":"self"},{"name":"requestid"}],"output":{"name":"async"}}],[11,"dispatching_body","","Invoked before the multiplexer dispatches the body chunk to the body stream.",18,{"inputs":[{"name":"self"},{"name":"requestid"},{"name":"readbody"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","tokio_proto::streaming","Return an empty body stream",20,{"inputs":[],"output":{"name":"body"}}],[11,"pair","","Return a body stream with an associated sender half",20,null],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"from","","",20,{"inputs":[{"generics":["result"],"name":"receiver"}],"output":{"name":"body"}}],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"body"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the value and returns the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"take_body","","If the `Message` value has an associated body stream, return it. The original `Message` value will then become a `WithoutBody` variant.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"util","tokio_proto","Utilities for building protocols",null,null],[0,"client_proxy","tokio_proto::util","Utilities for building protocol clients",null,null],[3,"ClientProxy","tokio_proto::util::client_proxy","Client `Service` for pipeline or multiplex protocols",null,null],[3,"Response","","Response future returned from a client",null,null],[5,"pair","","Return a client handle and a handle used to receive requests on",null,{"inputs":[],"output":{"name":"pair"}}],[6,"Pair","","A client / receiver pair",null,null],[6,"Receiver","","Receive requests submitted to the client",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"call","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tokio_proto","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"new","","Create a builder for the given client protocol.",23,{"inputs":[{"name":"p"}],"output":{"name":"tcpclient"}}],[11,"connect","","Establish a connection to the given address.",23,{"inputs":[{"name":"self"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connect"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Starts building a server for the given protocol and address, with default configuration.",25,{"inputs":[{"name":"p"},{"name":"socketaddr"}],"output":{"name":"tcpserver"}}],[11,"addr","","Set the address for the server.",25,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":null}],[11,"threads","","Set the number of threads running simultaneous event loops (Unix only).",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"serve","","Start up the server, providing the given service on it.",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"with_handle","","Start up the server, providing the given service on it, and providing access to the event loop handle.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"BindServer","","Binds a service to an I/O object.",null,null],[16,"ServiceRequest","","The request type for the service.",26,null],[16,"ServiceResponse","","The response type for the service.",26,null],[16,"ServiceError","","The error type for the service.",26,null],[10,"bind_server","","Bind the service.",26,{"inputs":[{"name":"self"},{"name":"handle"},{"name":"t"},{"name":"s"}],"output":null}],[8,"BindClient","","Binds an I/O object as a client of a service.",null,null],[16,"ServiceRequest","","The request type for the service.",27,null],[16,"ServiceResponse","","The response type for the service.",27,null],[16,"ServiceError","","The error type for the service.",27,null],[16,"BindClient","","The bound service.",27,null],[10,"bind_client","","Bind an I/O object as a service.",27,null],[11,"clone","tokio_proto::pipeline","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"call","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"call","tokio_proto::multiplex","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"ClientProto"],[8,"ServerProto"],[8,"ClientProto"],[8,"ServerProto"],[4,"Message"],[4,"Frame"],[8,"Dispatch"],[3,"Pipeline"],[8,"ClientProto"],[8,"ServerProto"],[8,"Transport"],[3,"StreamingPipeline"],[4,"Frame"],[3,"MultiplexMessage"],[8,"Dispatch"],[3,"Multiplex"],[8,"ClientProto"],[8,"ServerProto"],[8,"Transport"],[3,"StreamingMultiplex"],[3,"Body"],[3,"ClientProxy"],[3,"Response"],[3,"TcpClient"],[3,"Connect"],[3,"TcpServer"],[8,"BindServer"],[8,"BindClient"],[3,"ClientService"],[3,"Pipeline"],[3,"ClientService"],[3,"Multiplex"]]};
searchIndex["tokio_reactor"] = {"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[3,"Reactor","","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",null,null],[5,"with_default","","Set the default reactor for the duration of the closure",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","","Returns a reference to the reactor handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Registration`.",2,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_read_ready","","Consume any pending read readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_write_ready","","Consume any pending write readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"setfallbackerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",6,{"inputs":[],"output":{"generics":["reactor"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",6,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",6,{"inputs":[{"name":"self"}],"output":{"generics":["background"],"name":"result"}}],[11,"unpark","","",6,null],[11,"park","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",3,{"inputs":[],"output":{"name":"handle"}}],[11,"unpark","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",3,{"inputs":[],"output":{"name":"handle"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_service"] = {"doc":"Definition of the core `Service` trait to Tokio","items":[[8,"Service","tokio_service","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",0,null],[16,"Response","","Responses given by the service.",0,null],[16,"Error","","Errors produced by the service.",0,null],[16,"Future","","The future response value.",0,null],[10,"call","","Process the request and return the response asynchronously.",0,null],[8,"NewService","","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",1,null],[16,"Response","","Responses given by the service",1,null],[16,"Error","","Errors produced by the service",1,null],[16,"Instance","","The `Service` value created by this factory",1,null],[10,"new_service","","Create and return a new service value.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"Service"],[8,"NewService"]]};
searchIndex["tokio_tcp"] = {"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",1,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",2,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",2,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",2,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",2,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",2,null],[11,"read_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}]],"paths":[[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"] = {"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",null,null],[3,"Builder","","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[3,"Worker","","Thread worker",null,null],[5,"blocking","","Enter a blocking section of code.",null,{"inputs":[{"name":"f"}],"output":{"generics":["blockingerror"],"name":"poll"}}],[0,"park","","Thread parking utilities.",null,null],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",null,null],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultPark` instance.",0,{"inputs":[],"output":{"name":"defaultpark"}}],[11,"unpark","","",0,null],[11,"park","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","tokio_threadpool","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",4,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"keep_alive","","Set the worker thread keep alive duration",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"self"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"around_worker","","Execute function `f` on each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each thread stops.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Create the configured `ThreadPool`.",4,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn a future onto the thread pool",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",5,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",7,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sender","","Return a reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","Returns a reference to the worker's identifier.",8,{"inputs":[{"name":"self"}],"output":{"name":"workerid"}}],[11,"run","","Run the worker",8,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"],[3,"BlockingError"],[3,"Builder"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Worker"]]};
searchIndex["tokio_timer"] = {"doc":"Utilities for scheduling work to happen after a period of time.","items":[[3,"Deadline","tokio_timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[5,"sleep","","Create a Future that completes in `duration` from now.",null,{"inputs":[{"name":"duration"}],"output":{"name":"delay"}}],[0,"clock","","A configurable source of time.",null,null],[3,"Clock","tokio_timer::clock","A handle to a source of time.",null,null],[5,"now","","Returns an `Instant` corresponding to \"now\".",null,{"inputs":[],"output":{"name":"instant"}}],[5,"with_default","","Set the default clock for the duration of the closure.",null,{"inputs":[{"name":"clock"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"clock"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"clock"}}],[11,"new","","Return a new `Clock` instance that uses the current execution context's source of time.",0,{"inputs":[],"output":{"name":"clock"}}],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the source of time.",0,{"inputs":[{"name":"t"}],"output":{"name":"clock"}}],[11,"system","","Return a new `Clock` instance that uses `Instant::now()` as the source of time.",0,{"inputs":[],"output":{"name":"clock"}}],[11,"now","","Returns an instant corresponding to \"now\" by using the instance's source of time.",0,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Now","","Returns `Instant` values representing the current instant in time.",null,null],[10,"now","","Returns an instant corresponding to \"now\".",1,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[0,"timer","tokio_timer","Timer implementation.",null,null],[3,"Handle","tokio_timer::timer","Handle to timer instance.",null,null],[3,"SystemNow","","A handle to a source of time.",null,null],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",null,null],[3,"Turn","","Return value from the `turn` method on `Timer`.",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"current","","Returns a handle to the current timer.",2,{"inputs":[],"output":{"name":"handle"}}],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",2,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",2,{"inputs":[{"name":"self"},{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",3,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"self"}}],[11,"handle","","Returns a handle to the timer.",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"turn","","Performs one iteration of the timer loop.",3,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"unpark","","",3,null],[11,"park","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_timer","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",5,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",6,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",6,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",6,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",7,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",7,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Create an error representing a shutdown timer.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",9,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}]],"paths":[[3,"Clock"],[8,"Now"],[3,"Handle"],[3,"Timer"],[3,"Turn"],[3,"Deadline"],[3,"DeadlineError"],[3,"Delay"],[3,"Error"],[3,"Interval"]]};
searchIndex["tokio_tls"] = {"doc":"Async TLS streams","items":[[3,"TlsStream","tokio_tls","A wrapper around an underlying raw stream which implements the TLS or SSL protocol.",null,null],[3,"ConnectAsync","","Future returned from `TlsConnectorExt::connect_async` which will resolve once the connection handshake has finished.",null,null],[3,"AcceptAsync","","Future returned from `TlsAcceptorExt::accept_async` which will resolve once the accept handshake has finished.",null,null],[8,"TlsConnectorExt","","Extension trait for the `TlsConnector` type in the `native_tls` crate.",null,null],[10,"connect_async","","Connects the provided stream with this connector, assuming the provided domain.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"connectasync"}}],[10,"danger_connect_async_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect_async`, but does not validate the server's domain name against its certificate.",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"connectasync"}}],[8,"TlsAcceptorExt","","Extension trait for the `TlsAcceptor` type in the `native_tls` crate.",null,null],[10,"accept_async","","Accepts a new client connection with the provided stream.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"acceptasync"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Get access to the internal `native_tls::TlsStream` stream which also transitively allows access to `S`.",2,{"inputs":[{"name":"self"}],"output":{"name":"tlsstream"}}],[11,"get_mut","","Get mutable access to the internal `native_tls::TlsStream` stream which also transitively allows mutable access to `S`.",2,{"inputs":[{"name":"self"}],"output":{"name":"tlsstream"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tlsstream","error"],"name":"poll"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["tlsstream","error"],"name":"poll"}}]],"paths":[[8,"TlsConnectorExt"],[8,"TlsAcceptorExt"],[3,"TlsStream"],[3,"ConnectAsync"],[3,"AcceptAsync"]]};
searchIndex["tokio_udp"] = {"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",0,null],[11,"poll_complete","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["try_lock"] = {"doc":"A light-weight lock guarded by an atomic boolean.","items":[[3,"TryLock","try_lock","A light-weight lock guarded by an atomic boolean.",null,null],[3,"Locked","","A locked value acquired from a `TryLock`.",null,null],[11,"new","","Create a `TryLock` around the value.",0,{"inputs":[{"name":"t"}],"output":{"name":"trylock"}}],[11,"try_lock","","Try to acquire the lock of this value.",0,{"inputs":[{"name":"self"}],"output":{"generics":["locked"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryLock"],[3,"Locked"]]};
searchIndex["ucd_util"] = {"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["string"],"name":"option"}}],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",null,{"inputs":[{"name":"propertytable"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[5,"property_values","","Find the set of possible property values for a given property.",null,{"inputs":[{"name":"propertyvaluetable"},{"name":"str"}],"output":{"generics":["propertyvalues"],"name":"option"}}],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",null,{"inputs":[{"name":"propertyvalues"},{"name":"str"}],"output":{"generics":["str"],"name":"option"}}],[6,"PropertyTable","","The type of a property name table.",null,null],[6,"PropertyValueTable","","Type of a property value table.",null,null],[6,"PropertyValues","","A mapping of property values for a specific property.",null,null],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",null,null],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",null,null]],"paths":[]};
searchIndex["unicase"] = {"doc":"UniCase","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",null,null],[5,"eq","","Compare two string-like types for case-less equality, using unicode folding.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"bool"}}],[5,"eq_ascii","","Compare two string-like types for case-less equality, ignoring ASCII case.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"s"}],"output":{"name":"ascii"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["ascii"],"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unicase"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ascii"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `UniCase`.",1,{"inputs":[{"name":"s"}],"output":{"name":"unicase"}}],[11,"unicode","","Creates a new `UniCase`, skipping the ASCII check.",1,{"inputs":[{"name":"s"}],"output":{"name":"unicase"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unicase"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["unicase"],"name":"result"}}]],"paths":[[3,"Ascii"],[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"ParagraphInfo","unicode_bidi","Bidi information about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",0,null],[12,"level","","The paragraph embedding level.",0,null],[3,"InitialInfo","","Initial bidi information of the text.",null,null],[12,"text","","The text",1,null],[12,"original_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",1,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",1,null],[3,"BidiInfo","","Bidi information of the text.",null,null],[12,"text","","The text",2,null],[12,"original_classes","","The BidiClass of the character at each byte in the text.",2,null],[12,"levels","","The directional embedding level of each byte in the text.",2,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",2,null],[4,"BidiClass","","Represents values of the Unicode character property `Bidi_Class`, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the `BidiClass` of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[0,"deprecated","","This module holds deprecated assets only.",null,null],[5,"visual_runs","unicode_bidi::deprecated","Find the level runs within a line and return them in visual order.",null,null],[0,"format_chars","unicode_bidi","Directional Formatting Characters",null,null],[17,"ALM","unicode_bidi::format_chars","ARABIC LETTER MARK",null,null],[17,"LRM","","LEFT-TO-RIGHT MARK",null,null],[17,"RLM","","RIGHT-TO-LEFT MARK",null,null],[17,"LRI","","LEFT‑TO‑RIGHT ISOLATE",null,null],[17,"RLI","","RIGHT‑TO‑LEFT ISOLATE",null,null],[17,"FSI","","FIRST STRONG ISOLATE",null,null],[17,"PDI","","POP DIRECTIONAL ISOLATE",null,null],[17,"LRE","","LEFT-TO-RIGHT EMBEDDING",null,null],[17,"RLE","","RIGHT-TO-LEFT EMBEDDING",null,null],[17,"PDF","","POP DIRECTIONAL FORMATTING",null,null],[17,"LRO","","LEFT-TO-RIGHT OVERRIDE",null,null],[17,"RLO","","RIGHT-TO-LEFT OVERRIDE",null,null],[0,"level","unicode_bidi","Bidi Embedding Level",null,null],[3,"Level","unicode_bidi::level","Embedding Level",null,null],[4,"Error","","Errors that can occur on Level creation or mutation",null,null],[13,"OutOfRangeNumber","","Out-of-range (invalid) embedding level number.",4,null],[5,"has_rtl","","If levels has any RTL (odd) level",null,null],[17,"LTR_LEVEL","","",null,null],[17,"RTL_LEVEL","","",null,null],[17,"MAX_EXPLICIT_DEPTH","","During explicit level resolution, embedding level can go as high as `max_depth`.",null,null],[17,"MAX_IMPLICIT_DEPTH","","During implicit level resolution, embedding level can go as high as `max_depth + 1`.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ltr","","New LTR level with smallest number value (0).",5,{"inputs":[],"output":{"name":"level"}}],[11,"rtl","","New RTL level with smallest number value (1).",5,{"inputs":[],"output":{"name":"level"}}],[11,"max_implicit_depth","","Maximum depth of the directional status stack during implicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"max_explicit_depth","","Maximum depth of the directional status stack during explicit resolutions.",5,{"inputs":[],"output":{"name":"u8"}}],[11,"new","","Create new level, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_explicit","","Create new level, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"number","","The level number.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"is_ltr","","If this level is left-to-right.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_rtl","","If this level is right-to-left.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raise","","Raise level by `amount`, fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"raise_explicit","","Raise level by `amount`, fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"lower","","Lower level by `amount`, fail if number goes below zero.",5,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_explicit_next_ltr","","The next LTR (even) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_explicit_next_rtl","","The next RTL (odd) level greater than this, or fail if number is larger than `max_depth`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"new_lowest_ge_rtl","","The lowest RTL (odd) level greater than or equal to this, or fail if number is larger than `max_depth + 1`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["level","error"],"name":"result"}}],[11,"bidi_class","","Generate a character type based on a level (as specified in steps X10 and N2).",5,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"vec","","",5,null],[11,"into","","Convert to the level number",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from","","Create level by number",5,{"inputs":[{"name":"u8"}],"output":{"name":"level"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","unicode_bidi","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","","A maximal substring of characters with the same embedding level.",null,null],[17,"UNICODE_VERSION","","The Unicode version of data",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"initialinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Find the paragraphs and BidiClasses in a string of text.",1,{"inputs":[{"name":"str"},{"generics":["level"],"name":"option"}],"output":{"name":"initialinfo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"new","","Split the text into paragraphs and determine the bidi embedding levels for each paragraph.",2,{"inputs":[{"name":"str"},{"generics":["level"],"name":"option"}],"output":{"name":"bidiinfo"}}],[11,"reordered_levels","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per byte.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["level"],"name":"vec"}}],[11,"reordered_levels_per_char","","Re-order a line based on resolved levels and return only the embedding levels, one `Level` per character.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["level"],"name":"vec"}}],[11,"reorder_line","","Re-order a line based on resolved levels and return the line in display order.",2,{"inputs":[{"name":"self"},{"name":"paragraphinfo"},{"generics":["usize"],"name":"range"}],"output":{"generics":["str"],"name":"cow"}}],[11,"visual_runs","","Find the level runs within a line and return them in visual order.",2,null],[11,"has_rtl","","If processed text has any computed RTL levels",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"BidiClass"],[4,"Error"],[3,"Level"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[3,"StreamSafe","","UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in NFKD and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.",null,null],[4,"IsNormalized","","The QuickCheck algorithm can quickly determine if a text is or isn't normalized without any allocations in many cases, but it has to be able to return `Maybe` when a full decomposition and recomposition is necessary.",null,null],[13,"Yes","","The text is definitely normalized.",0,null],[13,"No","","The text is definitely not normalized.",0,null],[13,"Maybe","","The text may be normalized.",0,null],[5,"is_nfc","","Authoritatively check if a string is in NFC.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfc_quick","","Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary.  In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[5,"is_nfc_stream_safe","","Authoritatively check if a string is Stream-Safe NFC.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfc_stream_safe_quick","","Quickly check if a string is Stream-Safe NFC.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[5,"is_nfd","","Authoritatively check if a string is in NFD.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfd_quick","","Quickly check if a string is in NFD.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[5,"is_nfd_stream_safe","","Authoritatively check if a string is Stream-Safe NFD.",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_nfd_stream_safe_quick","","Quickly check if a string is Stream-Safe NFD.",null,{"inputs":[{"name":"i"}],"output":{"name":"isnormalized"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isnormalized"}],"output":{"name":"bool"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"generics":["char"],"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",4,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",4,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",4,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",4,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"stream_safe","","An Iterator over the string with Conjoining Grapheme Joiner characters inserted according to the Stream-Safe Text Process (UAX15-D4)",4,{"inputs":[{"name":"self"}],"output":{"name":"streamsafe"}}]],"paths":[[4,"IsNormalized"],[3,"Decompositions"],[3,"Recompositions"],[3,"StreamSafe"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"GraphemeCursor","","Cursor-based segmenter for grapheme clusters.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[4,"GraphemeIncomplete","","An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.",null,null],[13,"PreContext","","More pre-context is needed. The caller should call `provide_context` with a chunk ending at the offset given, then retry the query. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"PrevChunk","","When requesting `prev_boundary`, the cursor is moving past the beginning of the current chunk, so the chunk before that is requested. This will only be returned if the `chunk_start` parameter is nonzero.",0,null],[13,"NextChunk","","When requesting `next_boundary`, the cursor is moving past the end of the current chunk, so the chunk after that is requested. This will only be returned if the chunk ends before the `len` parameter provided on creation of the cursor.",0,null],[13,"InvalidOffset","","An error returned when the chunk given does not contain the cursor position.",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"size_hint","","",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"graphemecursor"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"graphemeincomplete"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new cursor. The string and initial offset are given at creation time, but the contents of the string are not. The `is_extended` parameter controls whether extended grapheme clusters are selected.",3,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"graphemecursor"}}],[11,"set_cursor","","Set the cursor to a new location in the same string.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"cur_cursor","","The current offset of the cursor. Equal to the last value provided to `new()` or `set_cursor()`, or returned from `next_boundary()` or `prev_boundary()`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"provide_context","","Provide additional pre-context when it is needed to decide a boundary. The end of the chunk must coincide with the value given in the `GraphemeIncomplete::PreContext` request.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":null}],[11,"is_boundary","","Determine whether the current cursor location is a grapheme cluster boundary. Only a part of the string need be supplied. If `chunk_start` is nonzero or the length of `chunk` is not equal to `len` on creation, then this method may return `GraphemeIncomplete::PreContext`. The caller should then call `provide_context` with the requested chunk, then retry calling this method.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["bool","graphemeincomplete"],"name":"result"}}],[11,"next_boundary","","Find the next boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::NextChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk following the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"prev_boundary","","Find the previous boundary after the current cursor position. Only a part of the string need be supplied. If the chunk is incomplete, then this method might return `GraphemeIncomplete::PreContext` or `GraphemeIncomplete::PrevChunk`. In the former case, the caller should call `provide_context` with the requested chunk, then retry. In the latter case, the caller should provide the chunk preceding the one given, then retry.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"generics":["option","graphemeincomplete"],"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_str","","View the underlying data (the part yet to be iterated) as a slice of the original string.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",7,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"GraphemeCursor"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"i":[{"n":"self"}]}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"i":[{"n":"self"}],"o":{"n":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"i":[{"n":"self"}],"o":{"n":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA if this is the host of a special URL, or percent encoded for non-special URLs. Hosts for non-special URLs are also called opaque hosts.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"SyntaxViolation","","Non-fatal syntax violations that can occur during parsing.",null,null],[13,"Backslash","","",4,null],[13,"C0SpaceIgnored","","",4,null],[13,"EmbeddedCredentials","","",4,null],[13,"ExpectedDoubleSlash","","",4,null],[13,"ExpectedFileDoubleSlash","","",4,null],[13,"FileWithHostAndWindowsDrive","","",4,null],[13,"NonUrlCodePoint","","",4,null],[13,"NullInFragment","","",4,null],[13,"PercentDecode","","",4,null],[13,"TabOrNewlineIgnored","","",4,null],[13,"UnencodedAtSign","","",4,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",5,null],[13,"AfterScheme","","",5,null],[13,"BeforeUsername","","",5,null],[13,"AfterUsername","","",5,null],[13,"BeforePassword","","",5,null],[13,"AfterPassword","","",5,null],[13,"BeforeHost","","",5,null],[13,"AfterHost","","",5,null],[13,"BeforePort","","",5,null],[13,"AfterPort","","",5,null],[13,"BeforePath","","",5,null],[13,"AfterPath","","",5,null],[13,"BeforeQuery","","",5,null],[13,"AfterQuery","","",5,null],[13,"BeforeFragment","","",5,null],[13,"AfterFragment","","",5,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_opaque","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"hostandport"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"syntaxviolation"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"syntaxviolation"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"generics":["position"],"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",10,null],[16,"Finished","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",11,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut_string","url","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",15,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"custom_encoding_override","","Set the character encoding to be used for names and values before percent-encoding.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[11,"clone","url","",9,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",16,{"inputs":[{"name":"self"},{"generics":["url"],"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors, passing a static string description.  This method is deprecated in favor of `syntax_violation_callback` and is implemented as an adaptor for the latter, passing the `SyntaxViolation` description. Only the last value passed to either method will be used by a parser.",16,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"option"}],"output":{"name":"self"}}],[11,"syntax_violation_callback","","Call the provided function or closure for a non-fatal `SyntaxViolation` when it occurs during parsing. Note that since the provided function is `Fn`, the caller might need to utilize interior mutability, such as with a `RefCell`, to collect the violations.",16,{"inputs":[{"name":"self"},{"generics":["fn"],"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",9,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",9,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",9,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",9,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",9,{"inputs":[{"name":"self"}],"output":{"generics":["host"],"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["hostandport"],"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["split"],"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",9,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",9,{"inputs":[{"name":"self"}],"output":{"generics":["urlquery"],"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",9,{"inputs":[{"name":"self"}],"output":{"generics":["pathsegmentsmut"],"name":"result"}}],[11,"set_port","","Change this URL’s port number.",9,{"inputs":[{"name":"self"},{"generics":["u16"],"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",9,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",9,{"inputs":[{"name":"self"},{"generics":["str"],"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",9,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",9,{"inputs":[{"name":"p"}],"output":{"generics":["url"],"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",9,{"inputs":[{"name":"self"}],"output":{"generics":["pathbuf"],"name":"result"}}],[11,"to_socket_addrs","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["url","parseerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"Serializer"],[3,"UrlQuery"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs.","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[0,"prelude","","The [`uuid`] prelude.",null,null],[3,"Uuid","uuid::prelude","A Universally Unique Identifier (UUID).",null,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"description","uuid","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"uuidversion"}}],[11,"clone","uuid::prelude","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuidvariant"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"eq","uuid","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","uuid::prelude","The 'nil UUID'.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"generics":["uuid"],"name":"option"}}],[11,"new_v4","","Creates a random `Uuid`.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"from_uuid_bytes","","Creates a `Uuid` using the supplied bytes.",3,{"inputs":[{"name":"uuidbytes"}],"output":{"name":"uuid"}}],[11,"from_random_bytes","","Creates a v4 Uuid from random bytes (e.g. bytes supplied from `Rand` crate)",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidvariant"],"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["uuidversion"],"name":"option"}}],[11,"as_fields","","Returns the four field values of the UUID.",3,null],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into groups with a hyphen.",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"to_timestamp","","Returns an Optional Tuple of (u64, u16) representing the timestamp and counter portion of a V1 UUID.  If the supplied UUID is not V1, this will return None",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"generics":["uuid","parseerror"],"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","uuid","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"ValuesMut","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Trims the `VecMap` of any excess capacity.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r mut V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"retain","","Retains only the elements specified by the predicate.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"IntoIter"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["want"] = {"doc":"A Futures channel-like utility to signal when a value is wanted.","items":[[3,"Giver","want","An entity that gives a value when wanted.",null,null],[3,"Taker","","An entity that wants a value.",null,null],[3,"SharedGiver","","A cloneable `Giver`.",null,null],[3,"Closed","","The `Taker` has canceled its interest in a value.",null,null],[5,"new","","Create a new `want` channel.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"sharedgiver"}}],[11,"poll_want","","Poll whether the `Taker` has registered interest in another value.",1,{"inputs":[{"name":"self"}],"output":{"generics":["closed"],"name":"poll"}}],[11,"give","","Mark the state as idle, if the Taker currently is wanting.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"shared","","Converts this into a `SharedGiver`.",1,{"inputs":[{"name":"self"}],"output":{"name":"sharedgiver"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_wanting","","Check if the `Taker` has called `want()` without parking a task.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_canceled","","Check if the `Taker` has canceled interest without parking a task.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cancel","","Signal to the `Giver` that the want is canceled.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"want","","Signal to the `Giver` that a value is wanted.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"SharedGiver"],[3,"Giver"],[3,"Taker"],[3,"Closed"]]};
searchIndex["wasm"] = {"doc":"","items":[],"paths":[]};
searchIndex["yew"] = {"doc":"Yew Framework - API Documentation","items":[[5,"initialize","yew","Initializes yew framework. It should be called first.",null,{}],[5,"run_loop","","Starts event loop.",null,{}],[0,"macros","","This module contains macros which implements `html!` macro and JSX-like templates.",null,null],[0,"format","","Utility module to convert data to types and back by specific formats like: JSON, BSON, TOML, YAML, XML.",null,null],[0,"macros","yew::format","Contains macro for wrapping serde format.",null,null],[0,"nothing","","Contains an implementation of empty serialization format (`Nothing`).",null,null],[3,"Nothing","yew::format::nothing","A representation of an empty data. Nothing stored. Nothing restored.",null,null],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"text"}}],[11,"from","","",0,{"i":[{"n":"text"}],"o":{"n":"nothing"}}],[11,"into","","",0,{"i":[{"n":"self"}],"o":{"n":"binary"}}],[11,"from","","",0,{"i":[{"n":"binary"}],"o":{"n":"nothing"}}],[0,"json","yew::format","Contains an implementation of JSON serialization format.",null,null],[3,"Json","yew::format::json","A representation of a JSON data. Use it as wrapper to set a format you want to use for conversion:",null,null],[12,"0","","",1,null],[11,"into","","",1,{"i":[{"n":"self"}],"o":{"n":"text"}}],[11,"from","","",1,{"i":[{"n":"text"}],"o":{"n":"self"}}],[11,"into","","",1,{"i":[{"n":"self"}],"o":{"n":"binary"}}],[11,"from","","",1,{"i":[{"n":"binary"}],"o":{"n":"self"}}],[6,"Text","yew::format","A representation of a value which can be stored and restored as a text.",null,null],[6,"Binary","","A representation of a value which can be stored and restored as a binary.",null,null],[0,"html","yew","The main module which contents aliases to necessary items to create a template and implement `update` and `view` functions. Also this module contains declaration of `Component` trait which used to create own UI-components.",null,null],[3,"ComponentLink","yew::html","Link to component's scope for creating callbacks.",null,null],[3,"Scope","","A context which contains a bridge to send a messages to a loop. Mostly services uses it.",null,null],[3,"InputData","","A type representing data from `oninput` event.",null,null],[12,"value","","Inserted characters. Contains value from InputEvent.",2,null],[3,"Href","","A bridging type for checking `href` attribute value.",null,null],[4,"ChangeData","","A type representing change of value(s) of an element after committed by user (onchange event).",null,null],[13,"Value","","Value of the element in cases of `<input>`, `<textarea>`",3,null],[13,"Select","","SelectElement in case of `<select>` element. You can use one of methods of SelectElement to collect your required data such as: `value`, `selected_index`, `selected_indices` or `selected_values`. You can also iterate throught `selected_options` yourself.",3,null],[0,"onclick","","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onclick","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",4,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",4,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"ondoubleclick","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::ondoubleclick","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",5,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",5,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onkeypress","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onkeypress","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",6,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",6,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onkeydown","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onkeydown","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",7,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",7,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onkeyup","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onkeyup","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",8,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",8,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",8,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onmousemove","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onmousemove","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",9,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",9,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onmousedown","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onmousedown","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",10,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",10,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",10,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onmouseup","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onmouseup","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",11,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",11,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onmouseover","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onmouseover","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",12,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",12,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",12,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onmouseout","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onmouseout","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",13,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",13,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",13,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onblur","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onblur","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",14,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",14,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",14,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"oninput","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::oninput","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",15,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",15,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",15,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[0,"onchange","yew::html","An abstract implementation of a listener.",null,null],[3,"Wrapper","yew::html::onchange","A wrapper for a callback. Listener extracted from here when attached.",null,null],[6,"Event","","And event type which keeps the returned type.",null,null],[11,"from","","",16,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"kind","","",16,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"attach","","",16,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[6,"ShouldRender","yew::html","This type indicates that component should be rendered again.",null,null],[6,"NodeCell","","Holder for the element.",null,null],[6,"Html","","A type which expected as a result of `view` function implementation.",null,null],[8,"Component","","An interface of a UI-component. Uses `self` as a model.",null,null],[16,"Message","","Control message type which `update` loop get.",17,null],[16,"Properties","","Properties type of component implementation. It sould be serializable because it's sent to dynamicaly created component (layed under `VComp`) and must be restored for a component with unknown type.",17,null],[10,"create","","Initialization routine which could use a context.",17,null],[10,"update","","Called everytime when a messages of `Msg` type received. It also takes a reference to a context.",17,null],[11,"change","","This method called when properties changes, and once when component created.",17,null],[11,"destroy","","Called for finalization on the final point of the component's lifetime.",17,{"i":[{"n":"self"}]}],[8,"Renderable","","Should be rendered relative to context and component environment.",null,null],[10,"view","","Called by rendering loop.",18,{"i":[{"n":"self"}],"o":{"n":"html"}}],[11,"send_back","","This method sends messages back to the component's loop.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"callback"}}],[11,"clone","","",20,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"send_message","","Send message to a component.",20,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"from","","",21,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"from","","",21,{"i":[{"n":"str"}],"o":{"n":"self"}}],[11,"to_string","","",21,{"i":[{"n":"self"}],"o":{"n":"string"}}],[0,"app","yew","This module contains `App` sctruct which used to bootstrap a component in an isolated scope.",null,null],[3,"App","yew::app","An application instance.",null,null],[11,"new","","Creates a new `App` with a component in a context.",22,{"o":{"n":"self"}}],[11,"mount_to_body","","Alias to `mount(\"body\", ...)`.",22,{"i":[{"n":"self"}],"o":{"n":"scope"}}],[11,"mount","","The main entrypoint of a yew program. It works similar as `program` function in Elm. You should provide an initial model, `update` function which will update the state of the model and a `view` function which will render the model to a virtual DOM tree.",22,{"i":[{"n":"self"},{"n":"element"}],"o":{"n":"scope"}}],[0,"prelude","yew","The Yew Prelude",null,null],[3,"BlurEvent","yew::prelude","The `BlurEvent` is fired when an element has lost focus. The main difference between this event and focusout is that only the latter bubbles.",null,null],[3,"ClickEvent","","The `ClickEvent` is fired when a pointing device button (usually a mouse's primary button) is pressed and released on a single element.",null,null],[3,"DoubleClickEvent","","The `DoubleClickEvent` is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element.",null,null],[8,"IKeyboardEvent","","`IKeyboardEvent` objects describe a user interaction with the keyboard. Each event describes a key; the event type identifies what kind of activity was performed.",null,null],[11,"alt_key","","Indicates whether the Alt key was down when this event was fired.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"code","","Returns a code value that indicates the physical key pressed on the keyboard.",23,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"ctrl_key","","Returns whether the Ctrl key was down when this event was fired.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns whether a modifier key was down when this event was fired.",23,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"is_composing","","Returns whether this event was fired during composition.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"location","","Returns the location of the key on the keyboard.",23,{"i":[{"n":"self"}],"o":{"n":"keyboardlocation"}}],[11,"key","","Returns the value of a key or keys pressed by the user.",23,{"i":[{"n":"self"}],"o":{"n":"string"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event was fired.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"repeat","","Indicates whether the key is held down such that it is repeating.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",23,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[8,"IMouseEvent","","The `IMouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse).",null,null],[11,"alt_key","","Returns whether the Alt key was down when this event was fired.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"button","","Indicates the mouse button that fired this event.",24,{"i":[{"n":"self"}],"o":{"n":"mousebutton"}}],[11,"buttons","","Indicates which mouse buttons were down when this event was fired.",24,{"i":[{"n":"self"}],"o":{"n":"mousebuttonsstate"}}],[11,"client_x","","Returns the X position in the application's client area where this event occured.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"client_y","","Returns the Y position in the application's client area where this event occured.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"offset_x","","Returns the X position on the target element where this event occured.",24,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"offset_y","","Returns the Y position on the target element where this event occured.",24,{"i":[{"n":"self"}],"o":{"n":"f64"}}],[11,"ctrl_key","","Indicates whether the Ctrl key was down when this event fired.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_modifier_state","","Returns the current state of the specified modifier key.",24,{"i":[{"n":"self"},{"n":"modifierkey"}],"o":{"n":"bool"}}],[11,"meta_key","","Indicates whether the Meta key was down when this event fired.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"movement_x","","Returns the change in X coordinate of the pointer between this event and the previous MouseMove event.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"movement_y","","Returns the change in Y coordinate of the pointer between this event and the previous MouseMove event.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"region","","Returns the ID of the hit region affected by the event.",24,{"i":[{"n":"self"}],"o":{"g":["string"],"n":"option"}}],[11,"related_target","","Returns the secondary target of this event, if any.",24,{"i":[{"n":"self"}],"o":{"g":["eventtarget"],"n":"option"}}],[11,"screen_x","","Returns the X position of the pointer in screen coordinates.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"screen_y","","Returns the Y position of the pointer in screen coordinates.",24,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"shift_key","","Indicates whether the Shift key was down when this event was fired.",24,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[3,"KeyDownEvent","","The `KeyDownEvent` is fired when a key is pressed down. Unlike the `KeyPressEvent` event it's also fired for keys which do not produce a character value.",null,null],[3,"KeyPressEvent","","The `KeyPressEvent` is fired when a key is pressed down. It's only fired for keys which produce a character value.",null,null],[3,"KeyUpEvent","","The `KeyUpEvent` is fired when a key is released.",null,null],[3,"MouseDownEvent","","The `MouseDownEvent` is fired when a pointing device button is pressed on an element.",null,null],[3,"MouseMoveEvent","","The `MouseMoveEvent` is fired when a pointing device (usually a mouse) is moved while over an element.",null,null],[3,"MouseOutEvent","","The `MouseOutEvent` is fired when a pointing device (usually a mouse) is moved off the element that has the listener attached or off one of its children.",null,null],[3,"MouseOverEvent","","The `MouseOverEvent` is fired when a pointing device (usually a mouse) is moved onto the element that has the listener attached or onto one of its children.",null,null],[3,"MouseUpEvent","","The `MouseUpEvent` is fired when a pointing device button is released over an element.",null,null],[0,"worker","","Prelude module for creating worker.",null,null],[0,"services","yew","This module is a container of servies to interact with the external resources.",null,null],[0,"console","yew::services","This module contains a service implementation to use browser's console.",null,null],[3,"ConsoleService","yew::services::console","A service to use methods of a Console.",null,null],[11,"default","","",25,{"o":{"n":"consoleservice"}}],[11,"new","","Creates a new service instance connected to `App` by provided `sender`.",25,{"o":{"n":"self"}}],[11,"log","","console.log method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"warn","","console.warn method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"info","","console.info method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"error","","console.error method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"debug","","console.debug method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"count_named","","console.count_named method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"count","","console.count method implementation.",25,{"i":[{"n":"self"}]}],[11,"time_named","","console.time_named method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"time_named_end","","console.time_named_end method implementation.",25,{"i":[{"n":"self"},{"n":"str"}]}],[11,"time","","console.time method implementation.",25,{"i":[{"n":"self"}]}],[11,"time_end","","console.time_end method implementation.",25,{"i":[{"n":"self"}]}],[11,"clear","","console.clear method implementation.",25,{"i":[{"n":"self"}]}],[11,"group","","console.group method implementation.",25,{"i":[{"n":"self"}]}],[11,"group_collapsed","","console.group_collapsed method implementation.",25,{"i":[{"n":"self"}]}],[11,"group_end","","console.group_end method implementation.",25,{"i":[{"n":"self"}]}],[11,"trace","","console.trace method implementation.",25,{"i":[{"n":"self"}]}],[11,"assert","","console.assert method implementation.",25,{"i":[{"n":"self"},{"n":"bool"},{"n":"str"}]}],[0,"dialog","yew::services","This module contains the implementation of a service to show alerts and confirm dialogs in a browser.",null,null],[3,"DialogService","yew::services::dialog","A dialog service.",null,null],[11,"default","","",26,{"o":{"n":"dialogservice"}}],[11,"new","","Creates a new service instance connected to `App` by provided `sender`.",26,{"o":{"n":"self"}}],[11,"alert","","Calls alert function.",26,{"i":[{"n":"self"},{"n":"str"}]}],[11,"confirm","","Calls confirm function.",26,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[0,"fetch","yew::services","Service to send HTTP-request to a server.",null,null],[3,"HeaderMap","yew::services::fetch","A set of HTTP headers",null,null],[3,"Method","","The Request Method (VERB)",null,null],[3,"Request","","Represents an HTTP request.",null,null],[3,"Response","","Represents an HTTP response",null,null],[3,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[3,"Uri","","The URI component of a request.",null,null],[3,"FetchTask","","A handle to control sent requests. Can be canceled with a `Task::cancel` call.",null,null],[3,"FetchService","","A service to fetch resources.",null,null],[11,"default","","",27,{"o":{"n":"fetchservice"}}],[11,"new","","Creates a new service instance connected to `App` by provided `sender`.",27,{"o":{"n":"self"}}],[11,"fetch","","Sends a request to a remote server given a Request object and a callback fuction to convert a Response object into a loop's message.",27,{"i":[{"n":"self"},{"n":"request"},{"g":["response"],"n":"callback"}],"o":{"n":"fetchtask"}}],[11,"fetch_binary","","Fetch the data in binary format.",27,{"i":[{"n":"self"},{"n":"request"},{"g":["response"],"n":"callback"}],"o":{"n":"fetchtask"}}],[11,"is_active","","",28,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cancel","","",28,{"i":[{"n":"self"}]}],[11,"drop","","",28,{"i":[{"n":"self"}]}],[0,"interval","yew::services","This module contains the implementation of a service for periodic sending messages to a loop.",null,null],[3,"IntervalTask","yew::services::interval","A handle which helps to cancel interval. Uses clearInterval.",null,null],[3,"IntervalService","","A service to send messages on every elapsed interval.",null,null],[11,"default","","",29,{"o":{"n":"intervalservice"}}],[11,"new","","Creates a new service instance connected to `App` by provided `sender`.",29,{"o":{"n":"self"}}],[11,"spawn","","Sets interval which will call send a messages returned by a converter on every intarval expiration.",29,{"i":[{"n":"self"},{"n":"duration"},{"n":"callback"}],"o":{"n":"intervaltask"}}],[11,"is_active","","",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cancel","","",30,{"i":[{"n":"self"}]}],[11,"drop","","",30,{"i":[{"n":"self"}]}],[0,"storage","yew::services","This module contains the implementation of a service to use local and session storage of a browser.",null,null],[3,"StorageService","yew::services::storage","A storage service attached to a context.",null,null],[4,"Area","","An area to keep the data in.",null,null],[13,"Local","","Use `localStorage` of a browser.",31,null],[13,"Session","","Use `sessionStorage` of a browser.",31,null],[11,"new","","Creates a new storage service instance with specified storate area.",32,{"i":[{"n":"area"}],"o":{"n":"self"}}],[11,"store","","Stores value to the storage.",32,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}]}],[11,"restore","","Restores value from the storage.",32,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"t"}}],[11,"remove","","Removes value from the storage.",32,{"i":[{"n":"self"},{"n":"str"}]}],[0,"timeout","yew::services","This module contains the implementation of a service to send a messages when timeout elapsed.",null,null],[3,"TimeoutTask","yew::services::timeout","A handle to cancel a timeout task.",null,null],[3,"TimeoutService","","An service to set a timeout.",null,null],[11,"default","","",33,{"o":{"n":"timeoutservice"}}],[11,"new","","Creates a new service instance connected to `App` by provided `sender`.",33,{"o":{"n":"self"}}],[11,"spawn","","Sets timeout which send a messages from a `converter` after `duration`.",33,{"i":[{"n":"self"},{"n":"duration"},{"n":"callback"}],"o":{"n":"timeouttask"}}],[11,"is_active","","",34,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cancel","","",34,{"i":[{"n":"self"}]}],[11,"drop","","",34,{"i":[{"n":"self"}]}],[0,"websocket","yew::services","Service to connect to a servers by `WebSocket` Protocol.",null,null],[3,"WebSocketTask","yew::services::websocket","A handle to control current websocket connection. Implements `Task` and could be canceled.",null,null],[3,"WebSocketService","","A websocket service attached to a user context.",null,null],[4,"WebSocketStatus","","A status of a websocket connection. Used for status notification.",null,null],[13,"Opened","","Fired when a websocket connection was opened.",35,null],[13,"Closed","","Fired when a websocket connection was closed.",35,null],[13,"Error","","Fired when a websocket connection was failed.",35,null],[11,"default","","",36,{"o":{"n":"websocketservice"}}],[11,"new","","Creates a new service instance connected to `App` by provided `sender`.",36,{"o":{"n":"self"}}],[11,"connect","","Connects to a server by a weboscket connection. Needs two functions to generate data and notification messages.",36,{"i":[{"n":"self"},{"n":"str"},{"n":"callback"},{"g":["websocketstatus"],"n":"callback"}],"o":{"n":"websockettask"}}],[11,"send","","Sends data to a websocket connection.",37,{"i":[{"n":"self"},{"n":"in"}]}],[11,"send_binary","","Sends binary data to a websocket connection.",37,{"i":[{"n":"self"},{"n":"in"}]}],[11,"is_active","","",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"cancel","","",37,{"i":[{"n":"self"}]}],[11,"drop","","",37,{"i":[{"n":"self"}]}],[8,"Task","yew::services","An universal task of a service. It have to be canceled when dropped.",null,null],[10,"is_active","","Returns `true` if task is active.",38,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[10,"cancel","","Cancel current service's routine.",38,{"i":[{"n":"self"}]}],[0,"virtual_dom","yew","This module contains the implementation of reactive virtual dom concept.",null,null],[0,"vcomp","yew::virtual_dom","This module contains the implementation of a virtual component `VComp`.",null,null],[3,"VComp","yew::virtual_dom::vcomp","A virtual component.",null,null],[8,"Transformer","","Converts property and attach lazy components to it. This type holds context and components types to store an activatior which will be used later buring rendering state to attach component sender.",null,null],[10,"transform","","Transforms one type to another.",39,{"i":[{"n":"self"},{"n":"from"}],"o":{"n":"to"}}],[11,"lazy","","This method prepares a generator to make a new instance of the `Component`.",40,null],[11,"set_props","","Attach properties associated with the component.",40,{"i":[{"n":"self"},{"n":"t"}]}],[11,"transform","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"transform","","",40,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"t"}}],[11,"transform","","",40,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"string"}}],[11,"transform","","",40,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["callback"],"n":"option"}}],[11,"detach","","Remove VComp from parent.",40,{"i":[{"n":"self"},{"n":"node"}],"o":{"g":["node"],"n":"option"}}],[11,"apply","","Renders independent component over DOM `Element`. It also compares this with an opposite `VComp` and inherits sender of it.",40,{"i":[{"n":"self"},{"n":"node"},{"g":["node"],"n":"option"},{"g":["vnode"],"n":"option"},{"n":"scope"}],"o":{"g":["node"],"n":"option"}}],[11,"eq","","",40,{"i":[{"n":"self"},{"n":"vcomp"}],"o":{"n":"bool"}}],[0,"vlist","yew::virtual_dom","This module contains fragments implementation.",null,null],[3,"VList","yew::virtual_dom::vlist","This struct represents a fragment of the Virtual DOM tree.",null,null],[12,"childs","","The list of children nodes. Which also could have own children.",41,null],[11,"new","","Creates a new `VTag` instance with `tag` name (cannot be changed later in DOM).",41,{"o":{"n":"self"}}],[11,"add_child","","Add `VNode` child.",41,{"i":[{"n":"self"},{"n":"vnode"}]}],[11,"detach","","",41,{"i":[{"n":"self"},{"n":"node"}],"o":{"g":["node"],"n":"option"}}],[11,"apply","","",41,{"i":[{"n":"self"},{"n":"node"},{"g":["node"],"n":"option"},{"g":["vnode"],"n":"option"},{"n":"scope"}],"o":{"g":["node"],"n":"option"}}],[0,"vnode","yew::virtual_dom","This module contains the implementation of abstract virtual node.",null,null],[4,"VNode","yew::virtual_dom::vnode","Bind virtual element to a DOM reference.",null,null],[13,"VTag","","A bind between `VTag` and `Element`.",42,null],[13,"VText","","A bind between `VText` and `TextNode`.",42,null],[13,"VComp","","A bind between `VComp` and `Element`.",42,null],[13,"VList","","A holder for a list of other nodes.",42,null],[13,"VRef","","A holder for any `Node` (necessary for replacing node).",42,null],[11,"detach","","Remove VNode from parent.",42,{"i":[{"n":"self"},{"n":"node"}],"o":{"g":["node"],"n":"option"}}],[11,"apply","","",42,{"i":[{"n":"self"},{"n":"node"},{"g":["node"],"n":"option"},{"g":["vnode"],"n":"option"},{"n":"scope"}],"o":{"g":["node"],"n":"option"}}],[11,"from","","",42,{"i":[{"n":"vtext"}],"o":{"n":"self"}}],[11,"from","","",42,{"i":[{"n":"vlist"}],"o":{"n":"self"}}],[11,"from","","",42,{"i":[{"n":"vtag"}],"o":{"n":"self"}}],[11,"from","","",42,{"i":[{"n":"vcomp"}],"o":{"n":"self"}}],[11,"from","","",42,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"from","","",42,{"i":[{"n":"renderable"}],"o":{"n":"self"}}],[11,"fmt","","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",42,{"i":[{"n":"self"},{"n":"vnode"}],"o":{"n":"bool"}}],[0,"vtag","yew::virtual_dom","This module contains the implementation of a virtual element node `VTag`.",null,null],[3,"VTag","yew::virtual_dom::vtag","A type for a virtual Element representation.",null,null],[12,"reference","","A reference to the `Element`.",43,null],[12,"listeners","","List of attached listeners.",43,null],[12,"attributes","","List of attributes.",43,null],[12,"childs","","The list of children nodes. Which also could have own children.",43,null],[12,"classes","","List of attached classes.",43,null],[12,"value","","Contains a value of an InputElement.",43,null],[12,"kind","","Contains kind value of an `InputElement`.",43,null],[12,"checked","","Represents `checked` attribute of input. It exists to override standard behavior of `checked` attribute, because in original HTML it sets `defaultChecked` value of `InputElement`, but for reactive frameworks it's more useful to control `checked` value of an `InputElement`.",43,null],[11,"new","","Creates a new `VTag` instance with `tag` name (cannot be changed later in DOM).",43,{"i":[{"n":"s"}],"o":{"n":"self"}}],[11,"tag","","Returns tag of an `Element`. In HTML tags are always uppercase.",43,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"add_child","","Add `VNode` child.",43,{"i":[{"n":"self"},{"n":"vnode"}]}],[11,"add_class","","Adds asingle class to this virtual node. Actually it will set by Element.classList.add call later.",43,{"i":[{"n":"self"},{"n":"str"}]}],[11,"set_classes","","Add classes to this virtual node. Actually it will set by Element.classList.add call later.",43,{"i":[{"n":"self"},{"n":"str"}]}],[11,"set_value","","Sets `value` for an InputElement.",43,{"i":[{"n":"self"},{"n":"t"}]}],[11,"set_kind","","Sets `kind` property of an InputElement. Same as set `type` attribute.",43,{"i":[{"n":"self"},{"n":"t"}]}],[11,"set_checked","","Sets `checked` property of an InputElement. (Not a value of node's attribute).",43,{"i":[{"n":"self"},{"n":"bool"}]}],[11,"add_attribute","","Adds attribute to a virtual node. Not every attribute works when it set as attribute. We use workarounds for: `class`, `type/kind`, `value` and `checked`.",43,{"i":[{"n":"self"},{"n":"str"},{"n":"t"}]}],[11,"add_listener","","Adds new listener to the node. It's boxed because we want to keep it in a single list. Lates `Listener::attach` called to attach actual listener to a DOM node.",43,{"i":[{"n":"self"},{"g":["listener"],"n":"box"}]}],[11,"detach","","Remove VTag from parent.",43,{"i":[{"n":"self"},{"n":"node"}],"o":{"g":["node"],"n":"option"}}],[11,"apply","","Renders virtual tag over DOM `Element`, but it also compares this with an ancestor `VTag` to compute what to patch in the actual DOM nodes.",43,{"i":[{"n":"self"},{"n":"node"},{"g":["node"],"n":"option"},{"g":["vnode"],"n":"option"},{"n":"scope"}],"o":{"g":["node"],"n":"option"}}],[11,"fmt","","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",43,{"i":[{"n":"self"},{"n":"vtag"}],"o":{"n":"bool"}}],[0,"vtext","yew::virtual_dom","This module contains the implementation of a virtual text node `VText`.",null,null],[3,"VText","yew::virtual_dom::vtext","A type for a virtual `TextNode` represenation.",null,null],[12,"text","","Contains a text of the node.",44,null],[12,"reference","","A reference to the `TextNode`.",44,null],[11,"new","","Creates new virtual text node with a content.",44,{"i":[{"n":"string"}],"o":{"n":"self"}}],[11,"detach","","Remove VTag from parent.",44,{"i":[{"n":"self"},{"n":"node"}],"o":{"g":["node"],"n":"option"}}],[11,"apply","","Renders virtual node over existent `TextNode`, but only if value of text had changed. Parameter `precursor` is necesssary for `VTag` and `VList` which has children and renders them.",44,{"i":[{"n":"self"},{"n":"node"},{"g":["node"],"n":"option"},{"g":["vnode"],"n":"option"},{"n":"scope"}],"o":{"g":["node"],"n":"option"}}],[11,"fmt","","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",44,{"i":[{"n":"self"},{"n":"vtext"}],"o":{"n":"bool"}}],[8,"Listener","yew::virtual_dom","`Listener` trait is an universal implementation of an event listener which helps to bind Rust-listener to JS-listener (DOM).",null,null],[10,"kind","","Returns standard name of DOM's event.",45,{"i":[{"n":"self"}],"o":{"n":"str"}}],[10,"attach","","Attaches listener to the element and uses scope instance to send prepaired event back to the yew main loop.",45,{"i":[{"n":"self"},{"n":"element"},{"n":"scope"}],"o":{"n":"eventlistenerhandle"}}],[8,"VDiff","","This trait provides features to update a tree by other tree comparsion.",null,null],[16,"Component","","The component which this instance put into.",46,null],[10,"detach","","Remove itself from parent and return the next sibling.",46,{"i":[{"n":"self"},{"n":"node"}],"o":{"g":["node"],"n":"option"}}],[10,"apply","","Scoped diff apply to other tree.",46,{"i":[{"n":"self"},{"n":"node"},{"g":["node"],"n":"option"},{"g":["vnode"],"n":"option"},{"n":"scope"}],"o":{"g":["node"],"n":"option"}}],[11,"fmt","","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"callback","yew","This module contains structs to interact with `Scope`s.",null,null],[3,"Callback","yew::callback","Universal callback wrapper.  Use callbacks carefully, because it you call it from `update` loop of `Components` (even from JS) it will delay a message until next. Callbacks should be used from JS callbacks or `setTimeout` calls.  `Rc` wrapper used to make it clonable.",null,null],[11,"from","","",47,{"i":[{"n":"f"}],"o":{"n":"self"}}],[11,"clone","","",47,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"eq","","",47,{"i":[{"n":"self"},{"n":"callback"}],"o":{"n":"bool"}}],[11,"emit","","This method calls the actual callback.",47,{"i":[{"n":"self"},{"n":"in"}]}],[11,"reform","","Changes input type of the callback to another. Works like common `map` method but in an opposite direction.",47,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"callback"}}],[0,"scheduler","yew","This module contains a scheduler.",null,null],[0,"agent","","This module contains types to support multi-threading in Yew.",null,null],[3,"HandlerId","yew::agent","Id of responses handler.",null,null],[3,"Context","","Create a single instance in the current thread.",null,null],[3,"Job","","Create an instance in the current thread.",null,null],[3,"Private","","Create a new instance for every bridge.",null,null],[3,"PrivateBridge","","A connection manager for components interaction with workers.",null,null],[3,"Public","","Create a single instance in a tab.",null,null],[3,"PublicBridge","","A connection manager for components interaction with workers.",null,null],[3,"Global","","Create a single instance in a browser.",null,null],[3,"AgentScope","","This sctruct holds a reference to a component and to a global scheduler.",null,null],[3,"AgentLink","","Link to agent's scope for creating callbacks.",null,null],[8,"Transferable","","Represents a message which you could send to an agent.",null,null],[8,"Bridged","","This traits allow to get addres or register worker.",null,null],[10,"bridge","","Creates a messaging bridge between a worker and the component.",48,{"i":[{"n":"callback"}],"o":{"g":["bridge"],"n":"box"}}],[8,"Threaded","","Implements rules to register a worker in a separate thread.",null,null],[10,"register","","Executes an agent in the current environment. Uses in `main` function of a worker.",49,{}],[8,"Bridge","","Bridge to a specific kind of worker.",null,null],[10,"send","","Send a message to an agent.",50,null],[8,"Agent","","Declares the behavior of the agent.",null,null],[16,"Reach","","Reach capaility of the agent.",51,null],[16,"Message","","Type of an input messagae.",51,null],[16,"Input","","Incoming message type.",51,null],[16,"Output","","Outgoing message type.",51,null],[10,"create","","Creates an instance of an agent.",51,{"i":[{"n":"agentlink"}],"o":{"n":"self"}}],[10,"update","","This method called on every update message.",51,null],[11,"connected","","This method called on when a new bridge created.",51,{"i":[{"n":"self"},{"n":"handlerid"}]}],[10,"handle","","This method called on every incoming message.",51,null],[11,"disconnected","","This method called on when a new bridge destroyed.",51,{"i":[{"n":"self"},{"n":"handlerid"}]}],[11,"destroy","","Creates an instance of an agent.",51,{"i":[{"n":"self"}]}],[11,"name_of_resource","","Represents the name of loading resorce for remote workers which have to live in a separate files.",51,{"o":{"n":"str"}}],[11,"eq","","",52,{"i":[{"n":"self"},{"n":"handlerid"}],"o":{"n":"bool"}}],[11,"ne","","",52,{"i":[{"n":"self"},{"n":"handlerid"}],"o":{"n":"bool"}}],[11,"hash","","",52,null],[11,"clone","","",52,{"i":[{"n":"self"}],"o":{"n":"handlerid"}}],[11,"from","","",52,{"i":[{"n":"usize"}],"o":{"n":"self"}}],[11,"send","","",53,null],[11,"drop","","",53,{"i":[{"n":"self"}]}],[11,"send","","",54,null],[11,"drop","","",54,{"i":[{"n":"self"}]}],[11,"clone","","",55,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"response","","Send response to an actor.",56,null],[11,"send_back","","This method sends messages back to the component's loop.",56,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"callback"}}],[14,"html_impl","yew","",null,null],[14,"html","","",null,null],[11,"into_iter","yew::services::fetch","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitary order. The map cannot be used after calling this.",57,{"i":[{"n":"self"}],"o":{"n":"intoiter"}}],[11,"partial_cmp","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"le","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"gt","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"ge","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"clone","","",58,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"clone","","",57,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"clone","","",59,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"clone","","",60,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"cmp","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"ordering"}}],[11,"hash","","",59,null],[11,"hash","","",60,null],[11,"hash","","",58,null],[11,"as_ref","","",60,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"from_str","","",59,{"i":[{"n":"str"}],"o":{"g":["uri","invaliduri"],"n":"result"}}],[11,"from_str","","",58,{"i":[{"n":"str"}],"o":{"g":["statuscode","invalidstatuscode"],"n":"result"}}],[11,"from_str","","",60,{"i":[{"n":"str"}],"o":{"g":["method"],"n":"result"}}],[11,"index","","",57,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"t"}}],[11,"from_iter","","",57,{"i":[{"n":"i"}],"o":{"n":"headermap"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"try_from","","",59,{"i":[{"n":"bytes"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",59,{"i":[{"n":"parts"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",60,{"i":[{"n":"method"}],"o":{"g":["method"],"n":"result"}}],[11,"try_from","","",58,{"i":[{"n":"str"}],"o":{"g":["statuscode"],"n":"result"}}],[11,"try_from","","",59,{"i":[{"n":"string"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",60,{"i":[{"n":"str"}],"o":{"g":["method"],"n":"result"}}],[11,"try_from","","",58,{"i":[{"n":"statuscode"}],"o":{"g":["statuscode"],"n":"result"}}],[11,"try_from","","",60,null],[11,"try_from","","",58,null],[11,"try_from","","",59,{"i":[{"n":"uri"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",59,{"i":[{"n":"uri"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",59,{"i":[{"n":"string"}],"o":{"g":["uri"],"n":"result"}}],[11,"try_from","","",58,{"i":[{"n":"u16"}],"o":{"g":["statuscode"],"n":"result"}}],[11,"try_from","","",59,{"i":[{"n":"str"}],"o":{"g":["uri"],"n":"result"}}],[11,"default","","",61,{"o":{"n":"request"}}],[11,"default","","",58,{"o":{"n":"statuscode"}}],[11,"default","","",59,{"o":{"n":"uri"}}],[11,"default","","",60,{"o":{"n":"method"}}],[11,"default","","",62,{"o":{"n":"response"}}],[11,"default","","",57,{"o":{"n":"headermap"}}],[11,"extend","","",57,null],[11,"extend","","Extend a `HeaderMap` with the contents of another `HeaderMap`.",57,null],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",60,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"ne","","",60,{"i":[{"n":"self"},{"n":"method"}],"o":{"n":"bool"}}],[11,"eq","","",57,{"i":[{"n":"self"},{"n":"headermap"}],"o":{"n":"bool"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"str"}],"o":{"n":"bool"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"u16"}],"o":{"n":"bool"}}],[11,"eq","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"ne","","",58,{"i":[{"n":"self"},{"n":"statuscode"}],"o":{"n":"bool"}}],[11,"eq","","",59,{"i":[{"n":"self"},{"n":"uri"}],"o":{"n":"bool"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","yew::prelude","",63,{"i":[{"n":"self"}],"o":{"n":"keydownevent"}}],[11,"clone","","",64,{"i":[{"n":"self"}],"o":{"n":"clickevent"}}],[11,"clone","","",65,{"i":[{"n":"self"}],"o":{"n":"keypressevent"}}],[11,"clone","","",66,{"i":[{"n":"self"}],"o":{"n":"mouseoverevent"}}],[11,"clone","","",67,{"i":[{"n":"self"}],"o":{"n":"mouseoutevent"}}],[11,"clone","","",68,{"i":[{"n":"self"}],"o":{"n":"doubleclickevent"}}],[11,"clone","","",69,{"i":[{"n":"self"}],"o":{"n":"mouseupevent"}}],[11,"clone","","",70,{"i":[{"n":"self"}],"o":{"n":"mousemoveevent"}}],[11,"clone","","",71,{"i":[{"n":"self"}],"o":{"n":"blurevent"}}],[11,"clone","","",72,{"i":[{"n":"self"}],"o":{"n":"mousedownevent"}}],[11,"clone","","",73,{"i":[{"n":"self"}],"o":{"n":"keyupevent"}}],[11,"instance_of","","",67,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",73,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",71,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",64,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",66,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",69,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",70,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",65,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",68,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",72,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"instance_of","","",63,{"i":[{"n":"reference"}],"o":{"n":"bool"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from_reference_unchecked","","",72,{"i":[{"n":"reference"}],"o":{"n":"mousedownevent"}}],[11,"from_reference_unchecked","","",66,{"i":[{"n":"reference"}],"o":{"n":"mouseoverevent"}}],[11,"from_reference_unchecked","","",64,{"i":[{"n":"reference"}],"o":{"n":"clickevent"}}],[11,"from_reference_unchecked","","",69,{"i":[{"n":"reference"}],"o":{"n":"mouseupevent"}}],[11,"from_reference_unchecked","","",67,{"i":[{"n":"reference"}],"o":{"n":"mouseoutevent"}}],[11,"from_reference_unchecked","","",65,{"i":[{"n":"reference"}],"o":{"n":"keypressevent"}}],[11,"from_reference_unchecked","","",63,{"i":[{"n":"reference"}],"o":{"n":"keydownevent"}}],[11,"from_reference_unchecked","","",71,{"i":[{"n":"reference"}],"o":{"n":"blurevent"}}],[11,"from_reference_unchecked","","",70,{"i":[{"n":"reference"}],"o":{"n":"mousemoveevent"}}],[11,"from_reference_unchecked","","",73,{"i":[{"n":"reference"}],"o":{"n":"keyupevent"}}],[11,"from_reference_unchecked","","",68,{"i":[{"n":"reference"}],"o":{"n":"doubleclickevent"}}],[11,"as_ref","","",67,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",63,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",65,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",68,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",72,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",71,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",70,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",64,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",73,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",69,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"as_ref","","",66,{"i":[{"n":"self"}],"o":{"n":"reference"}}],[11,"eq","","",71,{"i":[{"n":"self"},{"n":"blurevent"}],"o":{"n":"bool"}}],[11,"ne","","",71,{"i":[{"n":"self"},{"n":"blurevent"}],"o":{"n":"bool"}}],[11,"eq","","",72,{"i":[{"n":"self"},{"n":"mousedownevent"}],"o":{"n":"bool"}}],[11,"ne","","",72,{"i":[{"n":"self"},{"n":"mousedownevent"}],"o":{"n":"bool"}}],[11,"eq","","",73,{"i":[{"n":"self"},{"n":"keyupevent"}],"o":{"n":"bool"}}],[11,"ne","","",73,{"i":[{"n":"self"},{"n":"keyupevent"}],"o":{"n":"bool"}}],[11,"eq","","",69,{"i":[{"n":"self"},{"n":"mouseupevent"}],"o":{"n":"bool"}}],[11,"ne","","",69,{"i":[{"n":"self"},{"n":"mouseupevent"}],"o":{"n":"bool"}}],[11,"eq","","",63,{"i":[{"n":"self"},{"n":"keydownevent"}],"o":{"n":"bool"}}],[11,"ne","","",63,{"i":[{"n":"self"},{"n":"keydownevent"}],"o":{"n":"bool"}}],[11,"eq","","",66,{"i":[{"n":"self"},{"n":"mouseoverevent"}],"o":{"n":"bool"}}],[11,"ne","","",66,{"i":[{"n":"self"},{"n":"mouseoverevent"}],"o":{"n":"bool"}}],[11,"eq","","",67,{"i":[{"n":"self"},{"n":"mouseoutevent"}],"o":{"n":"bool"}}],[11,"ne","","",67,{"i":[{"n":"self"},{"n":"mouseoutevent"}],"o":{"n":"bool"}}],[11,"eq","","",68,{"i":[{"n":"self"},{"n":"doubleclickevent"}],"o":{"n":"bool"}}],[11,"ne","","",68,{"i":[{"n":"self"},{"n":"doubleclickevent"}],"o":{"n":"bool"}}],[11,"eq","","",64,{"i":[{"n":"self"},{"n":"clickevent"}],"o":{"n":"bool"}}],[11,"ne","","",64,{"i":[{"n":"self"},{"n":"clickevent"}],"o":{"n":"bool"}}],[11,"eq","","",70,{"i":[{"n":"self"},{"n":"mousemoveevent"}],"o":{"n":"bool"}}],[11,"ne","","",70,{"i":[{"n":"self"},{"n":"mousemoveevent"}],"o":{"n":"bool"}}],[11,"eq","","",65,{"i":[{"n":"self"},{"n":"keypressevent"}],"o":{"n":"bool"}}],[11,"ne","","",65,{"i":[{"n":"self"},{"n":"keypressevent"}],"o":{"n":"bool"}}],[11,"new","yew::services::fetch","Create an empty `HeaderMap`.",57,{"o":{"g":["headervalue"],"n":"headermap"}}],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",57,{"i":[{"n":"usize"}],"o":{"n":"headermap"}}],[11,"len","","Returns the number of headers stored in the map.",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"keys_len","","Returns the number of keys stored in the map.",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",57,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",57,null],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",57,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",57,null],[11,"get","","Returns a reference to the value associated with the key.",57,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",57,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[11,"get_all","","Returns a view of all values associated with a key.",57,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"getall"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",57,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"bool"}}],[11,"iter","","An iterator visiting all key-value pairs.",57,{"i":[{"n":"self"}],"o":{"n":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",57,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"keys","","An iterator visiting all keys.",57,{"i":[{"n":"self"}],"o":{"n":"keys"}}],[11,"values","","An iterator visiting all values.",57,{"i":[{"n":"self"}],"o":{"n":"values"}}],[11,"values_mut","","An iterator visiting all values mutably.",57,{"i":[{"n":"self"}],"o":{"n":"valuesmut"}}],[11,"drain","","Clears the map, returning all entries as an iterator.",57,{"i":[{"n":"self"}],"o":{"n":"drain"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",57,{"i":[{"n":"self"},{"n":"k"}],"o":{"g":["entry","invalidheadername"],"n":"result"}}],[11,"insert","","Inserts a key-value pair into the map.",57,{"i":[{"n":"self"},{"n":"k"},{"n":"t"}],"o":{"n":"option"}}],[11,"append","","Inserts a key-value pair into the map.",57,{"i":[{"n":"self"},{"n":"k"},{"n":"t"}],"o":{"n":"bool"}}],[11,"remove","","Removes a key from the map, returning the value associated with the key.",57,{"i":[{"n":"self"},{"n":"k"}],"o":{"n":"option"}}],[18,"GET","","GET",60,null],[18,"POST","","POST",60,null],[18,"PUT","","PUT",60,null],[18,"DELETE","","DELETE",60,null],[18,"HEAD","","HEAD",60,null],[18,"OPTIONS","","OPTIONS",60,null],[18,"CONNECT","","CONNECT",60,null],[18,"PATCH","","PATCH",60,null],[18,"TRACE","","TRACE",60,null],[11,"from_bytes","","Converts a slice of bytes to an HTTP method.",60,null],[11,"is_safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",60,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result if executed multiple times.",60,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"as_str","","Return a &str representation of the HTTP method",60,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Request`",61,{"o":{"n":"builder"}}],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",61,{"i":[{"n":"t"}],"o":{"n":"builder"}}],[11,"new","","Creates a new blank `Request` with the body",61,{"i":[{"n":"t"}],"o":{"n":"request"}}],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",61,{"i":[{"n":"parts"},{"n":"t"}],"o":{"n":"request"}}],[11,"method","","Returns a reference to the associated HTTP method.",61,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",61,{"i":[{"n":"self"}],"o":{"n":"method"}}],[11,"uri","","Returns a reference to the associated URI.",61,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"uri_mut","","Returns a mutable reference to the associated URI.",61,{"i":[{"n":"self"}],"o":{"n":"uri"}}],[11,"version","","Returns the associated version.",61,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",61,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",61,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",61,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",61,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",61,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",61,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",61,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_body","","Consumes the request, returning just the body.",61,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the request returning the head and body parts.",61,null],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",61,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"request"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",62,{"o":{"n":"builder"}}],[11,"new","","Creates a new blank `Response` with the body",62,{"i":[{"n":"t"}],"o":{"n":"response"}}],[11,"from_parts","","Creates a new `Response` with the given head and body",62,{"i":[{"n":"parts"},{"n":"t"}],"o":{"n":"response"}}],[11,"status","","Returns the `StatusCode`.",62,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",62,{"i":[{"n":"self"}],"o":{"n":"statuscode"}}],[11,"version","","Returns a reference to the associated version.",62,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",62,{"i":[{"n":"self"}],"o":{"n":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",62,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",62,{"i":[{"n":"self"}],"o":{"n":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",62,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",62,{"i":[{"n":"self"}],"o":{"n":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",62,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",62,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_body","","Consumes the response, returning just the body.",62,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the response returning the head and body parts.",62,null],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",62,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"response"}}],[11,"from_u16","","Converts a u16 to a status code.",58,{"i":[{"n":"u16"}],"o":{"g":["statuscode","invalidstatuscode"],"n":"result"}}],[11,"from_bytes","","Converts a &[u8] to a status code",58,null],[11,"as_u16","","Returns the `u16` corresponding to this `StatusCode`.",58,{"i":[{"n":"self"}],"o":{"n":"u16"}}],[11,"as_str","","Returns a &str representation of the `StatusCode`",58,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",58,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"is_informational","","Check if status is within 100-199.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_success","","Check if status is within 200-299.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_redirection","","Check if status is within 300-399.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_client_error","","Check if status is within 400-499.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_server_error","","Check if status is within 500-599.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[18,"CONTINUE","","100 Continue [RFC7231, Section 6.2.1]",58,null],[18,"SWITCHING_PROTOCOLS","","101 Switching Protocols [RFC7231, Section 6.2.2]",58,null],[18,"PROCESSING","","102 Processing [RFC2518]",58,null],[18,"OK","","200 OK [RFC7231, Section 6.3.1]",58,null],[18,"CREATED","","201 Created [RFC7231, Section 6.3.2]",58,null],[18,"ACCEPTED","","202 Accepted [RFC7231, Section 6.3.3]",58,null],[18,"NON_AUTHORITATIVE_INFORMATION","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",58,null],[18,"NO_CONTENT","","204 No Content [RFC7231, Section 6.3.5]",58,null],[18,"RESET_CONTENT","","205 Reset Content [RFC7231, Section 6.3.6]",58,null],[18,"PARTIAL_CONTENT","","206 Partial Content [RFC7233, Section 4.1]",58,null],[18,"MULTI_STATUS","","207 Multi-Status [RFC4918]",58,null],[18,"ALREADY_REPORTED","","208 Already Reported [RFC5842]",58,null],[18,"IM_USED","","226 IM Used [RFC3229]",58,null],[18,"MULTIPLE_CHOICES","","300 Multiple Choices [RFC7231, Section 6.4.1]",58,null],[18,"MOVED_PERMANENTLY","","301 Moved Permanently [RFC7231, Section 6.4.2]",58,null],[18,"FOUND","","302 Found [RFC7231, Section 6.4.3]",58,null],[18,"SEE_OTHER","","303 See Other [RFC7231, Section 6.4.4]",58,null],[18,"NOT_MODIFIED","","304 Not Modified [RFC7232, Section 4.1]",58,null],[18,"USE_PROXY","","305 Use Proxy [RFC7231, Section 6.4.5]",58,null],[18,"TEMPORARY_REDIRECT","","307 Temporary Redirect [RFC7231, Section 6.4.7]",58,null],[18,"PERMANENT_REDIRECT","","308 Permanent Redirect [RFC7238]",58,null],[18,"BAD_REQUEST","","400 Bad Request [RFC7231, Section 6.5.1]",58,null],[18,"UNAUTHORIZED","","401 Unauthorized [RFC7235, Section 3.1]",58,null],[18,"PAYMENT_REQUIRED","","402 Payment Required [RFC7231, Section 6.5.2]",58,null],[18,"FORBIDDEN","","403 Forbidden [RFC7231, Section 6.5.3]",58,null],[18,"NOT_FOUND","","404 Not Found [RFC7231, Section 6.5.4]",58,null],[18,"METHOD_NOT_ALLOWED","","405 Method Not Allowed [RFC7231, Section 6.5.5]",58,null],[18,"NOT_ACCEPTABLE","","406 Not Acceptable [RFC7231, Section 6.5.6]",58,null],[18,"PROXY_AUTHENTICATION_REQUIRED","","407 Proxy Authentication Required [RFC7235, Section 3.2]",58,null],[18,"REQUEST_TIMEOUT","","408 Request Timeout [RFC7231, Section 6.5.7]",58,null],[18,"CONFLICT","","409 Conflict [RFC7231, Section 6.5.8]",58,null],[18,"GONE","","410 Gone [RFC7231, Section 6.5.9]",58,null],[18,"LENGTH_REQUIRED","","411 Length Required [RFC7231, Section 6.5.10]",58,null],[18,"PRECONDITION_FAILED","","412 Precondition Failed [RFC7232, Section 4.2]",58,null],[18,"PAYLOAD_TOO_LARGE","","413 Payload Too Large [RFC7231, Section 6.5.11]",58,null],[18,"URI_TOO_LONG","","414 URI Too Long [RFC7231, Section 6.5.12]",58,null],[18,"UNSUPPORTED_MEDIA_TYPE","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",58,null],[18,"RANGE_NOT_SATISFIABLE","","416 Range Not Satisfiable [RFC7233, Section 4.4]",58,null],[18,"EXPECTATION_FAILED","","417 Expectation Failed [RFC7231, Section 6.5.14]",58,null],[18,"IM_A_TEAPOT","","418 I'm a teapot [curiously not registered by IANA but RFC2324]",58,null],[18,"MISDIRECTED_REQUEST","","421 Misdirected Request RFC7540, Section 9.1.2",58,null],[18,"UNPROCESSABLE_ENTITY","","422 Unprocessable Entity [RFC4918]",58,null],[18,"LOCKED","","423 Locked [RFC4918]",58,null],[18,"FAILED_DEPENDENCY","","424 Failed Dependency [RFC4918]",58,null],[18,"UPGRADE_REQUIRED","","426 Upgrade Required [RFC7231, Section 6.5.15]",58,null],[18,"PRECONDITION_REQUIRED","","428 Precondition Required [RFC6585]",58,null],[18,"TOO_MANY_REQUESTS","","429 Too Many Requests [RFC6585]",58,null],[18,"REQUEST_HEADER_FIELDS_TOO_LARGE","","431 Request Header Fields Too Large [RFC6585]",58,null],[18,"UNAVAILABLE_FOR_LEGAL_REASONS","","451 Unavailable For Legal Reasons [RFC7725]",58,null],[18,"INTERNAL_SERVER_ERROR","","500 Internal Server Error [RFC7231, Section 6.6.1]",58,null],[18,"NOT_IMPLEMENTED","","501 Not Implemented [RFC7231, Section 6.6.2]",58,null],[18,"BAD_GATEWAY","","502 Bad Gateway [RFC7231, Section 6.6.3]",58,null],[18,"SERVICE_UNAVAILABLE","","503 Service Unavailable [RFC7231, Section 6.6.4]",58,null],[18,"GATEWAY_TIMEOUT","","504 Gateway Timeout [RFC7231, Section 6.6.5]",58,null],[18,"HTTP_VERSION_NOT_SUPPORTED","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",58,null],[18,"VARIANT_ALSO_NEGOTIATES","","506 Variant Also Negotiates [RFC2295]",58,null],[18,"INSUFFICIENT_STORAGE","","507 Insufficient Storage [RFC4918]",58,null],[18,"LOOP_DETECTED","","508 Loop Detected [RFC5842]",58,null],[18,"NOT_EXTENDED","","510 Not Extended [RFC2774]",58,null],[18,"NETWORK_AUTHENTICATION_REQUIRED","","511 Network Authentication Required [RFC6585]",58,null],[11,"from_parts","","Attempt to convert a `Uri` from `Parts`",59,{"i":[{"n":"parts"}],"o":{"g":["uri","invaliduriparts"],"n":"result"}}],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",59,{"i":[{"n":"bytes"}],"o":{"g":["uri","invaliduribytes"],"n":"result"}}],[11,"into_parts","","Convert a `Uri` into `Parts`.",59,{"i":[{"n":"self"}],"o":{"n":"parts"}}],[11,"path_and_query","","Returns the path & query components of the Uri",59,{"i":[{"n":"self"}],"o":{"g":["pathandquery"],"n":"option"}}],[11,"path","","Get the path of this `Uri`.",59,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"scheme_part","","Get the scheme of this `Uri`.",59,{"i":[{"n":"self"}],"o":{"g":["scheme"],"n":"option"}}],[11,"authority_part","","Get the authority of this `Uri`.",59,{"i":[{"n":"self"}],"o":{"g":["authority"],"n":"option"}}],[11,"host","","Get the host of this `Uri`.",59,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}],[11,"port","","Get the port of this `Uri`.",59,{"i":[{"n":"self"}],"o":{"g":["u16"],"n":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",59,{"i":[{"n":"self"}],"o":{"g":["str"],"n":"option"}}]],"paths":[[3,"Nothing"],[3,"Json"],[3,"InputData"],[4,"ChangeData"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[3,"Wrapper"],[8,"Component"],[8,"Renderable"],[3,"ComponentLink"],[3,"Scope"],[3,"Href"],[3,"App"],[8,"IKeyboardEvent"],[8,"IMouseEvent"],[3,"ConsoleService"],[3,"DialogService"],[3,"FetchService"],[3,"FetchTask"],[3,"IntervalService"],[3,"IntervalTask"],[4,"Area"],[3,"StorageService"],[3,"TimeoutService"],[3,"TimeoutTask"],[4,"WebSocketStatus"],[3,"WebSocketService"],[3,"WebSocketTask"],[8,"Task"],[8,"Transformer"],[3,"VComp"],[3,"VList"],[4,"VNode"],[3,"VTag"],[3,"VText"],[8,"Listener"],[8,"VDiff"],[3,"Callback"],[8,"Bridged"],[8,"Threaded"],[8,"Bridge"],[8,"Agent"],[3,"HandlerId"],[3,"PrivateBridge"],[3,"PublicBridge"],[3,"AgentScope"],[3,"AgentLink"],[3,"HeaderMap"],[3,"StatusCode"],[3,"Uri"],[3,"Method"],[3,"Request"],[3,"Response"],[3,"KeyDownEvent"],[3,"ClickEvent"],[3,"KeyPressEvent"],[3,"MouseOverEvent"],[3,"MouseOutEvent"],[3,"DoubleClickEvent"],[3,"MouseUpEvent"],[3,"MouseMoveEvent"],[3,"BlurEvent"],[3,"MouseDownEvent"],[3,"KeyUpEvent"]]};
initSearch(searchIndex);
